# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: PR

permissions: {}

on:
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Ensure SHA pinned actions
        uses: zgosalvez/github-actions-ensure-sha-pinned-actions@fc87bb5b5a97953d987372e74478de634726b3e5 # v3.0.25
        with:
          # slsa-github-generator requires using a semver tag for reusable workflows.
          # See: https://github.com/slsa-framework/slsa-github-generator#referencing-slsa-builders-and-generators
          allowlist: |
            slsa-framework/slsa-github-generator

  verify-codegen:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Verify codegen
        run: |
          set -e
          make verify-codegen

  scan-trivy:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Run trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # v0.32.0
        with:
          scan-type: fs
          ignore-unfixed: false
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH,MEDIUM
          scanners: vuln,secret
          exit-code: "0"
          vuln-type: os,library
        env:
          TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"
      - name: Upload trivy scan results
        uses: github/codeql-action/upload-sarif@96f518a34f7a870018057716cc4d7a5c014bd61c # v3.29.5
        with:
          sarif_file: trivy-results.sarif
          category: code

  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          skip-cache: true
          args: --timeout 5m

  semantics-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Validate pull request
        uses: amannn/action-semantic-pull-request@7f33ba792281b034f64e96f4c0b5496782dd3b37 # v6.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed.
          # Default: https://github.com/commitizen/conventional-commit-types
          types: |
            feat
            fix
            build
            chore
            ci
            docs
            perf
            refactor
            revert
            style
            test
            revert
            release
          # Configure which scopes are allowed.
          scopes: |
            api
            client
            commands
            config
            data
            deps
            discovery
            internal
            report
            resource
            runner
            operations
            processors
            test
            utils
            validation
            version
            docs
            release
            testdata
          ignoreLabels: |
            bot
            ignore-semantic-pull-request
          # Configure that a scope must always be provided.
          requireScope: false
          # When using "Squash and merge" on a PR with only one commit, GitHub
          # will suggest using that commit message instead of the PR title for the
          # merge commit, and it's easy to commit this by mistake. Enable this option
          # to also validate the commit message for one commit PRs.
          validateSingleCommit: true
          # Related to `validateSingleCommit` you can opt-in to validate that the PR
          # title matches a single commit to avoid confusion.
          validateSingleCommitMatchesPrTitle: true

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Run tests
        run: |
          set -e
          make tests
      - name: Upload coverage
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage.out
          path: coverage.out
          retention-days: 1
          if-no-files-found: error

  upload-to-codecov:
    needs:
      - unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: coverage.out
      - name: Upload Report to Codecov
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        with:
          files: ./coverage.out
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  prepare-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Save image archive
        shell: bash
        run: |
          set -e
          make ko-build
          make docker-save-image
      - name: Upload image archive
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: image.tar
          path: image.tar
          retention-days: 1
          if-no-files-found: error

  e2e-sidecar-injector:
    runs-on: ubuntu-latest
    needs: [ prepare-images ]
    strategy:
      fail-fast: false
      matrix:
        k8s-version: [v1.30.13, v1.31.9, v1.32.5, v1.33.2]
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Install helm
        id: helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
      - name: Install chainsaw
        uses: kyverno/action-install-chainsaw@f2b47b97dc889c12702113753d713f01ec268de5 # v0.2.12
        with:
          verify: true
      - name: Download image archive
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: image.tar
      - name: Create kind cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          node_image: kindest/node:${{ matrix.k8s-version }}
          cluster_name: kind
      - name: Load image archive
        run: |
          set -e
          make kind-load-archive
      - name: Setup istio
        run: |
          set -e
          export HELM=${{ steps.helm.outputs.helm-path }}
          KYVERNO_AUTHZ_SERVICE=kyverno-authz-server.local make install-istio
      - name: Setup cert-manager
        run: |
          set -e
          export HELM=${{ steps.helm.outputs.helm-path }}
          make install-cert-manager install-cluster-issuer
      - name: Install chart
        run: |
          set -e
          export HELM=${{ steps.helm.outputs.helm-path }}
          make deploy-kyverno-sidecar-injector
      - name: Run Chainsaw Tests
        run: chainsaw test tests/e2e/sidecar-injector

  e2e-authz-server:
    runs-on: ubuntu-latest
    needs: [ prepare-images ]
    strategy:
      fail-fast: false
      matrix:
        k8s-version: [v1.30.13, v1.31.9, v1.32.5, v1.33.2]
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Install helm
        id: helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
      - name: Install chainsaw
        uses: kyverno/action-install-chainsaw@f2b47b97dc889c12702113753d713f01ec268de5 # v0.2.12
        with:
          verify: true
      - name: Download image archive
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: image.tar
      - name: Create kind cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          node_image: kindest/node:${{ matrix.k8s-version }}
          cluster_name: kind
      - name: Load image archive
        run: |
          set -e
          make kind-load-archive
      - name: Setup istio
        run: |
          set -e
          export HELM=${{ steps.helm.outputs.helm-path }}
          KYVERNO_AUTHZ_SERVICE=kyverno-authz-server.kyverno.svc.cluster.local make install-istio
      - name: Setup cert-manager
        run: |
          set -e
          export HELM=${{ steps.helm.outputs.helm-path }}
          make install-cert-manager install-cluster-issuer
      - name: Install chart
        run: |
          set -e
          export HELM=${{ steps.helm.outputs.helm-path }}
          make deploy-kyverno-authz-server
      - name: Install sample app
        run: |
          set -e
          kubectl create ns app
          kubectl label namespace app istio-injection=enabled
          kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.24/samples/httpbin/httpbin.yaml -n app
          kubectl patch deploy httpbin -n app --type=merge -p='{
            "spec": {
              "template": {
                "metadata": {
                  "labels": {
                    "ext-authz": "enabled"
                  }
                }
              }
            }
          }'
      - name: Run Chainsaw Tests (authz-server)
        run:  |
          set -e
          chainsaw test tests/e2e/authz-server
      - name: Run Chainsaw Tests (validation-webhook)
        run:  |
          set -e
          chainsaw test tests/e2e/validation-webhook

  required:
    needs:
      - check-actions
      - e2e-authz-server
      - e2e-sidecar-injector
      - golangci-lint
      - prepare-images
      - semantics-pr
      - unit-tests
      - verify-codegen
    runs-on: ubuntu-latest
    steps:
      - run: echo "Required jobs success!"
