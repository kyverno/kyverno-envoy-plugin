# -- Internal settings used with `helm template` to generate install manifest
# @ignored
templating:
  enabled: false
  debug: false
  version: ~

# -- (string) Override the name of the chart
nameOverride: ~

# -- (string) Override the expanded name of the chart
fullnameOverride: ~

crds:

  # -- Whether to have Helm install the CRDs, if the CRDs are not installed by Helm, they must be added before policies can be created
  install: true

  # -- Additional CRDs annotations
  annotations: {}
    # argocd.argoproj.io/sync-options: Replace=true
    # strategy.spinnaker.io/replace: 'true'

  # -- Additional CRDs labels
  labels: {}

rbac:

  # -- Create RBAC resources
  create: true

  serviceAccount:

    # -- The ServiceAccount name
    name:

    # -- Annotations for the ServiceAccount
    annotations: {}
      # example.com/annotation: value

deployment:

  # -- (int) Desired number of pods
  replicas: ~

  # -- The number of revisions to keep
  revisionHistoryLimit: 10

  # -- Deployment annotations.
  annotations: {}

  # -- Deployment update strategy.
  # Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  # @default -- See [values.yaml](values.yaml)
  updateStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate

pod:

  # -- Additional labels to add to each pod
  labels: {}
    # example.com/label: foo

  # -- Additional annotations to add to each pod
  annotations: {}
    # example.com/annotation: foo

  # -- Image pull secrets
  imagePullSecrets: []
    # - secretName

  # -- Security context
  securityContext: {}

  # -- Node labels for pod assignment
  nodeSelector: {}

  # -- List of node taints to tolerate
  tolerations: []

  # -- Topology spread constraints.
  topologySpreadConstraints: []

  # -- Optional priority class
  priorityClassName: ''

  # -- Change `hostNetwork` to `true` when you want the pod to share its host's network namespace.
  # Useful for situations like when you end up dealing with a custom CNI over Amazon EKS.
  # Update the `dnsPolicy` accordingly as well to suit the host network mode.
  hostNetwork: false

  # -- `dnsPolicy` determines the manner in which DNS resolution happens in the cluster.
  # In case of `hostNetwork: true`, usually, the `dnsPolicy` is suitable to be `ClusterFirstWithHostNet`.
  # For further reference: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy.
  dnsPolicy: ClusterFirst

  # -- Pod anti affinity constraints.
  # @default -- See [values.yaml](values.yaml)
  antiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - admission-controller
          topologyKey: kubernetes.io/hostname

  # -- Pod affinity constraints.
  affinity: {}

  # -- Node affinity constraints.
  nodeAffinity: {}

containers:

  server:

    image:

      # -- Image registry
      registry: ghcr.io

      # -- Image repository
      repository: kyverno/kyverno-envoy-plugin

      # -- (string) Image tag
      # Defaults to appVersion in Chart.yaml if omitted
      tag: ~

      # -- Image pull policy
      pullPolicy: IfNotPresent

    resources:

      # -- Pod resource limits
      limits:
        memory: 384Mi

      # -- Pod resource requests
      requests:
        cpu: 100m
        memory: 128Mi

    # -- Container security context
    securityContext:
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault

    # -- Startup probe.
    # The block is directly forwarded into the deployment, so you can use whatever startupProbes configuration you want.
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    # @default -- See [values.yaml](values.yaml)
    startupProbe:
      httpGet:
        path: /livez
        port: 9080
        scheme: HTTP
      failureThreshold: 20
      initialDelaySeconds: 2
      periodSeconds: 6

    # -- Liveness probe.
    # The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    # @default -- See [values.yaml](values.yaml)
    livenessProbe:
      httpGet:
        path: /livez
        port: 9080
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 2
      successThreshold: 1

    # -- Readiness Probe.
    # The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    # @default -- See [values.yaml](values.yaml)
    readinessProbe:
      httpGet:
        path: /readyz
        port: 9080
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1

    # -- Container ports.
    ports:
    - containerPort: 9080
      name: http
      protocol: TCP
    - containerPort: 9081
      name: grpc
      protocol: TCP

    # -- Container args.
    args:
      - serve
      - authz-server
      - --http-address=:9080
      - --grpc-address=:9081

service:

  # -- Service port.
  port: 9081

  # -- Service type.
  type: ClusterIP

  # -- Service node port.
  # Only used if `type` is `NodePort`.
  nodePort:

  # -- Service annotations.
  annotations: {}

pdb:
