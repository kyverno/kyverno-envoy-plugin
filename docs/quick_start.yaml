# Application Deployment with kyverno-envoy-plugin and Envoy sidecars.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: testapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: testapp
  template:
    metadata:
      labels:
        app: testapp
    spec:
      initContainers:
        - name: proxy-init
          image: sanskardevops/proxyinit:latest
          # Configure the iptables bootstrap script to redirect traffic to the
          # Envoy proxy on port 8000, specify that Envoy will be running as user
          # 1111, and that we want to exclude port 8181 from the proxy for the Kyverno health checks.
          # These values must match up with the configuration
          # defined below for the "envoy" and "kyverno-envoy-plugin" containers.
          args: ["-p", "7000", "-u", "1111", -w, "8181"]
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
      containers:
        - name: test-application
          image: sanskardevops/test-application:0.0.1
          ports:
            - containerPort: 8080
        - name: envoy
          image: envoyproxy/envoy:v1.30-latest
          securityContext:
            runAsUser: 1111
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - readOnly: true
              mountPath: /config
              name: proxy-config
          args:
            - "envoy"
            - "--config-path"
            - "/config/envoy.yaml"
        - name: kyverno-envoy-plugin
          image: sanskardevops/plugin:0.0.34
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8181
            - containerPort: 9000
          volumeMounts:
            - readOnly: true
              mountPath: /policies
              name: policy-files
          args:
            - "serve"
            - "--policy=/policies/policy.yaml"
            - "--address=:9000"
            - "--healthaddress=:8181"
          livenessProbe:
            httpGet:
              path: /health
              scheme: HTTP
              port: 8181
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              scheme: HTTP
              port: 8181
            initialDelaySeconds: 5
            periodSeconds: 5  
      volumes:
        - name: proxy-config
          configMap:
            name: proxy-config
        - name: policy-files
          configMap:
            name: policy-files
--- 
# Envoy Config with External Authorization filter that will query kyverno-envoy-plugin.
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 7000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: backend
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: service
              http_filters:
              - name: envoy.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  with_request_body:
                    max_request_bytes: 8192
                    allow_partial_message: true
                  failure_mode_allow: false
                  grpc_service:
                    google_grpc:
                      target_uri: 127.0.0.1:9000
                      stat_prefix: ext_authz
                    timeout: 0.5s
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: service
        connect_timeout: 0.25s
        type: strict_dns
        lb_policy: round_robin
        load_assignment:
          cluster_name: service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8080
    admin:
      access_log_path: "/dev/null"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
    layered_runtime:
      layers:
        - name: static_layer_0
          static_layer:
            envoy:
              resource_limits:
                listener:
                  example_listener_name:
                    connection_limit: 10000
            overload:
              global_downstream_max_connections: 50000
---
# Example policy to enforce into kyverno-envoy-plugin sidecars.
apiVersion: v1
kind: ConfigMap
metadata:
  name: policy-files
data:
  policy.yaml: |
    apiVersion: json.kyverno.io/v1alpha1
    kind: ValidatingPolicy
    metadata:
      name: checkrequest
    spec:
      rules:
        - name: deny-guest-request-at-post
          assert:
            any:
            - message: "POST method calls at path /book are not allowed to guests users"
              check:
                request:
                    http:
                        method: POST
                        headers:
                            authorization:
                                (split(@, ' ')[1]):
                                    (jwt_decode(@ , 'secret').payload.role): admin
                        path: /book                             
            - message: "GET method call is allowed to both guest and admin users"
              check:
                request:
                    http:
                        method: GET
                        headers:
                            authorization:
                                (split(@, ' ')[1]):
                                    (jwt_decode(@ , 'secret').payload.role): admin
                        path: /book 
            - message: "GET method call is allowed to both guest and admin users"
              check:
                request:
                    http:
                        method: GET
                        headers:
                            authorization:
                                (split(@, ' ')[1]):
                                    (jwt_decode(@ , 'secret').payload.role): guest
                        path: /book               
                        