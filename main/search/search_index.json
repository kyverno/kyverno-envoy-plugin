{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"cel-extensions/","title":"CEL extensions","text":"<p>The CEL engine used to evaluate variables and authorization rules has been extended with libraries to help processing the input <code>CheckRequest</code> and forge the corresponding <code>OkResponse</code> and/or <code>DeniedResponse</code>.</p>"},{"location":"cel-extensions/#envoy-plugin-libraries","title":"Envoy plugin libraries","text":"<ul> <li>Envoy</li> <li>Jwk</li> <li>Jwt</li> <li>Json</li> </ul>"},{"location":"cel-extensions/#common-libraries","title":"Common libraries","text":"<p>The libraries below are common CEL extensions enabled in the Kyverno Authz Server CEL engine:</p> <ul> <li>Optional types</li> <li>Cross type numeric comparisons</li> <li>Bindings</li> <li>Encoders</li> <li>Lists</li> <li>Math</li> <li>Protos</li> <li>Sets</li> <li>Strings</li> </ul>"},{"location":"cel-extensions/#kubernetes-libraries","title":"Kubernetes libraries","text":"<p>The libraries below are imported from Kubernetes:</p> <ul> <li>Lists</li> <li>Regex</li> <li>URL</li> <li>IP</li> <li>CIDR</li> <li>Format</li> <li>Quantity</li> <li>Semver</li> </ul>"},{"location":"cel-extensions/#kyverno-libraries","title":"Kyverno libraries","text":"<p>The libraries below are imported from Kyverno:</p> <ul> <li>HTTP</li> <li>Image</li> <li>ImageData</li> </ul>"},{"location":"cel-extensions/envoy/","title":"Envoy library","text":"<p>The <code>envoy</code> library adds some types and function to simplify the creation of CheckResponse objects.</p>"},{"location":"cel-extensions/envoy/#types","title":"Types","text":""},{"location":"cel-extensions/envoy/#checkrequest","title":"<code>&lt;CheckRequest&gt;</code>","text":"<p>CEL Type / Proto: <code>envoy.service.auth.v3.CheckRequest</code></p>"},{"location":"cel-extensions/envoy/#checkresponse","title":"<code>&lt;CheckResponse&gt;</code>","text":"<p>CEL Type / Proto: <code>envoy.service.auth.v3.CheckResponse</code></p>"},{"location":"cel-extensions/envoy/#okhttpresponse","title":"<code>&lt;OkHttpResponse&gt;</code>","text":"<p>CEL Type / Proto: <code>envoy.service.auth.v3.OkHttpResponse</code></p>"},{"location":"cel-extensions/envoy/#deniedhttpresponse","title":"<code>&lt;DeniedHttpResponse&gt;</code>","text":"<p>CEL Type / Proto: <code>envoy.service.auth.v3.DeniedHttpResponse</code></p>"},{"location":"cel-extensions/envoy/#metadata","title":"<code>&lt;Metadata&gt;</code>","text":"<p>CEL Type / Proto: <code>google.protobuf.Struct</code></p>"},{"location":"cel-extensions/envoy/#headervalueoption","title":"<code>&lt;HeaderValueOption&gt;</code>","text":"<p>CEL Type / Proto: <code>envoy.config.core.v3.HeaderValueOption</code></p>"},{"location":"cel-extensions/envoy/#queryparameter","title":"<code>&lt;QueryParameter&gt;</code>","text":"<p>CEL Type / Proto: <code>envoy.config.core.v3.QueryParameter</code></p>"},{"location":"cel-extensions/envoy/#status","title":"<code>&lt;Status&gt;</code>","text":"<p>CEL Type / Proto: <code>google.rpc.Status</code></p>"},{"location":"cel-extensions/envoy/#functions","title":"Functions","text":""},{"location":"cel-extensions/envoy/#envoyallowed","title":"envoy.Allowed","text":"<p>This function creates an <code>&lt;OkHttpResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads","title":"Signature and overloads","text":"<pre><code>envoy.Allowed() -&gt; &lt;OkHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example","title":"Example","text":"<pre><code>envoy.Allowed()\n</code></pre>"},{"location":"cel-extensions/envoy/#envoydenied","title":"envoy.Denied","text":"<p>This function creates a <code>&lt;DeniedHttpResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_1","title":"Signature and overloads","text":"<pre><code>envoy.Denied(&lt;int&gt; code) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_1","title":"Example","text":"<pre><code>envoy.Denied(401)\n</code></pre>"},{"location":"cel-extensions/envoy/#envoyheader","title":"envoy.Header","text":"<p>This function creates an <code>&lt;HeaderValueOption&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_2","title":"Signature and overloads","text":"<pre><code>envoy.Header(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;HeaderValueOption&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_2","title":"Example","text":"<pre><code>envoy.Header(\"foo\", \"bar\")\n</code></pre>"},{"location":"cel-extensions/envoy/#envoyqueryparam","title":"envoy.QueryParam","text":"<p>This function creates a <code>&lt;QueryParameter&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_3","title":"Signature and overloads","text":"<pre><code>envoy.QueryParam(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;QueryParameter&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_3","title":"Example","text":"<pre><code>envoy.QueryParam(\"foo\", \"bar\")\n</code></pre>"},{"location":"cel-extensions/envoy/#withbody","title":"WithBody","text":"<p>This function sets the body of a <code>&lt;DeniedHttpResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_4","title":"Signature and overloads","text":"<pre><code>&lt;DeniedHttpResponse&gt;.WithBody(&lt;string&gt; body) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_4","title":"Example","text":"<pre><code>envoy.Denied(401).WithBody(\"Unauthorized Request\")\n</code></pre>"},{"location":"cel-extensions/envoy/#withheader","title":"WithHeader","text":"<p>This function adds a <code>&lt;HeaderValueOption&gt;</code>:</p> <ul> <li>When the request is sent upstream by Envoy, in the case of an <code>&lt;OkHttpResponse&gt;</code>.</li> <li>When the response is sent downstream by Envoy, in the case of a <code>&lt;DeniedHttpResponse&gt;</code>.</li> </ul>"},{"location":"cel-extensions/envoy/#signature-and-overloads_5","title":"Signature and overloads","text":"<p><pre><code>&lt;OkHttpResponse&gt;.WithHeader(&lt;HeaderValueOption&gt; header) -&gt; &lt;OkHttpResponse&gt;\n</code></pre> <pre><code>&lt;OkHttpResponse&gt;.WithHeader(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;OkHttpResponse&gt;\n</code></pre> <pre><code>&lt;DeniedHttpResponse&gt;.WithHeader(&lt;HeaderValueOption&gt; header) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre> <pre><code>&lt;DeniedHttpResponse&gt;.WithHeader(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_5","title":"Example","text":"<p><pre><code>envoy.Allowed().WithHeader(envoy.Header(\"foo\", \"bar\"))\n</code></pre> <pre><code>envoy.Allowed().WithHeader(\"foo\", \"bar\")\n</code></pre> <pre><code>envoy.Denied(401).WithHeader(envoy.Header(\"foo\", \"bar\"))\n</code></pre> <pre><code>envoy.Denied(401).WithHeader(\"foo\", \"bar\")\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withoutheader","title":"WithoutHeader","text":"<p>This function marks a header to be removed when the request is sent upstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_6","title":"Signature and overloads","text":"<pre><code>&lt;OkHttpResponse&gt;.WithoutHeader(&lt;string&gt; header) -&gt; &lt;OkHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_6","title":"Example","text":"<pre><code>envoy.Allowed().WithoutHeader(\"foo\")\n</code></pre>"},{"location":"cel-extensions/envoy/#withresponseheader","title":"WithResponseHeader","text":"<p>This function adds a <code>&lt;HeaderValueOption&gt;</code> when the response is sent downstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_7","title":"Signature and overloads","text":"<p><pre><code>&lt;OkHttpResponse&gt;.WithResponseHeader(&lt;HeaderValueOption&gt; header) -&gt; &lt;OkHttpResponse&gt;\n</code></pre> <pre><code>&lt;OkHttpResponse&gt;.WithResponseHeader(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;OkHttpResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_7","title":"Example","text":"<p><pre><code>envoy.Allowed().WithResponseHeader(envoy.Header(\"foo\", \"bar\"))\n</code></pre> <pre><code>envoy.Allowed().WithResponseHeader(\"foo\", \"bar\")\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withqueryparam","title":"WithQueryParam","text":"<p>This function adds a <code>&lt;QueryParameter&gt;</code> to be added when the request is sent upstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_8","title":"Signature and overloads","text":"<p><pre><code>&lt;OkHttpResponse&gt;.WithQueryParam(&lt;QueryParameter&gt; param) -&gt; &lt;OkHttpResponse&gt;\n</code></pre> <pre><code>&lt;OkHttpResponse&gt;.WithQueryParam(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;OkHttpResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_8","title":"Example","text":"<p><pre><code>envoy.Allowed().WithQueryParam(envoy.QueryParam(\"foo\", \"bar\"))\n</code></pre> <pre><code>envoy.Allowed().WithQueryParam(\"foo\", \"bar\")\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withoutqueryparam","title":"WithoutQueryParam","text":"<p>This function marks a query parameter to be removed when the request is sent upstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_9","title":"Signature and overloads","text":"<pre><code>&lt;OkHttpResponse&gt;.WithoutQueryParam(&lt;string&gt; param) -&gt; &lt;OkHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_9","title":"Example","text":"<pre><code>envoy.Allowed().WithoutQueryParam(\"foo\")\n</code></pre>"},{"location":"cel-extensions/envoy/#keepemptyvalue","title":"KeepEmptyValue","text":"<p>This function sets the <code>keep_empty_value</code> field of an <code>&lt;HeaderValueOption&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_10","title":"Signature and overloads","text":"<p><pre><code>&lt;HeaderValueOption&gt;.KeepEmptyValue() -&gt; &lt;HeaderValueOption&gt;\n</code></pre> <pre><code>&lt;HeaderValueOption&gt;.KeepEmptyValue(&lt;bool&gt; keep) -&gt; &lt;HeaderValueOption&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_10","title":"Example","text":"<p><pre><code>envoy.Header(\"foo\", \"bar\").KeepEmptyValue()\n</code></pre> <pre><code>envoy.Header(\"foo\", \"bar\").KeepEmptyValue(true)\n</code></pre></p>"},{"location":"cel-extensions/envoy/#response","title":"Response","text":"<p>This function creates a <code>&lt;CheckResponse&gt;</code> object from an <code>&lt;OkHttpResponse&gt;</code> / <code>&lt;DeniedHttpResponse&gt;</code>.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_11","title":"Signature and overloads","text":"<p><pre><code>&lt;OkHttpResponse&gt;.Response() -&gt; &lt;CheckResponse&gt;\n</code></pre> <pre><code>&lt;DeniedHttpResponse&gt;.Response() -&gt; &lt;CheckResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_11","title":"Example","text":"<p><pre><code>envoy.Allowed().Response()\n</code></pre> <pre><code>envoy.Denied(401).Response()\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withmessage","title":"WithMessage","text":"<p>This function sets the <code>status.message</code> field of a <code>&lt;CheckResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_12","title":"Signature and overloads","text":"<pre><code>&lt;CheckResponse&gt;.WithMessage(&lt;string&gt; message) -&gt; &lt;CheckResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_12","title":"Example","text":"<p><pre><code>envoy.Allowed().Response().WithMessage(\"hello world!\")\n</code></pre> <pre><code>envoy.Denied(401).Response().WithMessage(\"hello world!\")\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withmetadata","title":"WithMetadata","text":"<p>This function sets the <code>dynamic_metadata</code> field of an <code>&lt;CheckResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_13","title":"Signature and overloads","text":"<pre><code>&lt;CheckResponse&gt;.WithMetadata(&lt;Metadata&gt; metadata) -&gt; &lt;CheckResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_13","title":"Example","text":"<p><pre><code>envoy.Allowed().Response().WithMetadata({ \"foo\": \"bar\" })\n</code></pre> <pre><code>envoy.Denied(401).Response().WithMetadata({ \"foo\": \"bar\" })\n</code></pre></p>"},{"location":"cel-extensions/http/","title":"HTTP library","text":"<p>The <code>http</code> library provides types and functions for working with HTTP requests and responses in CEL expressions. It enables policies to inspect incoming HTTP requests and construct custom HTTP responses.</p>"},{"location":"cel-extensions/http/#types","title":"Types","text":""},{"location":"cel-extensions/http/#httprequest","title":"<code>http.Request</code>","text":"<p>Represents an HTTP request with all its attributes.</p> Field CEL Type Description <code>method</code> <code>string</code> HTTP method (GET, POST, etc.) <code>headers</code> <code>http.KV</code> Request headers <code>path</code> <code>string</code> URL path <code>host</code> <code>string</code> Host header value <code>scheme</code> <code>string</code> URL scheme (http, https) <code>queryParams</code> <code>http.KV</code> Query parameters <code>fragment</code> <code>string</code> URL fragment <code>size</code> <code>int</code> Request body size in bytes <code>protocol</code> <code>string</code> HTTP protocol version (HTTP/1.1, HTTP/2) <code>body</code> <code>string</code> Request body as string <code>rawBody</code> <code>bytes</code> Request body as raw bytes <p>Example: <pre><code>object.method == \"POST\" &amp;&amp; object.path.startsWith(\"/api\")\n</code></pre></p>"},{"location":"cel-extensions/http/#httpkv","title":"<code>http.KV</code>","text":"<p>Represents a key-value map for headers and query parameters. Supports multiple values per key.</p> <p>Methods: - <code>get(string) -&gt; string</code>: Get the first value for a header/parameter - <code>getAll(string) -&gt; list&lt;string&gt;</code>: Get all values for a header/parameter</p> <p>Example: <pre><code>object.headers.get(\"content-type\") == \"application/json\"\n</code></pre></p>"},{"location":"cel-extensions/http/#httpresponse","title":"<code>http.Response</code>","text":"<p>Represents an HTTP response that can be returned from a policy.</p> Field CEL Type Description <code>status</code> <code>int</code> HTTP status code <code>headers</code> <code>http.KV</code> Response headers <code>body</code> <code>string</code> Response body <p>Methods: - <code>status(int) -&gt; http.Response</code>: Set the HTTP status code - <code>withHeader(string, string) -&gt; http.Response</code>: Add a response header - <code>withBody(string) -&gt; http.Response</code>: Set the response body</p> <p>Example: <pre><code>http.response().status(403).withBody(\"Access denied\")\n</code></pre></p>"},{"location":"cel-extensions/http/#functions","title":"Functions","text":""},{"location":"cel-extensions/http/#httpresponse_1","title":"http.response()","text":"<p>Creates a new <code>http.Response</code> object that can be customized with status, headers, and body.</p> <p>Signature: <pre><code>http.response() -&gt; http.Response\n</code></pre></p> <p>Example: <pre><code>http.response().status(200).withBody(\"Success\")\n</code></pre></p>"},{"location":"cel-extensions/http/#get","title":"get()","text":"<p>Gets the first value of a header or query parameter from an <code>http.KV</code> object. Returns an empty string if the key doesn't exist.</p> <p>Signature: <pre><code>http.KV.get(string) -&gt; string\n</code></pre></p> <p>Example: <pre><code>object.headers.get(\"authorization\")\nobject.queryParams.get(\"token\")\n</code></pre></p>"},{"location":"cel-extensions/http/#getall","title":"getAll()","text":"<p>Gets all values of a header or query parameter from an <code>http.KV</code> object. Returns an empty list if the key doesn't exist.</p> <p>Signature: <pre><code>http.KV.getAll(string) -&gt; list&lt;string&gt;\n</code></pre></p> <p>Example: <pre><code>object.headers.getAll(\"accept\")\n</code></pre></p>"},{"location":"cel-extensions/http/#status","title":"status()","text":"<p>Sets the HTTP status code for an <code>http.Response</code> object.</p> <p>Signature: <pre><code>http.Response.status(int) -&gt; http.Response\n</code></pre></p> <p>Example: <pre><code>http.response().status(403)\nhttp.response().status(200)\nhttp.response().status(401)\n</code></pre></p>"},{"location":"cel-extensions/http/#withheader","title":"withHeader()","text":"<p>Adds a header to an <code>http.Response</code> object. Can be called multiple times to add multiple headers.</p> <p>Signature: <pre><code>http.Response.withHeader(string, string) -&gt; http.Response\n</code></pre></p> <p>Example: <pre><code>http.response().status(200).withHeader(\"x-custom-header\", \"value\")\nhttp.response().status(403).withHeader(\"www-authenticate\", \"Bearer\")\n</code></pre></p>"},{"location":"cel-extensions/http/#withbody","title":"withBody()","text":"<p>Sets the response body for an <code>http.Response</code> object.</p> <p>Signature: <pre><code>http.Response.withBody(string) -&gt; http.Response\n</code></pre></p> <p>Example: <pre><code>http.response().status(403).withBody(\"Access denied\")\nhttp.response().status(200).withBody(\"Request approved\")\n</code></pre></p>"},{"location":"cel-extensions/http/#complete-examples","title":"Complete Examples","text":""},{"location":"cel-extensions/http/#allow-request-with-custom-header","title":"Allow request with custom header","text":"<pre><code>http.response().status(200).withHeader(\"x-validated-by\", \"kyverno\")\n</code></pre>"},{"location":"cel-extensions/http/#deny-request-with-custom-status-and-body","title":"Deny request with custom status and body","text":"<pre><code>http.response().status(403).withBody(\"Insufficient permissions\")\n</code></pre>"},{"location":"cel-extensions/http/#check-authorization-header","title":"Check authorization header","text":"<pre><code>object.headers.get(\"authorization\").startsWith(\"Bearer \")\n  ? http.response().status(200)\n  : http.response().status(401).withBody(\"Missing authorization header\")\n</code></pre>"},{"location":"cel-extensions/http/#validate-content-type","title":"Validate content type","text":"<pre><code>object.headers.get(\"content-type\") == \"application/json\"\n  ? http.response().status(200)\n  : http.response().status(415).withBody(\"Unsupported media type\")\n</code></pre>"},{"location":"cel-extensions/json/","title":"JSON library","text":"<p>The JSON CEL library provides functions for parsing JSON strings into CEL values.</p>"},{"location":"cel-extensions/json/#functions","title":"Functions","text":""},{"location":"cel-extensions/json/#jsonunmarshal","title":"json.Unmarshal","text":"<p>The <code>json</code> function parses a JSON-encoded string and returns the corresponding CEL value. This allows you to work with JSON data directly in CEL expressions.</p>"},{"location":"cel-extensions/json/#signature","title":"Signature","text":"<pre><code>json.Unmarshal(&lt;string&gt; jsonString) -&gt; any\n</code></pre>"},{"location":"cel-extensions/json/#example","title":"Example","text":"<pre><code># Check JSON nested value\njson.Unmarshal(\"{\\\"item1\\\": { \\\"item2\\\": 123 } \\\"}\").item1.item2 == 123\n</code></pre>"},{"location":"cel-extensions/jwk/","title":"Jwk library","text":"<p>The JWK lib helps working with jwk keys and key sets as described in rfc7517.</p>"},{"location":"cel-extensions/jwk/#types","title":"Types","text":""},{"location":"cel-extensions/jwk/#set","title":"<code>&lt;Set&gt;</code>","text":"<p>CEL Type / Proto <code>jwk.Set</code></p> <p>This is an opaque type with no available fields. Its purpose is to be used with jwt.Decode to very a token issuer.</p>"},{"location":"cel-extensions/jwk/#functions","title":"Functions","text":""},{"location":"cel-extensions/jwk/#jwksfetch","title":"jwks.Fetch","text":"<p>The <code>jwks.Fetch</code> function fetches and parses a JWK resource specified by a URL.</p>"},{"location":"cel-extensions/jwk/#signature-and-overloads","title":"Signature and overloads","text":"<pre><code>jwks.Fetch(&lt;string&gt; url) -&gt; &lt;Set&gt;\n</code></pre>"},{"location":"cel-extensions/jwk/#example","title":"Example","text":"<pre><code>jwks.Fetch(\"https://.../.well-known/jwks.json\")\n</code></pre>"},{"location":"cel-extensions/jwt/","title":"Jwt library","text":"<p>Policies have native functionality to decode and verify the contents of JWT tokens in order to enforce additional authorization logic on requests.</p>"},{"location":"cel-extensions/jwt/#types","title":"Types","text":""},{"location":"cel-extensions/jwt/#token","title":"<code>&lt;Token&gt;</code>","text":"<p>CEL Type / Proto <code>jwt.Token</code></p> Field CEL Type / Proto Docs Valid <code>bool</code> Claims <code>google.protobuf.Struct</code> Docs"},{"location":"cel-extensions/jwt/#functions","title":"Functions","text":""},{"location":"cel-extensions/jwt/#jwtdecode","title":"jwt.Decode","text":"<p>The <code>jwt.Decode</code> function decodes and validates a JWT token. It accepts two arguments: the token and the secret to verify the signature.</p>"},{"location":"cel-extensions/jwt/#signature-and-overloads","title":"Signature and overloads","text":"<pre><code>jwt.Decode(&lt;string&gt; token, &lt;string&gt; key) -&gt; &lt;Token&gt;\njwt.Decode(&lt;string&gt; token, &lt;jwk.Set&gt; keySet) -&gt; &lt;Token&gt;\n</code></pre>"},{"location":"cel-extensions/jwt/#example","title":"Example","text":"<pre><code>jwt.Decode(\"eyJhbGciOiJIUzI1NiI....\", \"secret\")\njwt.Decode(\"eyJhbGciOiJIUzI1NiI....\", jwks.Fetch(\"https://.../.well-known/jwks.json\"))\n</code></pre>"},{"location":"community/","title":"Community","text":"<p>The Kyverno Envoy Plugin has a growing community and we would definitely love to see you join and contribute.</p> <p>Everyone is welcome to make suggestions, report bugs, open feature requests, contribute code or docs, participate in discussions, write blogs or anything that can benefit the project.</p>  The Kyverno Envoy Plugin is built and maintained under the Kyverno umbrella but decisions are Community driven Everyone's voice matters"},{"location":"community/#slack-channel","title":"Slack channel","text":"<p>Join our slack channel #kyverno to meet with users, contributors and maintainers.</p>"},{"location":"community/#roadmap","title":"RoadMap","text":"<p>For detailed information on our planned features and upcoming updates, please view our Roadmap.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>Please read the contributing guide for details around:</p> <ol> <li>Code of Conduct</li> <li>Code Culture</li> <li>Details on how to contribute</li> </ol>"},{"location":"community/#adopters","title":"Adopters","text":"<p>If you are using the Kyverno Envoy Plugin and want to share it publicly we always appreciate a bit of support. Pull requests to the ADOPTERS LIST will put a smile on our faces </p>"},{"location":"community/contribute/","title":"Contributing","text":"<p>Kyverno Envoy Plugin, developed by Kyverno, is a flexible authorization service that enforces Kyverno policies for Envoy proxies and plain HTTP services. Our community plays a crucial role in shaping the project by reporting bugs, suggesting features, and improving documentation.</p> <p>We aim to make our issue tracker, discussion board, and documentation well-structured and easy to navigate. By following our guidelines, you can help us address your requests efficiently.</p>"},{"location":"community/contribute/#how-you-can-contribute","title":"How you can contribute","text":"<p>We appreciate your efforts in reporting bugs, requesting features, and engaging in discussions. Here's how you can contribute:</p>"},{"location":"community/contribute/#creating-an-issue","title":"Creating an issue","text":"<ul> <li> <p> Something is not working?</p> <p>Report a bug by creating an issue with a reproduction</p> <p> Report a bug</p> </li> <li> <p> Missing information in our docs?</p> <p>Report missing information or potential inconsistencies in our documentation</p> <p> Report a docs issue</p> </li> <li> <p> Want to submit an idea?</p> <p>Propose a change, feature request, or suggest an improvement</p> <p> Request a change</p> </li> <li> <p> Have a question or need help?</p> <p>Ask a question on our discussion board and get in touch with our community</p> <p> Ask a question</p> </li> </ul>"},{"location":"community/contribute/#contributing_1","title":"Contributing","text":"<ul> <li> <p> Want to create a pull request?</p> <p>Learn how to create a comprehensive and useful pull request (PR)</p> <p> Create a pull request</p> </li> </ul>"},{"location":"community/contribute/#checklist","title":"Checklist","text":"<p>Before interacting within the project, please consider the following questions to ensure you're using the correct issue template and providing all necessary information.</p> <p>Issues, discussions, and comments are forever</p> <p>Please note that everything you write is permanent and will remain for everyone to read \u2013 forever. Therefore, please always be nice and constructive, follow our contribution guidelines, and comply with our Code of Conduct.</p>"},{"location":"community/contribute/#before-creating-an-issue","title":"Before creating an issue","text":"<ul> <li>Are you using the appropriate issue template, or is there another issue template that better fits the context of your request?</li> <li>Have you checked if a similar bug report or change request has already been created, or have you stumbled upon something that might be related?</li> <li>Did you fill out every field as requested and provide all additional information needed to comprehend your request?</li> </ul>"},{"location":"community/contribute/#before-asking-a-question","title":"Before asking a question","text":"<ul> <li>Is the topic a question for our discussion board, or is it a bug report or change request that should be raised on our issue tracker?</li> <li>Is there an open discussion on the topic of your request? If the answer is yes, does your question match the direction of the discussion, or should you open a new discussion?</li> <li>Did you provide our community with all the necessary information to understand your question and help you quickly, or can you make it easier to help you?</li> </ul>"},{"location":"community/contribute/#before-commenting","title":"Before commenting","text":"<ul> <li>Is your comment relevant to the topic of the current page, post, issue, or discussion, or is it better to create a new issue or discussion?</li> <li>Does your comment add value to the conversation? Is it constructive and respectful to our community and maintainers? Could you just use a  reaction instead?</li> </ul>"},{"location":"community/contribute/#rights-and-responsibilities","title":"Rights and responsibilities","text":"<p>As maintainers, we are entrusted with the responsibility to moderate communication within our community, including the authority to close, remove, reject, or edit issues, discussions, comments, commits, and to block users who do not align with our contribution guidelines and our Code of Conduct. This role requires us to be actively involved in maintaining the integrity and positive atmosphere of our community. Upholding these standards decisively ensures a respectful and inclusive environment for all members.</p>"},{"location":"community/contribute/#code-of-conduct","title":"Code of Conduct","text":"<p>Our Code of Conduct outlines the expectation for all community members to treat one another with respect, employing inclusive and welcoming language. Our commitment is to foster a positive and supportive environment, free of inappropriate, offensive, or harmful behavior.</p> <p>We take any violations seriously and will take appropriate action in response to uphold these values.<sup>1</sup></p>"},{"location":"community/contribute/#incomplete-issues-and-duplicates","title":"Incomplete issues and duplicates","text":"<p>We have invested significant time and effort in the setup of our contribution process, ensuring that we assess the essential requirements for reviewing and responding to issues effectively. Each field in our issue templates is thoughtfully designed to help us fully understand your concerns and the nature of your matter. We encourage all members to utilize the search function before submitting new issues or starting discussions to help avoid duplicates. Your cooperation is crucial in keeping our community's discussions constructive and organized.</p> <ul> <li> <p>Mandatory completion of issue templates: We need all of the information required in our issue templates because it ensures that every user and maintainer, regardless of their experience, can understand the content and severity of your bug report or change request.</p> </li> <li> <p>Closing incomplete issues:   We reserve the right to close issues lacking essential information, such as but not limited to [minimal reproductions] or those not adhering to the quality standards and requirements specified in our issue templates. Such issues can be reopened once the missing information has been provided.</p> </li> <li> <p>Handling duplicates: To maintain organized and efficient communication within our issue tracker and discussion board, we reserve the right to close any duplicated issues or lock duplicated discussions. Opening multiple channels to ask the same question or report the same issue across different forums hinders our ability to manage and address community concerns effectively. This approach is vital for efficient time management, as duplicated questions can consume the time of multiple team members simultaneously. Ensuring that each issue or discussion is unique and progresses with new information helps us to maintain focus and support our community.</p> <p>We further reserve the right to immediately close discussions or issues that are reopened without providing new information or simply because users have not yet received a response to their issue/question, as the issue is marked as incomplete.</p> </li> <li> <p>Limitations of automated tools:  While we believe in the value and efficiency that automated tools bring to identifying potential issues (such as those identified by Lighthouse, Accessibility tools, and others), simply submitting an issue generated by these tools does not constitute a complete bug report. These tools sometimes produce verbose outputs and may include false positives, which necessitate a critical evaluation. You are of course welcome to attach generated reports to your issue. However, this does not substitute the requirement for a minimal reproduction or a thorough discussion of the findings. We reserve the right to mark these issues as incomplete and close them. This practice ensures that we are addressing genuine concerns with precision and clarity, rather than navigating through extensive automated outputs.</p> </li> </ul> <ol> <li> <p>Warning and blocking policy: Given the increasing popularity of our project and our commitment to a healthy community, we've defined clear guidelines on how we proceed with violations:</p> <p>1.1. First warning: Users displaying repeated inappropriate, offensive, or harmful behavior will receive a first warning. This warning serves as a formal notice that their behavior is not in alignment with our community standards and Code of Conduct. The first warning is permanent.</p> <p>1.2. Second warning and opportunity for resolution: If the behavior persists, a second warning will be issued. Upon receiving the second warning, the user will be given a 5-day period for reflection, during which they are encouraged to publicly explain or apologize for their actions. This period is designed to offer an opportunity for openly clearing out any misunderstanding.</p> <p>1.3. Blocking: Should there be no response or improvement in behavior following the second warning, we reserve the right to block the user from the community and repository. Blocking is considered a last resort, used only when absolutely necessary to protect the community's integrity and positive atmosphere.</p> <p>Blocking has been an exceptionally rare necessity in our overwhelmingly positive community, highlighting our preference for constructive dialogue and mutual respect. It aims to protect our community members and team.\u00a0\u21a9</p> </li> </ol>"},{"location":"community/making-a-pull-request/","title":"Pull Requests","text":"<p>You can contribute by making a pull request that will be reviewed by maintainers and integrated into the main repository when the changes made are approved. You can contribute bug fixes, documentation changes, or new functionalities.</p> <p>Considering a pull request</p> <p>Before deciding to spend effort on making changes and creating a pull request, please discuss what you intend to do. If you are responding to what you think might be a bug, please issue a bug report first. If you intend to work on documentation, create a documentation issue. If you want to work on a new feature, please create a change request.</p> <p>Keep in mind the guidance given and let people advise you. It might be that there are easier solutions to the problem you perceive and want to address. It might be that what you want to achieve can already be done by configuration or [customization].</p>"},{"location":"community/making-a-pull-request/#learning-about-pull-requests","title":"Learning about pull requests","text":"<p>Pull requests are a concept layered on top of Git by services that provide Git hosting. Before you consider making a pull request, you should familiarize yourself with the documentation on GitHub, the service we are using. The following articles are of particular importance:</p> <ol> <li>Forking a repository</li> <li>Creating a pull request from a fork</li> <li>Creating a pull request</li> </ol> <p>Note that they provide tailored documentation for different operating systems and different ways of interacting with GitHub. We do our best in the documentation here to describe the process as it applies but cannot cover all possible combinations of tools and ways of doing things. It is also important that you understand the concept of a pull-request in general before continuing.</p>"},{"location":"community/making-a-pull-request/#pull-request-process","title":"Pull request process","text":"<p>In the following, we describe the general process for making pull requests. The aim here is to provide the 30k ft overview before describing details later on.</p>"},{"location":"community/making-a-pull-request/#preparing-changes-and-draft-pr","title":"Preparing changes and draft PR","text":"<p>The diagram below describes what typically happens to repositories in the process or preparing a pull request. We will be discussing the review-revise process below. It is important that you understand the overall process first before you worry about specific commands. This is why we cover this first before providing instructions below.</p> <pre><code>sequenceDiagram\n  autonumber\n\n  participant upstream\n  participant PR\n  participant fork\n  participant local\n\n  upstream -&gt;&gt; fork: fork on GitHub\n  fork -&gt;&gt; local: clone to local\n  local -&gt;&gt; local: branch\n  loop prepare\n    loop push\n      loop edit\n        local -&gt;&gt; local: commit\n      end\n      local -&gt;&gt; fork: push\n    end\n    upstream -&gt;&gt; fork: merge in any changes\n    fork -&gt;&gt;+ PR: create draft PR\n    PR -&gt;&gt; PR: review your changes\n  end</code></pre> <ol> <li>Fork the Repository: Fork the upstream repository on GitHub to create your own copy.</li> <li>Clone to Local: Clone your fork to your local machine.</li> <li>Create a Branch: Create a topic branch for your changes.</li> <li>Set Up Development Environment: Follow the instructions to set up a development environment.</li> <li>Iterate and Commit: Make incremental changes and commit them with meaningful messages.</li> <li>Push Regularly: Push your commits to your fork regularly.</li> <li>Merge Changes from Upstream: Regularly merge changes from the original upstream repository to avoid conflicts.</li> <li>Create a Draft Pull Request: Once satisfied with your changes, create a draft pull request for early feedback.</li> <li>Review and Revise: Review your work critically, address feedback, and refine your changes.</li> </ol>"},{"location":"community/making-a-pull-request/#finalizing","title":"Finalizing","text":"<p>Once you are happy with your changes, you can move to the next step, finalizing your pull request and asking for a more formal and detailed review. The diagram below shows the process:</p> <pre><code>sequenceDiagram\n  autonumber\n  participant upstream\n  participant PR\n  participant fork\n  participant local\n\n  activate PR\n  PR -&gt;&gt; PR: finalize PR\n  loop review\n    loop discuss\n      PR -&gt;&gt; PR: request review\n      PR -&gt;&gt; PR: discussion\n      local -&gt;&gt; fork: push further changes\n    end\n    PR -&gt;&gt; upstream: merge (and squash)\n    deactivate PR\n    fork -&gt;&gt; fork: delete branch\n    upstream -&gt;&gt; fork: pull\n    local -&gt;&gt; local: delete branch\n    fork -&gt;&gt; local: pull\n  end\n</code></pre> <ol> <li>Finalize PR: Signal that your changes are ready for review.</li> <li>Request Review: Ask the maintainer to review your changes.</li> <li>Discuss and Revise: Engage in discussions, make necessary revisions, and iterate.</li> <li>Merge and Squash: Once approved, the maintainer will merge and possibly squash your commits.</li> <li>Clean Up: Delete the branch used for the PR from both your fork and local clone.</li> </ol>"},{"location":"community/reporting-a-bug/","title":"Bug Reports","text":"<p>If you think you have discovered a bug, you can help us by submitting an issue in our public issue tracker, following this guide.</p>"},{"location":"community/reporting-a-bug/#before-creating-an-issue","title":"Before Creating an Issue","text":"<p>With numerous users, issues are created regularly. The maintainers of this project strive to address bugs promptly. By following this guide, you will know exactly what information we need to help you quickly.</p> <p>Please do the following before creating an issue:</p>"},{"location":"community/reporting-a-bug/#upgrade-to-latest-version","title":"Upgrade to Latest Version","text":"<p>Chances are that the bug you discovered was already fixed in a subsequent version. Before reporting an issue, ensure that you're running the latest version.</p> <p>Bug fixes are not backported</p> <p>Please understand that only bugs that occur in the latest version will be addressed. Also, to reduce duplicate efforts, fixes cannot always be backported to earlier versions.</p>"},{"location":"community/reporting-a-bug/#remove-customizations","title":"Remove Customizations","text":"<p>If you're using customizations like additional configurations, remove them before reporting a bug. We can't offer official support for bugs that might hide in your overrides, so make sure to omit custom settings from your configuration files.</p> <p>Don't be shy to ask on our discussion board for help if you run into problems.</p>"},{"location":"community/reporting-a-bug/#search-for-solutions","title":"Search for Solutions","text":"<p>At this stage, we know that the problem persists in the latest version and is not caused by any of your customizations. However, the problem might result from a small typo or a syntactical error in a configuration file.</p> <p>Before creating a bug report, save time for us and yourself by doing some research:</p> <ol> <li>Search our documentation for relevant sections related to your problem. Ensure everything is configured correctly.</li> <li>[Search our issue tracker] as another user might have already reported the same problem.</li> <li>[Search our discussion board] to see if other users are facing similar issues and find possible solutions.</li> </ol> <p>Keep track of all search terms and relevant links; you'll need them in the bug report.</p> <p>If you still haven't found a solution to your problem, create an issue. It's now likely that you've encountered something new. Read the following section to learn how to create a complete and helpful bug report.</p>"},{"location":"community/reporting-a-bug/#issue-template","title":"Issue Template","text":"<p>We have created a new issue template to make the bug reporting process as simple as possible and more efficient for our community and us. It consists of the following parts:</p> <ul> <li>Title</li> <li>Context optional</li> <li>Bug Description</li> <li>Related Links</li> <li>Reproduction</li> <li>Steps to Reproduce</li> <li>Browser optional</li> <li>Checklist</li> </ul>"},{"location":"community/reporting-a-bug/#title","title":"Title","text":"<p>A good title is short and descriptive. It should be a one-sentence executive summary of the issue, so the impact and severity of the bug can be inferred from the title.</p> Example Clear <code>apply</code> command fails with specific CRD Wordy The <code>apply</code> command fails when used with a certain Custom Resource Definition Unclear Command does not work Useless Help"},{"location":"community/reporting-a-bug/#context","title":"Context optional","text":"<p>Before describing the bug, you can provide additional context to help us understand what you were trying to achieve. Explain the circumstances under which the bug happens, and what you think might be relevant. Don't describe the bug here.</p>"},{"location":"community/reporting-a-bug/#bug-description","title":"Bug Description","text":"<p>Provide a clear, focused, specific, and concise summary of the bug you encountered. Explain why you think this is a bug that should be reported, and not to one of its dependencies. Follow these principles:</p> <ul> <li>Explain the what, not the how \u2013 don't explain how to reproduce the bug here, we're getting there. Focus on articulating the problem and its impact.</li> <li>Keep it short and concise \u2013 if the bug can be precisely explained in one or two sentences, perfect. Don't inflate it.</li> <li>One bug at a time \u2013 if you encounter several unrelated bugs, create separate issues for them.</li> </ul>"},{"location":"community/reporting-a-bug/#related-links","title":"Related Links","text":"<p>Share links to relevant sections of our documentation and any related issues or discussions. This helps us improve our documentation and understand the problem better.</p>"},{"location":"community/reporting-a-bug/#reproduction","title":"Reproduction","text":"<p>A minimal reproduction is essential for a well-written bug report, as it allows us to recreate the conditions necessary to inspect the bug. Follow the guide to create a reproduction:</p> <p>[ Create reproduction][Create reproduction]{ .md-button .md-button--primary }</p> <p>After creating the reproduction, you should have a <code>.zip</code> file, ideally not larger than 1 MB. Drag and drop the <code>.zip</code> file into the issue field, which will automatically upload it to GitHub.</p> <p>Don't share links to repositories</p> <p>While linking to a repository is a common practice, we currently don't support this. The reproduction, created using the built-in info plugin, contains all necessary environment information.</p>"},{"location":"community/reporting-a-bug/#steps-to-reproduce","title":"Steps to Reproduce","text":"<p>List specific steps to follow when running your reproduction to observe the bug. Keep the steps concise and ensure nothing is left out. Use simple language and focus on continuity.</p>"},{"location":"community/reporting-a-bug/#browser","title":"Browser optional","text":"<p>If the bug only occurs in specific browsers, let us know which ones are affected. This field is optional, as it is only relevant for bugs that do not involve a crash when previewing or building your site.</p> <p>Incognito Mode</p> <p>Verify that the bug is not caused by a browser extension by switching to incognito mode. If the bug disappears, it is likely caused by an extension.</p>"},{"location":"community/reporting-a-bug/#checklist","title":"Checklist","text":"<p>Before submitting, ensure you have:</p> <ul> <li>Followed this guide thoroughly</li> <li>Provided all necessary information</li> <li>Created a minimal reproduction</li> </ul> <p>Thanks for following the guide and creating a high-quality bug report. We will take it from here.</p>"},{"location":"community/reporting-a-docs-issue/","title":"Documentation Issues","text":"<p>The documentation includes extensive information on features, configurations, customizations, and more. If you have found an inconsistency or see room for improvement, please follow this guide to submit an issue on our issue tracker.</p>"},{"location":"community/reporting-a-docs-issue/#issue-template","title":"Issue Template","text":"<p>Reporting a documentation issue is usually less involved than reporting a bug, as we don't need a [reproduction]. Please thoroughly read this guide before creating a new documentation issue, and provide the following information as part of the issue:</p> <ul> <li>Title</li> <li>Description</li> <li>Related Links</li> <li>Proposed Change optional</li> <li>Checklist</li> </ul>"},{"location":"community/reporting-a-docs-issue/#title","title":"Title","text":"<p>A good title should be a short, one-sentence description of the issue, containing all relevant information and keywords to simplify the search in our issue tracker.</p> Example Clear Clarify resource templating setup Unclear Missing information in the docs Useless Help"},{"location":"community/reporting-a-docs-issue/#description","title":"Description","text":"<p>Provide a clear and concise summary of the inconsistency or issue you encountered in the documentation or the documentation section that needs improvement. Explain why you think the documentation should be adjusted and describe the severity of the issue:</p> <ul> <li>Keep it short and concise \u2013 if the inconsistency or issue can be precisely explained in one or two sentences, perfect. Maintainers and future users will be grateful for having to read less.</li> <li>One issue at a time \u2013 if you encounter several unrelated inconsistencies, please create separate issues for them.</li> </ul> <p>Why we need this: describing the problem clearly and concisely is a prerequisite for improving our documentation \u2013 we need to understand what's wrong so we can fix it.</p>"},{"location":"community/reporting-a-docs-issue/#related-links","title":"Related Links","text":"<p>After you describe the documentation section that needs to be adjusted, share the link to this specific documentation section and other possibly related sections. Use anchor links (permanent links) where possible, as it simplifies discovery.</p> <p>Why we need this: providing the links to the documentation helps us understand which sections of our documentation need to be adjusted, extended, or overhauled.</p>"},{"location":"community/reporting-a-docs-issue/#proposed-change","title":"Proposed Change optional","text":"<p>Now that you have provided us with the description and links to the documentation sections, you can help us, maintainers, and the community by proposing an improvement. You can sketch out rough ideas or write a concrete proposal. This field is optional but very helpful.</p> <p>Why we need this: an improvement proposal can be beneficial for other users who encounter the same issue, as they offer solutions before we maintainers can update the documentation.</p>"},{"location":"community/reporting-a-docs-issue/#checklist","title":"Checklist","text":"<p>Thanks for following the guide and providing valuable feedback for our documentation \u2013 you are almost done. The checklist ensures that you have read this guide and have worked to your best knowledge to provide us with every piece of information we need to improve it.</p> <p>We'll take it from here.</p>"},{"location":"community/requesting-a-change/","title":"Change Requests","text":"<p>We value every idea or contribution from our community. Please follow this guide before submitting your change request in our public issue tracker. This helps us better understand the proposed change and how it will benefit our community.</p>"},{"location":"community/requesting-a-change/#before-creating-an-issue","title":"Before Creating an Issue","text":"<p>Before you invest time in submitting a change request, answer these questions to determine if your idea is a good fit and matches the project's philosophy and tone.</p>"},{"location":"community/requesting-a-change/#its-not-a-bug-its-a-feature","title":"It's Not a Bug, It's a Feature","text":"<p>Change requests suggest minor adjustments, new features, or influence the project's direction. They are not intended for reporting bugs. Refer to our bug reporting guide for that.</p>"},{"location":"community/requesting-a-change/#look-for-sources-of-inspiration","title":"Look for Sources of Inspiration","text":"<p>If your idea is implemented in another tool or framework, collect information on its implementation. This helps us evaluate its fit more quickly.</p>"},{"location":"community/requesting-a-change/#connect-with-our-community","title":"Connect with Our Community","text":"<p>Our discussion board is the best place to connect with our community. Seeking input from other users helps implement features that benefit a larger number of users.</p> <p> Start a discussion</p>"},{"location":"community/requesting-a-change/#issue-template","title":"Issue Template","text":"<p>After doing the preliminary work, create a change request. Follow these steps:</p> <ul> <li>Title</li> <li>Context optional</li> <li>Description</li> <li>Related Links</li> <li>Use Cases</li> <li>Visuals optional</li> <li>Checklist</li> </ul>"},{"location":"community/requesting-a-change/#title","title":"Title","text":"<p>A good title is short and descriptive, summarizing the idea so the potential impact and benefit can be inferred.</p> Example Clear Support for resource templating Wordy Add support for templating resources for easier testing Unclear Improve templating Useless Help"},{"location":"community/requesting-a-change/#context","title":"Context optional","text":"<p>Provide additional context to help us understand what you are trying to achieve. Explain the circumstances and relevant settings without describing the change request itself.</p>"},{"location":"community/requesting-a-change/#description","title":"Description","text":"<p>Provide a detailed and clear description of your idea. Explain why your idea is relevant and should be implemented here, not in one of its dependencies.</p> <ul> <li>Explain the what, not the why \u2013 focus on describing the change request precisely.</li> <li>Keep it short and concise \u2013 be brief and to the point.</li> <li>One idea at a time \u2013 if you have multiple ideas, open separate change requests for each.</li> </ul>"},{"location":"community/requesting-a-change/#related-links","title":"Related Links","text":"<p>Provide any relevant links to issues, discussions, or documentation sections related to your change request. This helps us gain additional context.</p>"},{"location":"community/requesting-a-change/#use-cases","title":"Use Cases","text":"<p>Explain how your change request would work from an author's and user's perspective. What is the expected impact, and why does it benefit other users? Would it potentially break existing functionality?</p>"},{"location":"community/requesting-a-change/#visuals","title":"Visuals optional","text":"<p>If you have any visuals, such as sketches, screenshots, mockups, or external assets, present them in this section. If you have seen this change used in other tools, showcase and describe its implementation.</p>"},{"location":"community/requesting-a-change/#checklist","title":"Checklist","text":"<p>Thanks for following the guide and creating a high-quality change request. The checklist ensures that you have read this guide and provided all necessary information for us to review your idea.</p> <p>We'll take it from here.</p>"},{"location":"community/requesting-a-change/#rejected-requests","title":"Rejected Requests","text":"<p>Your change request got rejected? We're sorry for that. We understand it can be frustrating, but we always need to consider the needs of our entire community. If you're unsure why your change request was rejected, please ask for clarification.</p> <p>We consider the following principles when evaluating change requests:</p> <ul> <li> Alignment with the project's vision and tone</li> <li> Compatibility with existing features and plugins</li> <li> Compatibility with all screen sizes and browsers</li> <li> Effort of implementation and maintenance</li> <li> Usefulness to the majority of users</li> <li> Simplicity and ease of use</li> <li> Accessibility</li> </ul> <p>If your idea was rejected, you can always implement it via [customization]. If you're unsure how or want to know if someone has already done it, get in touch with our community on the discussion board.</p>"},{"location":"install/certificates/","title":"Certificates management","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a valid certificate to let the api server call into it.</p> <p>At deployment time you can either provide your own certificate or use cert-manager to create one for the Kyverno Authz Server.</p>"},{"location":"install/certificates/#bring-your-own","title":"Bring your own","text":"<p>If you want to bring your own certificate, you can set <code>certificates.static</code> values when installing the helm chart.</p> <pre><code># create certificate\nopenssl req -new -x509  \\\n  -subj \"/CN=kyverno-authz-server-validation-authorizationpolicy.kyverno.svc\" \\\n  -addext \"subjectAltName = DNS:kyverno-authz-server-validation-authorizationpolicy.kyverno.svc\" \\\n  -nodes -newkey rsa:4096 -keyout tls.key -out tls.crt\n\n# install chart with static certificate\nhelm install kyverno-authz-server \\\n  --namespace kyverno --create-namespace \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server \\\n  --set-file certificates.static.crt=tls.crt \\\n  --set-file certificates.static.key=tls.key\n</code></pre>"},{"location":"install/certificates/#use-cert-manager","title":"Use cert-manager","text":"<p>If you don't want to manage the certificate yourself you can rely on cert-manager to create the certificate for you and inject it in the webhook configuration.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --values - &lt;&lt;EOF\ncrds:\n  enabled: true\nEOF\n\n# create a certificate issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n\n# install chart with managed certificate\nhelm upgrade --install kyverno-authz-server \\\n  --namespace kyverno --create-namespace \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server \\\n  --values - &lt;&lt;EOF\ncertificates:\n  certManager:\n    issuerRef:\n      group: cert-manager.io\n      kind: ClusterIssuer\n      name: selfsigned-issuer\nEOF\n</code></pre>"},{"location":"install/crds/","title":"CRDs","text":"<p>The Kyverno Authz Server leverages the Kyverno <code>ValidatingPolicy</code> generic CRD.</p> <p>This resource definition is not specific to the Kyverno Authz Server and must be installed separately.</p>"},{"location":"install/crds/#install-kyverno-validatingpolicy-crd","title":"Install Kyverno ValidatingPolicy CRD","text":"<p>Before deploying the Kyverno Authz Server, make sure the Kyverno ValidatingPolicy CRD is installed.</p> <pre><code>kubectl apply \\\n  -f https://raw.githubusercontent.com/kyverno/kyverno/refs/heads/main/config/crds/policies.kyverno.io/policies.kyverno.io_validatingpolicies.yaml\n</code></pre>"},{"location":"install/external-policy-source/","title":"External policy sources","text":"<p>The authz server can load policies from external sources via the <code>--external-policy-source</code> flag. You can pass this flag multiple times to combine several sources. These external sources are used in addition to, or instead of, the in-cluster source controlled by <code>--kube-policy-source</code>.</p> <ul> <li>Flag: <code>--external-policy-source=&lt;url&gt;</code> (repeatable)</li> <li>Default: none</li> <li>Kubernetes source: enabled by default. Disable it with <code>--kube-policy-source=false</code> if you only want external sources.</li> </ul>"},{"location":"install/external-policy-source/#supported-sources","title":"Supported sources","text":"<p>External sources are backed by virtual filesystems. The following schemes are supported:</p> <ul> <li>file: Local or mounted filesystem directory containing policy YAML files.</li> <li> <p>Example (sidecar's default): <code>--external-policy-source=file:///data/kyverno-authz-server</code></p> </li> <li> <p>git: Git repositories via <code>gitfs</code> (go-fsimpl). Useful to load policies from a repo.</p> </li> <li>Typical form: <code>--external-policy-source=git+https://&lt;host&gt;/&lt;org&gt;/&lt;repo&gt;.git</code></li> <li>You can point to a subdirectory or ref depending on your git URL; consult the <code>gitfs</code> docs for exact URL options (branch/tag/commit and subpaths).</li> <li> <p>Example: <code>--external-policy-source=git+https://github.com/acme/policies.git</code></p> </li> <li> <p>oci: OCI container image as a policy source. The server can pull policies from an OCI image registry and mount its contents as a read-only filesystem.</p> </li> <li>Example: <code>--external-policy-source=oci://ghcr.io/org/policies:tag</code></li> </ul> <p>Notes: - Each source is mounted read-only and scanned at startup; updates require restarting the server. </p>"},{"location":"install/external-policy-source/#what-files-are-expected","title":"What files are expected","text":"<p>From each source directory, the server loads non-recursively all YAML files and parses embedded documents: - <code>policies.kyverno.io/v1alpha1</code> <code>ValidatingPolicy</code></p> <p>Invalid or non-policy documents are skipped. Compilation errors will make startup fail.</p>"},{"location":"install/external-policy-source/#usage-examples","title":"Usage examples","text":"<ul> <li> <p>Run the authz server with a local directory and without in-cluster policies: <pre><code>kyverno-envoy-plugin serve authz-server \\\n  --kube-policy-source=false \\\n  --external-policy-source=file:///policies\n</code></pre></p> </li> <li> <p>Run with multiple sources (a local mount and a git repo): <pre><code>kyverno-envoy-plugin serve authz-server \\\n  --external-policy-source=file:///policies/team-a \\\n  --external-policy-source=git+https://github.com/acme/policies.git\n</code></pre></p> </li> <li> <p>Sidecar container (what the injector adds by default): <pre><code>--kube-policy-source=false\n--external-policy-source=file:///data/kyverno-authz-server\n</code></pre></p> </li> </ul>"},{"location":"install/external-policy-source/#adding-external-sources-with-helm","title":"Adding external sources with Helm","text":"<p>When using the helm chart, you can configure additional sources to inject into sidecars:</p> <p>Values example: <pre><code>externalPolicySources:\n  - file:///data/kyverno-authz-server\n  - git+https://github.com/acme/policies.git\n</code></pre></p> <p>These become repeated <code>--external-policy-source=...</code> arguments on the container.</p>"},{"location":"install/external-policy-source/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Ensure the path or repo is reachable from the pod. For local sources, mount the directory into the sidecar at the correct path.</li> <li>Make sure the directory contains YAML files at its root (no recursive loading).</li> <li>Check logs for compilation errors if startup fails.</li> </ul>"},{"location":"install/external-policy-source/#see-also","title":"See also","text":"<ul> <li><code>--kube-policy-source</code> to enable/disable in-cluster policy source (defaults to true)</li> <li>Git URL options and examples are provided by the upstream <code>gitfs</code> implementation (go-fsimpl).</li> </ul>"},{"location":"performance/","title":"Performance","text":"<p>This page offers guidance and best practices for benchmarking the performance of the Kyverno Authz Server, helping users understand the associated overhead. It outlines an example setup for conducting benchmarks, various benchmarking scenarios, and key metrics to capture for assessing the impact of the Kyverno Authz Server.</p>"},{"location":"performance/#benchmark-setup","title":"Benchmark Setup","text":"<p>The benchmark setup consists of the following components:</p>"},{"location":"performance/#sample-application","title":"Sample Application","text":"<p>The first component is a simple Go application that provides information of books in the library books collection and exposes APIs to <code>get</code>, <code>create</code> and <code>delete</code> books collection. Check this out for more information about the Go test application . </p>"},{"location":"performance/#envoy","title":"Envoy","text":"<p>The second component is the Envoy proxy, which runs alongside the example application. The Envoy configuration defines an external authorization filter <code>envoy.ext_authz</code> for a gRPC authorization server.</p> <p>The config uses Envoy's in-built gRPC client to make external gRPC calls.</p> <pre><code>static_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          codec_type: auto\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: backend\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: service\n          http_filters:\n          - name: envoy.ext_authz\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\n              transport_api_version: V3\n              with_request_body:\n                max_request_bytes: 8192\n                allow_partial_message: true\n              failure_mode_allow: false\n              grpc_service:\n                google_grpc:\n                  target_uri: 127.0.0.1:9191\n                  stat_prefix: ext_authz\n                timeout: 0.5s\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: service\n    connect_timeout: 0.25s\n    type: strict_dns\n    lb_policy: round_robin\n    load_assignment:\n      cluster_name: service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 8080\nadmin:\n  access_log_path: \"/dev/null\"\n  address:\n    socket_address:\n      address: 0.0.0.0\n      port_value: 8001\nlayered_runtime:\n  layers:\n    - name: static_layer_0\n      static_layer:\n        envoy:\n          resource_limits:\n            listener:\n              example_listener_name:\n                connection_limit: 10000\n        overload:\n          global_downstream_max_connections: 50000\n</code></pre>"},{"location":"performance/#kyverno-authz-server","title":"Kyverno Authz Server","text":"<p>The third component is the Kyverno Authz Server itself, which is configured to load and enforce Kyverno policies on incoming requests. </p>"},{"location":"performance/#benchmark-scenarios","title":"Benchmark Scenarios","text":"<p>The following scenarios should be tested to compare the performance of the Kyverno Authz Server under different conditions:</p> <ol> <li>App Only: Requests are sent directly to the application, without Envoy or the Kyverno Authz Server.</li> <li>App and Envoy: Envoy is included in the request path, but the Kyverno Authz Server is not (i.e., Envoy External Authorization API is disabled).</li> <li>App, Envoy, and Kyverno: Envoy External Authorization API is enabled, and a sample real-world policy is loaded into the Kyverno Authz Server.</li> </ol>"},{"location":"performance/#load-testing-with-k6","title":"Load Testing with k6","text":"<p>To perform load testing, we'll use the k6 tool. Follow these steps:</p> <ol> <li> <p>Install k6: Install k6 on your machine by following the instructions on the official website.</p> </li> <li> <p>Write the k6 script:  Below is the example k6 script. </p> </li> </ol> <pre><code>import http from 'k6/http';\nimport { check, group, sleep } from 'k6';\n\nexport const options = {\n  stages: [\n    { duration: '30s', target: 100 }, // Ramp-up to 100 virtual users over 30 seconds\n    { duration: '1m', target: 100 }, // Stay at 100 virtual users for 1 minute\n    { duration: '30s', target: 0 }, // Ramp-down to 0 virtual users over 30 seconds\n  ],\n};\n\n/*\nReplace ip for every scenerio\nexport SERVICE_PORT=$(kubectl -n demo get service testapp -o jsonpath='{.spec.ports[?(@.port==8080)].nodePort}')\nexport SERVICE_HOST=$(minikube ip)\nexport SERVICE_URL=$SERVICE_HOST:$SERVICE_PORT\necho $SERVICE_URL\n\nhttp://192.168.49.2:31541\n\n*/\nconst BASE_URL = 'http://192.168.49.2:31541'; \n\nexport default function () {\n  group('GET /book with guest token', () =&gt; {\n    const res = http.get(`${BASE_URL}/book`, {\n      headers: { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk' },\n    });\n    check(res, {\n      'is status 200': (r) =&gt; r.status === 200,\n    });\n  });\n\n  sleep(1); // Sleep for 1 second between iterations\n}\n</code></pre> <ol> <li>Run the k6 test: Run the load test with the following command:</li> </ol> <pre><code>$ k6 run -f - &lt;&lt;EOF\nimport http from 'k6/http';\nimport { check, group, sleep } from 'k6';\n\nexport const options = {\n  stages: [\n    { duration: '30s', target: 100 }, // Ramp-up to 100 virtual users over 30 seconds\n    { duration: '1m', target: 100 }, // Stay at 100 virtual users for 1 minute\n    { duration: '30s', target: 0 }, // Ramp-down to 0 virtual users over 30 seconds\n  ],\n};\n\n\nconst BASE_URL = 'http://192.168.49.2:31700'; // Replace with your application URL \n\nexport default function () {\n  group('GET /book with guest token', () =&gt; {\n    const res = http.get(`${BASE_URL}/book`, {\n      headers: { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk' },\n    });\n    check(res, {\n      'is status 200': (r) =&gt; r.status === 200,\n    });\n  });\n\n  sleep(1); // Sleep for 1 second between iterations\n}\nEOF\n</code></pre> <ol> <li>Analyze the results: Generate an json report with detailed insight by running:</li> </ol> <p><pre><code>k6 run --out json=report.json k6-script.js\n</code></pre> 5. Repeat for different scenarios:</p> <ul> <li> <p>App only</p> <p>In this case , request are sent directly to the sample application ie no Envoy and Kyverno-plugin in the request path . For this run this command to apply the sample applicaition and then test with k6</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-envoy-plugin/main/tests/performance-test/manifest/app.yaml\n</code></pre> <p>Results of the k6 when only application is applied</p> <pre><code>        /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n   /\\  /  \\     |  |/  /   /  /    \n  /  \\/    \\    |     (   /   \u203e\u203e\\  \n /          \\   |  |\\  \\ |  (\u203e)  | \n/ __________ \\  |__| \\__\\ \\_____/ .io\n\n execution: local\n    script: k6-script.js\n    output: -\n\n scenarios: (100.00%) 1 scenario, 100 max VUs, 2m30s max duration (incl. graceful stop):\n          * default: Up to 100 looping VUs for 2m0s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n \u2588 GET /book with guest token\n\n   \u2713 is status 200\n\n checks.........................: 100.00% \u2713 9048      \u2717 0    \n data_received..................: 2.1 MB  18 kB/s\n data_sent......................: 2.6 MB  21 kB/s\n group_duration.................: avg=1.01ms   min=166.46\u00b5s med=775.01\u00b5s max=36ms    p(90)=1.72ms   p(95)=2.31ms  \n http_req_blocked...............: avg=15.08\u00b5s  min=1.55\u00b5s   med=6.54\u00b5s   max=4.09ms  p(90)=12.07\u00b5s  p(95)=15.25\u00b5s \n http_req_connecting............: avg=4.58\u00b5s   min=0s       med=0s       max=1.57ms  p(90)=0s       p(95)=0s      \n http_req_duration..............: avg=745.73\u00b5s min=103.06\u00b5s med=549.17\u00b5s max=35.88ms p(90)=1.26ms   p(95)=1.75ms  \n   { expected_response:true }...: avg=745.73\u00b5s min=103.06\u00b5s med=549.17\u00b5s max=35.88ms p(90)=1.26ms   p(95)=1.75ms  \n http_req_failed................: 0.00%   \u2713 0         \u2717 9048 \n http_req_receiving.............: avg=119.69\u00b5s min=11.33\u00b5s  med=77.78\u00b5s  max=10.97ms p(90)=193.73\u00b5s p(95)=285.58\u00b5s\n http_req_sending...............: avg=41\u00b5s     min=6.96\u00b5s   med=31.12\u00b5s  max=2.39ms  p(90)=61.88\u00b5s  p(95)=78.15\u00b5s \n http_req_tls_handshaking.......: avg=0s       min=0s       med=0s       max=0s      p(90)=0s       p(95)=0s      \n http_req_waiting...............: avg=585.04\u00b5s min=75.52\u00b5s  med=407.87\u00b5s max=35.84ms p(90)=965.49\u00b5s p(95)=1.33ms  \n http_reqs......................: 9048    75.050438/s\n iteration_duration.............: avg=1s       min=1s       med=1s       max=1.06s   p(90)=1s       p(95)=1s      \n iterations.....................: 9048    75.050438/s\n vus............................: 2       min=2       max=100\n vus_max........................: 100     min=100     max=100\n\n\nrunning (2m00.6s), 000/100 VUs, 9048 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 000/100 VUs  2m0s\n</code></pre> </li> <li> <p>App and Envoy</p> <p>In this case, the Kyverno Authz Server is not included in the path but Envoy is but Envoy External Authorization API disabled  For this run this command to apply the sample application with envoy.</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-envoy-plugin/main/tests/performance-test/manifest/app-envoy.yaml\n</code></pre> <p>Results of k6 after applying sample-application with envoy.</p> <pre><code>        /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n   /\\  /  \\     |  |/  /   /  /    \n  /  \\/    \\    |     (   /   \u203e\u203e\\  \n /          \\   |  |\\  \\ |  (\u203e)  | \n/ __________ \\  |__| \\__\\ \\_____/ .io\n\n execution: local\n    script: k6-script.js\n    output: -\n\n scenarios: (100.00%) 1 scenario, 100 max VUs, 2m30s max duration (incl. graceful stop):\n          * default: Up to 100 looping VUs for 2m0s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n \u2588 GET /book with guest token\n\n   \u2713 is status 200\n\n checks.........................: 100.00% \u2713 9031      \u2717 0    \n data_received..................: 2.5 MB  21 kB/s\n data_sent......................: 2.6 MB  21 kB/s\n group_duration.................: avg=2.66ms  min=457.22\u00b5s med=1.8ms   max=65.53ms p(90)=4.85ms   p(95)=6.58ms  \n http_req_blocked...............: avg=12.81\u00b5s min=1.52\u00b5s   med=5.98\u00b5s  max=2.41ms  p(90)=11.84\u00b5s  p(95)=13.9\u00b5s  \n http_req_connecting............: avg=3.82\u00b5s  min=0s       med=0s      max=2.34ms  p(90)=0s       p(95)=0s      \n http_req_duration..............: avg=2.38ms  min=383.7\u00b5s  med=1.58ms  max=65.22ms p(90)=4.36ms   p(95)=5.92ms  \n   { expected_response:true }...: avg=2.38ms  min=383.7\u00b5s  med=1.58ms  max=65.22ms p(90)=4.36ms   p(95)=5.92ms  \n http_req_failed................: 0.00%   \u2713 0         \u2717 9031 \n http_req_receiving.............: avg=136.3\u00b5s min=12.53\u00b5s  med=76.74\u00b5s max=12.75ms p(90)=183.23\u00b5s p(95)=272.91\u00b5s\n http_req_sending...............: avg=41.54\u00b5s min=6.58\u00b5s   med=28.1\u00b5s  max=4.15ms  p(90)=59.62\u00b5s  p(95)=74.85\u00b5s \n http_req_tls_handshaking.......: avg=0s      min=0s       med=0s      max=0s      p(90)=0s       p(95)=0s      \n http_req_waiting...............: avg=2.2ms   min=349.23\u00b5s med=1.43ms  max=65.08ms p(90)=4.05ms   p(95)=5.52ms  \n http_reqs......................: 9031    74.825497/s\n iteration_duration.............: avg=1s      min=1s       med=1s      max=1.06s   p(90)=1s       p(95)=1s      \n iterations.....................: 9031    74.825497/s\n vus............................: 3       min=3       max=100\n vus_max........................: 100     min=100     max=100\n\n\nrunning (2m00.7s), 000/100 VUs, 9031 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 000/100 VUs  2m0s\n</code></pre> </li> <li> <p>App, Envoy and Kyverno Authz Server</p> <p>In this case, performance measurements are observed with Envoy External Authorization API enabled and a sample real-world policy loaded into the Kyverno Authz Server.</p> <p>For this apply this command to apply sample-application, envoy and Kyverno Authz Server:</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-envoy-plugin/main/tests/performance-test/manifest/app-envoy-plugin.yaml\n</code></pre> <p>Results of k6 after applying sample-application, Envoy and the Kyverno Authz Server.</p> <pre><code>        /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n   /\\  /  \\     |  |/  /   /  /    \n  /  \\/    \\    |     (   /   \u203e\u203e\\  \n /          \\   |  |\\  \\ |  (\u203e)  | \n/ __________ \\  |__| \\__\\ \\_____/ .io\n\n execution: local\n    script: k6-script.js\n    output: -\n\n scenarios: (100.00%) 1 scenario, 100 max VUs, 2m30s max duration (incl. graceful stop):\n          * default: Up to 100 looping VUs for 2m0s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n \u2588 GET /book with guest token\n\n   \u2713 is status 200\n\n checks.........................: 100.00% \u2713 8655      \u2717 0    \n data_received..................: 2.4 MB  20 kB/s\n data_sent......................: 2.4 MB  20 kB/s\n group_duration.................: avg=46.54ms min=4.59ms  med=29.69ms max=337.79ms p(90)=109.35ms p(95)=140.51ms\n http_req_blocked...............: avg=11.88\u00b5s min=1.21\u00b5s  med=4.15\u00b5s  max=2.83ms   p(90)=9.87\u00b5s   p(95)=11.4\u00b5s  \n http_req_connecting............: avg=4.98\u00b5s  min=0s      med=0s      max=2.18ms   p(90)=0s       p(95)=0s      \n http_req_duration..............: avg=46.37ms min=4.49ms  med=29.49ms max=337.69ms p(90)=109.26ms p(95)=140.28ms\n   { expected_response:true }...: avg=46.37ms min=4.49ms  med=29.49ms max=337.69ms p(90)=109.26ms p(95)=140.28ms\n http_req_failed................: 0.00%   \u2713 0         \u2717 8655 \n http_req_receiving.............: avg=65.19\u00b5s min=11.14\u00b5s med=56.47\u00b5s max=5.58ms   p(90)=102.86\u00b5s p(95)=145.19\u00b5s\n http_req_sending...............: avg=30.35\u00b5s min=5.43\u00b5s  med=18.48\u00b5s max=5.29ms   p(90)=46.63\u00b5s  p(95)=58\u00b5s    \n http_req_tls_handshaking.......: avg=0s      min=0s      med=0s      max=0s       p(90)=0s       p(95)=0s      \n http_req_waiting...............: avg=46.27ms min=4.43ms  med=29.42ms max=337.65ms p(90)=109.22ms p(95)=140.24ms\n http_reqs......................: 8655    71.999297/s\n iteration_duration.............: avg=1.04s   min=1s      med=1.03s   max=1.33s    p(90)=1.11s    p(95)=1.14s   \n iterations.....................: 8655    71.999297/s\n vus............................: 2       min=2       max=100\n vus_max........................: 100     min=100     max=100\n\n\nrunning (2m00.2s), 000/100 VUs, 8655 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 000/100 VUs  2m0s\n</code></pre> </li> </ul>"},{"location":"performance/#measuring-performance","title":"Measuring Performance","text":"<p>The following metrics should be measured to evaluate the performance impact of the Kyverno Authz Server:</p> <ul> <li> <p>End-to-end latency</p> <p>The end-to-end latency represents the time taken for a request to complete, from the client sending the request to receiving the response. Based on the k6 results, the average end-to-end latency for the different scenarios is as follows:</p> <ul> <li>App Only: <code>avg=1.01ms</code> (from <code>group_duration</code> or <code>http_req_duration</code>)</li> <li>App and Envoy: <code>avg=2.38ms</code> (from <code>http_req_duration</code>)</li> <li>App, Envoy, and Kyverno Authz Server: <code>avg=46.37ms</code> (from <code>http_req_duration</code>)</li> </ul> </li> <li> <p>Kyverno evaluation latency</p> <p>The Kyverno evaluation latency represents the time taken by the Kyverno Authz Server to evaluate the request against the configured policies. While the k6 results do not directly provide this metric, an estimate can be inferred by analyzing the differences in latency between the \"App and Envoy\" scenario and the \"App, Envoy, and Kyverno Authz Server\" scenario.</p> <p>The difference in average latency between these two scenarios is: <code>46.37ms</code> - <code>2.38ms</code> = <code>43.99ms</code></p> <p>This difference can be attributed to the Kyverno evaluation latency and the gRPC server handler latency combined. Assuming the gRPC server handler latency is relatively small compared to the Kyverno evaluation latency, the estimated range for the Kyverno evaluation latency is around 40ms to 45ms.</p> </li> <li> <p>Resource utilization</p> <p>Refers to CPU and memory usage of the Kyverno Authz Server container , <code>kubectl top</code> utility can be laveraged to measure the resource utilization.</p> <p>Get the resource utilization of the Kyverno Authz Server container using the following command:</p> <pre><code>$ kubectl top pod -n demo --containers\n</code></pre> <p>To monitor resource utilization overtime use the following command:</p> <pre><code>$ watch -n 1 \"kubectl top pod -n demo --containers\"\n</code></pre> <p>Now run the k6 script in different terminal window and observe the resource utilization of the Kyverno Authz Server container.</p> <p>Initial resource utilization of the Kyverno Authz Server container:</p> <pre><code>POD                        NAME                   CPU(cores)   MEMORY(bytes)\ntestapp-5955cd6f8b-dbvgd   envoy                  4m           70Mi\ntestapp-5955cd6f8b-dbvgd   server                 1m           51Mi\ntestapp-5955cd6f8b-dbvgd   test-application       1m           11Mi\n</code></pre> <p>Resource utilization of the Kyverno Authz Server container after 100 requests:</p> <pre><code>POD                        NAME                   CPU(cores)   MEMORY(bytes)\ntestapp-5955cd6f8b-dbvgd   envoy                  110m         70Mi\ntestapp-5955cd6f8b-dbvgd   server                 895m         60Mi\ntestapp-5955cd6f8b-dbvgd   test-application       17m          15Mi\n</code></pre> <p>Observations:</p> <ul> <li>The CPU utilization of the Kyverno Authz Server container increased significantly from 1m to 895m after receiving 100 requests during the load test.</li> <li>The memory utilization also increased, but to a lesser extent, from 51Mi to 60Mi.</li> </ul> <p>Resource utilization of the Kyverno Authz Server container after load completion:</p> <pre><code>POD                        NAME                   CPU(cores)   MEMORY(bytes)\ntestapp-5955cd6f8b-dbvgd   envoy                  4m           70Mi\ntestapp-5955cd6f8b-dbvgd   server                 1m           51Mi\ntestapp-5955cd6f8b-dbvgd   test-application       1m           11Mi\n</code></pre> </li> </ul> <p>Observations:</p> <ul> <li>After the load test completed and the request volume returned to normal levels, the CPU and memory utilization of the Kyverno Authz Server container returned to their initial values. This indicates that the Kyverno Authz Server can efficiently handle the increased load during the test and release the additional resources when the load subsides.</li> </ul> <p>Correlation with k6 results:</p> <ul> <li>The k6 script simulated a load test scenario with 100 virtual users, ramping up over 30 seconds, staying at 100 users for 1 minute, and then ramping down over 30 seconds.</li> <li>During the load test, when the request volume was at its peak (100 virtual users), the Kyverno Authz Server container experienced a significant increase in CPU utilization, reaching 895m.</li> <li>This CPU utilization spike aligns with the increased processing demand on the Kyverno Authz Server to evaluate the incoming requests against the configured Kyverno policies.</li> <li>The memory utilization increase during the load test was relatively modest, suggesting that the policy evaluation did not significantly impact the memory requirements of the Kyverno Authz Server.</li> </ul>"},{"location":"policies/","title":"Policies","text":"<p>The Kyverno Authz Server uses <code>ValidatingPolicy</code> resources to define authorization rules. Policies can operate in two modes:</p>"},{"location":"policies/#policy-guides","title":"Policy Guides","text":"<ul> <li>Envoy Policy Breakdown - Complete guide for writing policies that integrate with Envoy proxy</li> <li>HTTP Policy Breakdown - Complete guide for writing policies for plain HTTP authorization</li> </ul>"},{"location":"policies/#overview","title":"Overview","text":"<p>A <code>ValidatingPolicy</code> is a Kubernetes custom resource that uses CEL (Common Expression Language) to evaluate authorization requests. The policy's evaluation mode determines whether it processes Envoy CheckRequests or plain HTTP requests.</p>"},{"location":"policies/#key-concepts","title":"Key Concepts","text":"<ul> <li>Evaluation Mode: Set to <code>Envoy</code> or <code>HTTP</code> to determine the request type</li> <li>Failure Policy: Controls behavior when policy evaluation fails (<code>Fail</code> or <code>Ignore</code>)</li> <li>Match Conditions: Optional CEL expressions for fine-grained request filtering</li> <li>Variables: Reusable named expressions available throughout the policy</li> <li>Validation Rules: CEL expressions that return authorization decisions</li> </ul>"},{"location":"policies/envoy-policy-breakdown/","title":"Envoy Policy Breakdown","text":"<p>This guide provides a comprehensive breakdown of how to write <code>ValidatingPolicy</code> resources for Envoy proxy authorization.</p>"},{"location":"policies/envoy-policy-breakdown/#overview","title":"Overview","text":"<p>When using the Kyverno Authz Server with Envoy, policies analyze Envoy CheckRequest objects and return CheckResponse decisions.</p> <p>The Kyverno Authz Server implements the Envoy External Authorization API.</p>"},{"location":"policies/envoy-policy-breakdown/#policy-structure","title":"Policy Structure","text":"<p>A Kyverno <code>ValidatingPolicy</code> for Envoy consists of:</p> <ol> <li>Evaluation Mode: Must be set to <code>Envoy</code></li> <li>Failure Policy: How to handle policy evaluation failures</li> <li>Match Conditions (optional): Fine-grained request filtering</li> <li>Variables (optional): Reusable expressions</li> <li>Validation Rules: Authorization logic</li> </ol>"},{"location":"policies/envoy-policy-breakdown/#evaluation-mode","title":"Evaluation Mode","text":"<p>For Envoy integration, the evaluation mode must be set to <code>Envoy</code>:</p> <pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: envoy-policy\nspec:\n  evaluation:\n    mode: Envoy  # Required for Envoy integration\n  validations:\n  - expression: ...\n</code></pre>"},{"location":"policies/envoy-policy-breakdown/#failure-policy","title":"Failure Policy","text":"<p>The <code>failurePolicy</code> defines how to handle failures during policy evaluation (parse errors, type check errors, runtime errors).</p> <p>Allowed values: - <code>Fail</code> (default): Deny the request if policy evaluation fails - <code>Ignore</code>: Allow the request if policy evaluation fails</p>"},{"location":"policies/envoy-policy-breakdown/#example-fail-policy","title":"Example: Fail Policy","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail  # Deny on failure\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: &gt;\n      !variables.allowed\n        ? envoy.Denied(403).Response()\n        : null\n</code></pre>"},{"location":"policies/envoy-policy-breakdown/#example-ignore-policy","title":"Example: Ignore Policy","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Ignore  # Allow on failure\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: &gt;\n      !variables.allowed\n        ? envoy.Denied(403).Response()\n        : null\n</code></pre>"},{"location":"policies/envoy-policy-breakdown/#match-conditions","title":"Match Conditions","text":"<p>Match conditions provide fine-grained request filtering using CEL expressions. All match conditions must evaluate to <code>true</code> for the policy to apply.</p> <p>Info</p> <p>Variables are NOT available in match conditions because they are evaluated before the rest of the policy.</p>"},{"location":"policies/envoy-policy-breakdown/#example-header-based-matching","title":"Example: Header-Based Matching","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  matchConditions:\n  - name: has-header\n    expression: object.attributes.request.http.headers[?\"x-force-deny\"].hasValue()\n  validations:\n  - expression: &gt;\n      envoy.Denied(403).Response()\n</code></pre> <p>In this example: - If the request has the <code>x-force-deny</code> header, the policy applies and denies the request - If the request doesn't have the header, the policy is skipped</p>"},{"location":"policies/envoy-policy-breakdown/#error-handling","title":"Error Handling","text":"<p>If a match condition evaluation fails: 1. If any match condition evaluated to <code>false</code>, the policy is skipped 2. Otherwise:    - For <code>failurePolicy: Fail</code>: Reject the request    - For <code>failurePolicy: Ignore</code>: Skip the policy and allow the request</p>"},{"location":"policies/envoy-policy-breakdown/#variables","title":"Variables","text":"<p>Variables are named CEL expressions that can be reused throughout the policy. They are available under the <code>variables</code> identifier.</p> <p>Info</p> <p>The incoming Envoy <code>CheckRequest</code> is available under the <code>object</code> identifier.</p>"},{"location":"policies/envoy-policy-breakdown/#example-using-variables","title":"Example: Using Variables","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n    # Extract header value\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n    # Compute authorization status\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: &gt;\n      !variables.allowed\n        ? envoy.Denied(403).Response()\n        : envoy.Allowed().Response()\n</code></pre> <p>Important: Variables must be sorted by order of first appearance. A variable can reference earlier variables but not later ones.</p>"},{"location":"policies/envoy-policy-breakdown/#validation-rules","title":"Validation Rules","text":"<p>Validation rules contain the authorization logic. Each rule is a CEL expression that returns either a <code>CheckResponse</code> or <code>null</code>.</p>"},{"location":"policies/envoy-policy-breakdown/#evaluation-order","title":"Evaluation Order","text":"<ol> <li>Rules are evaluated sequentially in the order they appear</li> <li>If a rule returns a <code>CheckResponse</code> (non-null), that response is returned immediately</li> <li>If a rule returns <code>null</code>, evaluation continues to the next rule</li> <li>If all rules return <code>null</code>, the request is allowed by default</li> </ol>"},{"location":"policies/envoy-policy-breakdown/#basic-example","title":"Basic Example","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: &gt;\n      !variables.allowed\n        ? envoy.Denied(403).Response()\n        : envoy.Allowed().Response()\n</code></pre>"},{"location":"policies/envoy-policy-breakdown/#advanced-example","title":"Advanced Example","text":"<p>This example demonstrates multiple validation checks with custom headers and metadata:</p> <pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\") in [\"enabled\", \"true\"]\n  - name: force_unauthenticated\n    expression: object.attributes.request.http.headers[?\"x-force-unauthenticated\"].orValue(\"\") in [\"enabled\", \"true\"]\n  - name: metadata\n    expression: '{\"my-new-metadata\": \"my-new-value\"}'\n  validations:\n    # Check 1: Return 401 if unauthenticated\n  - expression: &gt;\n      variables.force_unauthenticated\n        ? envoy\n            .Denied(401)\n            .WithBody(\"Authentication Failed\")\n            .Response()\n        : null\n    # Check 2: Return 403 if not authorized\n  - expression: &gt;\n      !variables.force_authorized\n        ? envoy\n            .Denied(403)\n            .WithBody(\"Unauthorized Request\")\n            .Response()\n        : null\n    # Check 3: Allow with custom headers and metadata\n  - expression: &gt;\n      envoy\n        .Allowed()\n        .WithHeader(\"x-validated-by\", \"my-security-checkpoint\")\n        .WithoutHeader(\"x-force-authorized\")\n        .WithResponseHeader(\"x-add-custom-response-header\", \"added\")\n        .Response()\n        .WithMetadata(variables.metadata)\n</code></pre> <p>This policy demonstrates: - Sequential evaluation: Each validation is checked in order - Conditional responses: Using ternary operators to return responses or null - Request header manipulation: Adding and removing headers - Response headers: Adding headers to the response - Custom body: Setting response body content - Dynamic metadata: Passing data to other Envoy filters</p>"},{"location":"policies/envoy-policy-breakdown/#cel-envoy-extension-library","title":"CEL Envoy Extension Library","text":"<p>The CEL engine includes helper functions for creating Envoy responses:</p>"},{"location":"policies/envoy-policy-breakdown/#key-functions","title":"Key Functions","text":"<ul> <li><code>envoy.Allowed()</code>: Creates an OK response</li> <li><code>envoy.Denied(statusCode)</code>: Creates a denied response with a status code</li> <li><code>.WithHeader(key, value)</code>: Adds a request header</li> <li><code>.WithoutHeader(key)</code>: Removes a request header</li> <li><code>.WithResponseHeader(key, value)</code>: Adds a response header</li> <li><code>.WithBody(content)</code>: Sets the response body</li> <li><code>.Response()</code>: Converts to a CheckResponse</li> <li><code>.WithMetadata(data)</code>: Adds dynamic metadata to the Envoy filter chain</li> </ul>"},{"location":"policies/envoy-policy-breakdown/#manual-response-creation","title":"Manual Response Creation","text":"<p>You can also create responses manually without helper functions:</p> <pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: &gt;\n      !variables.allowed\n        ? envoy.DeniedResponse{\n            status: google.rpc.Status{\n              code: 7\n            },\n            http_response: envoy.service.auth.v3.DeniedHttpResponse{\n              status: envoy.type.v3.HttpStatus{\n                code: 403\n              }\n            }\n          }\n        : envoy.OkResponse{\n            status: google.rpc.Status{\n              code: 0\n            },\n            http_response: envoy.service.auth.v3.OkHttpResponse{}\n          }\n</code></pre>"},{"location":"policies/envoy-policy-breakdown/#dynamic-metadata","title":"Dynamic Metadata","text":"<p>Dynamic metadata can be passed along the Envoy filter chain, useful for: - Passing data to other filters - Including in application logs - Making decisions in downstream filters</p> <p></p> <pre><code>validations:\n- expression: &gt;\n    envoy\n      .Allowed()\n      .Response()\n      .WithMetadata({\"user\": \"john\", \"role\": \"admin\"})\n</code></pre>"},{"location":"policies/envoy-policy-breakdown/#complete-example","title":"Complete Example","text":"<p>Here's a complete policy that combines all concepts:</p> <pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: complete-envoy-policy\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  matchConditions:\n  - name: is-api-path\n    expression: object.attributes.request.http.path.startsWith(\"/api/\")\n  variables:\n  - name: auth_header\n    expression: object.attributes.request.http.headers[?\"authorization\"].orValue(\"\")\n  - name: is_authenticated\n    expression: variables.auth_header.startsWith(\"Bearer \")\n  - name: user_role\n    expression: object.attributes.request.http.headers[?\"x-user-role\"].orValue(\"guest\")\n  - name: is_admin\n    expression: variables.user_role == \"admin\"\n  validations:\n  # Deny if not authenticated\n  - expression: &gt;\n      !variables.is_authenticated\n        ? envoy.Denied(401).WithBody(\"Authentication required\").Response()\n        : null\n  # Deny if not admin\n  - expression: &gt;\n      !variables.is_admin\n        ? envoy.Denied(403).WithBody(\"Admin access required\").Response()\n        : null\n  # Allow with tracking headers\n  - expression: &gt;\n      envoy\n        .Allowed()\n        .WithHeader(\"x-auth-validated\", \"true\")\n        .WithResponseHeader(\"x-policy-applied\", \"complete-envoy-policy\")\n        .Response()\n        .WithMetadata({\"policy\": \"complete-envoy-policy\", \"role\": variables.user_role})\n</code></pre>"},{"location":"policies/envoy-policy-breakdown/#best-practices","title":"Best Practices","text":"<ol> <li>Use specific match conditions to avoid policy conflicts when multiple policies exist</li> <li>Order validations carefully - put most common deny conditions first</li> <li>Use variables to avoid repeating complex expressions</li> <li>Return <code>null</code> from validations that don't make a decision</li> <li>Set appropriate failure policies based on your security requirements</li> <li>Add metadata for observability and debugging</li> <li>Use descriptive policy names for easier troubleshooting</li> </ol>"},{"location":"policies/envoy-policy-breakdown/#additional-resources","title":"Additional Resources","text":"<ul> <li>CEL Envoy Extension Library</li> <li>CEL Language Specification</li> <li>Envoy External Authorization</li> <li>Envoy CheckRequest API</li> </ul>"},{"location":"policies/http-policy-breakdown/","title":"HTTP Policy Breakdown","text":"<p>This guide provides a comprehensive breakdown of how to write <code>ValidatingPolicy</code> resources for plain HTTP authorization.</p>"},{"location":"policies/http-policy-breakdown/#overview","title":"Overview","text":"<p>When using the Kyverno Authz Server as an HTTP authorization service, policies analyze HTTP requests and return HTTP responses with authorization decisions. This mode allows you to protect any HTTP service without requiring Envoy.</p>"},{"location":"policies/http-policy-breakdown/#policy-structure","title":"Policy Structure","text":"<p>A Kyverno <code>ValidatingPolicy</code> for HTTP consists of:</p> <ol> <li>Evaluation Mode: Must be set to <code>HTTP</code></li> <li>Failure Policy: How to handle policy evaluation failures</li> <li>Match Conditions (optional): Fine-grained request filtering</li> <li>Variables (optional): Reusable expressions</li> <li>Validation Rules: Authorization logic</li> </ol>"},{"location":"policies/http-policy-breakdown/#evaluation-mode","title":"Evaluation Mode","text":"<p>For HTTP authorization, the evaluation mode must be set to <code>HTTP</code>:</p> <pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: http-policy\nspec:\n  evaluation:\n    mode: HTTP  # Required for HTTP authorization\n  validations:\n  - expression: ...\n</code></pre>"},{"location":"policies/http-policy-breakdown/#failure-policy","title":"Failure Policy","text":"<p>The <code>failurePolicy</code> defines how to handle failures during policy evaluation (parse errors, type check errors, runtime errors).</p> <p>Allowed values: - <code>Fail</code> (default): Deny the request if policy evaluation fails - <code>Ignore</code>: Allow the request if policy evaluation fails</p>"},{"location":"policies/http-policy-breakdown/#example-fail-policy","title":"Example: Fail Policy","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail  # Deny on failure\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: force_authorized\n    expression: object.headers.get(\"x-force-authorized\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: |\n      !variables.allowed\n        ? http.response().status(403).withBody(\"Forbidden\")\n        : null\n</code></pre>"},{"location":"policies/http-policy-breakdown/#example-ignore-policy","title":"Example: Ignore Policy","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Ignore  # Allow on failure\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: force_authorized\n    expression: object.headers.get(\"x-force-authorized\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: |\n      !variables.allowed\n        ? http.response().status(403).withBody(\"Forbidden\")\n        : null\n</code></pre>"},{"location":"policies/http-policy-breakdown/#match-conditions","title":"Match Conditions","text":"<p>Match conditions provide fine-grained request filtering using CEL expressions. All match conditions must evaluate to <code>true</code> for the policy to apply.</p> <p>Info</p> <p>Variables are NOT available in match conditions because they are evaluated before the rest of the policy.</p>"},{"location":"policies/http-policy-breakdown/#example-path-based-matching","title":"Example: Path-Based Matching","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: api-protection\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: HTTP\n  matchConditions:\n  - name: is-api-path\n    expression: object.path.startsWith(\"/api/\")\n  validations:\n  - expression: |\n      http.response().status(403).withBody(\"API access denied\")\n</code></pre>"},{"location":"policies/http-policy-breakdown/#example-header-based-matching","title":"Example: Header-Based Matching","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: admin-only\nspec:\n  evaluation:\n    mode: HTTP\n  matchConditions:\n  - name: has-admin-header\n    expression: object.headers.get(\"x-user-role\") == \"admin\"\n  validations:\n  - expression: |\n      http.response().status(200).withBody(\"Admin access granted\")\n</code></pre>"},{"location":"policies/http-policy-breakdown/#error-handling","title":"Error Handling","text":"<p>If a match condition evaluation fails: 1. If any match condition evaluated to <code>false</code>, the policy is skipped 2. Otherwise:    - For <code>failurePolicy: Fail</code>: Reject the request    - For <code>failurePolicy: Ignore</code>: Skip the policy and allow the request</p>"},{"location":"policies/http-policy-breakdown/#variables","title":"Variables","text":"<p>Variables are named CEL expressions that can be reused throughout the policy. They are available under the <code>variables</code> identifier.</p> <p>Info</p> <p>The incoming HTTP request is available under the <code>object</code> identifier.</p>"},{"location":"policies/http-policy-breakdown/#example-using-variables","title":"Example: Using Variables","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: HTTP\n  variables:\n    # Extract header value\n  - name: force_authorized\n    expression: object.headers.get(\"x-force-authorized\")\n    # Compute authorization status\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: |\n      !variables.allowed\n        ? http.response().status(403).withBody(\"Forbidden\")\n        : null\n  - expression: |\n      http.response().status(200)\n</code></pre> <p>Important: Variables must be sorted by order of first appearance. A variable can reference earlier variables but not later ones.</p>"},{"location":"policies/http-policy-breakdown/#validation-rules","title":"Validation Rules","text":"<p>Validation rules contain the authorization logic. Each rule is a CEL expression that returns either an <code>http.Response</code> object or <code>null</code>.</p>"},{"location":"policies/http-policy-breakdown/#evaluation-order","title":"Evaluation Order","text":"<ol> <li>Rules are evaluated sequentially in the order they appear</li> <li>If a rule returns an <code>http.Response</code> (non-null), that response is returned immediately</li> <li>If a rule returns <code>null</code>, evaluation continues to the next rule</li> <li>If all rules return <code>null</code>, the request is denied by default</li> </ol> <p>Warning</p> <p>When multiple policies match a request, a random policy will be selected. Use strict match conditions to avoid conflicts.</p>"},{"location":"policies/http-policy-breakdown/#basic-example","title":"Basic Example","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: force_authorized\n    expression: object.headers.get(\"x-force-authorized\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  # Deny if not allowed\n  - expression: |\n      !variables.allowed\n        ? http.response().status(403).withBody(\"Forbidden\")\n        : null\n  # Allow the request\n  - expression: |\n      http.response().status(200)\n</code></pre>"},{"location":"policies/http-policy-breakdown/#advanced-example","title":"Advanced Example","text":"<p>This example demonstrates multiple validation checks with custom headers and status codes:</p> <pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: force_authorized\n    expression: object.headers.get(\"x-force-authorized\") in [\"enabled\", \"true\"]\n  - name: force_unauthenticated\n    expression: object.headers.get(\"x-force-unauthenticated\") in [\"enabled\", \"true\"]\n  validations:\n  # Check 1: Return 401 if unauthenticated\n  - expression: |\n      variables.force_unauthenticated\n        ? http.response().status(401).withBody(\"Authentication Failed\")\n        : null\n  # Check 2: Return 403 if not authorized\n  - expression: |\n      !variables.force_authorized\n        ? http.response().status(403).withBody(\"Unauthorized Request\")\n        : null\n  # Check 3: Allow with custom headers\n  - expression: |\n      http.response()\n        .status(200)\n        .withHeader(\"x-validated-by\", \"kyverno\")\n        .withHeader(\"x-custom-header\", \"custom-value\")\n</code></pre> <p>This policy demonstrates: - Sequential evaluation: Each validation is checked in order - Conditional responses: Using ternary operators to return responses or null - Multiple status codes: Different responses for authentication (401) vs authorization (403) failures - Custom headers: Adding headers to successful responses - Custom body: Setting response body content</p>"},{"location":"policies/http-policy-breakdown/#cel-http-extension-library","title":"CEL HTTP Extension Library","text":"<p>The CEL engine includes helper functions for creating HTTP responses:</p>"},{"location":"policies/http-policy-breakdown/#key-functions","title":"Key Functions","text":"<ul> <li><code>http.response()</code>: Creates a new HTTP response builder</li> <li><code>.status(code)</code>: Sets the HTTP status code</li> <li><code>.withBody(content)</code>: Sets the response body</li> <li><code>.withHeader(key, value)</code>: Adds a response header</li> </ul>"},{"location":"policies/http-policy-breakdown/#response-builder-pattern","title":"Response Builder Pattern","text":"<p>The HTTP library uses a builder pattern for constructing responses:</p> <pre><code>validations:\n- expression: |\n    http.response()\n      .status(200)\n      .withHeader(\"Content-Type\", \"application/json\")\n      .withHeader(\"X-Custom-Header\", \"value\")\n      .withBody('{\"status\": \"ok\"}')\n</code></pre>"},{"location":"policies/http-policy-breakdown/#using-external-data","title":"Using External Data","text":"<p>You can fetch data from external sources to make authorization decisions:</p>"},{"location":"policies/http-policy-breakdown/#example-external-api-call","title":"Example: External API Call","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: external-data-policy\nspec:\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: secretWord\n    expression: |\n      http.Get(\"http://my-server:3000\").secretWord\n  validations:\n  - expression: |\n      object.headers.get(\"secret-header\") == variables.secretWord\n        ? http.response().status(200).withBody(\"Valid secret\")\n        : http.response().status(403).withBody(\"Invalid secret\")\n</code></pre>"},{"location":"policies/http-policy-breakdown/#example-multiple-external-calls","title":"Example: Multiple External Calls","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: multi-source-policy\nspec:\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: userInfo\n    expression: |\n      http.Get(\"http://user-service:8080/users/\" + object.headers.get(\"x-user-id\"))\n  - name: permissions\n    expression: |\n      http.Get(\"http://auth-service:8080/permissions/\" + variables.userInfo.role)\n  validations:\n  - expression: |\n      variables.permissions.canAccess\n        ? http.response().status(200).withHeader(\"x-user-role\", variables.userInfo.role)\n        : http.response().status(403).withBody(\"Insufficient permissions\")\n</code></pre>"},{"location":"policies/http-policy-breakdown/#complete-example","title":"Complete Example","text":"<p>Here's a complete policy that combines all concepts:</p> <pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: complete-http-policy\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: HTTP\n  matchConditions:\n  - name: is-api-path\n    expression: object.path.startsWith(\"/api/\")\n  - name: is-post-or-put\n    expression: object.method in [\"POST\", \"PUT\"]\n  variables:\n  - name: auth_header\n    expression: object.headers.get(\"authorization\")\n  - name: is_authenticated\n    expression: variables.auth_header.startsWith(\"Bearer \")\n  - name: user_role\n    expression: object.headers.get(\"x-user-role\")\n  - name: is_admin\n    expression: variables.user_role == \"admin\"\n  - name: request_path\n    expression: object.path\n  validations:\n  # Deny if not authenticated\n  - expression: |\n      !variables.is_authenticated\n        ? http.response()\n            .status(401)\n            .withHeader(\"WWW-Authenticate\", \"Bearer\")\n            .withBody(\"Authentication required\")\n        : null\n  # Deny if not admin\n  - expression: |\n      !variables.is_admin\n        ? http.response()\n            .status(403)\n            .withBody(\"Admin access required for \" + variables.request_path)\n        : null\n  # Allow with tracking headers\n  - expression: |\n      http.response()\n        .status(200)\n        .withHeader(\"x-auth-validated\", \"true\")\n        .withHeader(\"x-policy-applied\", \"complete-http-policy\")\n        .withHeader(\"x-user-role\", variables.user_role)\n</code></pre>"},{"location":"policies/http-policy-breakdown/#request-object-structure","title":"Request Object Structure","text":"<p>The HTTP request object (<code>object</code>) has the following structure:</p> <pre><code>{\n  method: \"GET\",              // HTTP method\n  path: \"/api/users\",         // Request path\n  headers: {                  // Request headers (map)\n    \"authorization\": \"Bearer token\",\n    \"content-type\": \"application/json\"\n  },\n  body: \"...\",               // Request body (if present)\n  query: {                   // Query parameters (map)\n    \"page\": \"1\",\n    \"limit\": \"10\"\n  }\n}\n</code></pre>"},{"location":"policies/http-policy-breakdown/#accessing-request-data","title":"Accessing Request Data","text":"<pre><code>variables:\n# Access method\n- name: method\n  expression: object.method\n\n# Access path\n- name: path\n  expression: object.path\n\n# Access headers\n- name: auth_header\n  expression: object.headers.get(\"authorization\")\n\n# Access query parameters\n- name: page\n  expression: object.query.get(\"page\")\n\n# Check if header exists\n- name: has_auth\n  expression: object.headers.has(\"authorization\")\n</code></pre>"},{"location":"policies/http-policy-breakdown/#common-patterns","title":"Common Patterns","text":""},{"location":"policies/http-policy-breakdown/#pattern-1-token-validation","title":"Pattern 1: Token Validation","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: token-validation\nspec:\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: token\n    expression: object.headers.get(\"authorization\").replace(\"Bearer \", \"\")\n  - name: is_valid\n    expression: variables.token.size() &gt; 20\n  validations:\n  - expression: |\n      !variables.is_valid\n        ? http.response().status(401).withBody(\"Invalid token\")\n        : http.response().status(200)\n</code></pre>"},{"location":"policies/http-policy-breakdown/#pattern-2-role-based-access-control","title":"Pattern 2: Role-Based Access Control","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: rbac-policy\nspec:\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: user_role\n    expression: object.headers.get(\"x-user-role\")\n  - name: allowed_roles\n    expression: [\"admin\", \"editor\"]\n  validations:\n  - expression: |\n      !(variables.user_role in variables.allowed_roles)\n        ? http.response().status(403).withBody(\"Role not authorized\")\n        : http.response().status(200)\n</code></pre>"},{"location":"policies/http-policy-breakdown/#pattern-3-rate-limiting-check","title":"Pattern 3: Rate Limiting Check","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: rate-limit-check\nspec:\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: user_id\n    expression: object.headers.get(\"x-user-id\")\n  - name: rate_limit_status\n    expression: |\n      http.Get(\"http://rate-limiter:8080/check/\" + variables.user_id)\n  validations:\n  - expression: |\n      variables.rate_limit_status.exceeded\n        ? http.response()\n            .status(429)\n            .withHeader(\"Retry-After\", \"60\")\n            .withBody(\"Rate limit exceeded\")\n        : http.response().status(200)\n</code></pre>"},{"location":"policies/http-policy-breakdown/#pattern-4-path-based-authorization","title":"Pattern 4: Path-Based Authorization","text":"<pre><code>apiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: path-authorization\nspec:\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: is_admin_path\n    expression: object.path.startsWith(\"/admin/\")\n  - name: is_admin_user\n    expression: object.headers.get(\"x-user-role\") == \"admin\"\n  validations:\n  - expression: |\n      variables.is_admin_path &amp;&amp; !variables.is_admin_user\n        ? http.response().status(403).withBody(\"Admin access required\")\n        : null\n  - expression: |\n      http.response().status(200)\n</code></pre>"},{"location":"policies/http-policy-breakdown/#best-practices","title":"Best Practices","text":"<ol> <li>Use specific match conditions to avoid policy conflicts when multiple policies exist</li> <li>Order validations carefully - put most common deny conditions first</li> <li>Use variables to avoid repeating complex expressions</li> <li>Return <code>null</code> from validations that don't make a decision</li> <li>Set appropriate failure policies based on your security requirements</li> <li>Use descriptive policy names for easier troubleshooting</li> <li>Add custom headers for observability and debugging</li> <li>Cache external data when possible to improve performance</li> <li>Use meaningful HTTP status codes (401 for authentication, 403 for authorization)</li> <li>Provide clear error messages in response bodies</li> </ol>"},{"location":"policies/http-policy-breakdown/#debugging-tips","title":"Debugging Tips","text":"<ol> <li> <p>Add debug headers to responses to track which policy and validation matched:    <pre><code>.withHeader(\"x-policy-name\", \"my-policy\")\n.withHeader(\"x-validation-step\", \"step-2\")\n</code></pre></p> </li> <li> <p>Use variables to break down complex logic for easier debugging</p> </li> <li> <p>Test match conditions separately to ensure they work as expected</p> </li> <li> <p>Check failure policy behavior in development before deploying to production</p> </li> </ol>"},{"location":"policies/http-policy-breakdown/#additional-resources","title":"Additional Resources","text":"<ul> <li>CEL HTTP Extension Library</li> <li>CEL Language Specification</li> <li>HTTP Status Codes</li> </ul>"},{"location":"quick-start/","title":"Quick Start","text":"<p>The Kyverno Envoy Plugin is a flexible authorization service that enforces Kyverno policies for Envoy proxies and plain HTTP services. It provides fine-grained, context-aware access control using policy-based rules written in CEL (Common Expression Language).</p>"},{"location":"quick-start/#overview","title":"Overview","text":"<p>Modern applications need flexible authorization mechanisms that can evaluate requests based on headers, paths, methods, and external data sources. The Kyverno Envoy Plugin provides this capability in two modes:</p>"},{"location":"quick-start/#envoy-integration","title":"\ud83d\udd0c Envoy Integration","text":"<p>Integrates with Envoy's External Authorization filter (v1.7.0+) to make authorization decisions for service mesh and API gateway deployments. The plugin implements the Envoy External Authorization API as a gRPC server, allowing authorization decisions to be offloaded to an external service that can access the full request context.</p>"},{"location":"quick-start/#http-authorization","title":"\ud83c\udf10 HTTP Authorization","text":"<p>Works as a standalone HTTP authorization server that accepts vanilla HTTP requests and returns custom responses based on policy evaluation. This mode integrates with HTTP proxies and ingress controllers (like Ingress NGINX) using standard external authentication protocols, or can be called directly by applications.</p> <p></p>"},{"location":"quick-start/#what-is-the-kyverno-envoy-plugin","title":"What is the Kyverno Envoy Plugin?","text":"<p>The Kyverno Envoy Plugin is an HTTP/gRPC authorization server that validates requests against Kyverno policies defined using CEL expressions.</p>"},{"location":"quick-start/#key-features","title":"Key Features","text":"<ul> <li>Dual-mode operation: Works with Envoy proxies (gRPC) or plain HTTP services</li> <li>Policy-based authorization: Define authorization rules using CEL expressions that evaluate request attributes (headers, paths, methods, etc.)</li> <li>External data integration: Fetch data from HTTP services or Kubernetes resources (ConfigMaps, Secrets) to make authorization decisions</li> <li>Control plane architecture: Centralized policy management with distributed enforcement through sidecars</li> <li>Sidecar deployment: Runs as a sidecar container alongside your applications or proxies for low-latency authorization checks</li> <li>No code changes required: Enforce policies without modifying your microservices</li> <li>Dynamic responses: Return custom status codes, headers, and response bodies based on policy evaluation</li> </ul>"},{"location":"quick-start/#how-does-this-work","title":"How Does This Work?","text":"<p>The Kyverno Envoy Plugin uses a control plane and sidecar architecture:</p> <ol> <li>Control Plane: Manages <code>ValidatingPolicy</code> resources and distributes them to authorization sidecars</li> <li>Sidecar Injector: Automatically injects authorization sidecars into pods via a mutating webhook</li> <li>Authorization Sidecar: Runs alongside your proxy/application and validates requests against policies</li> </ol>"},{"location":"quick-start/#request-flow","title":"Request Flow","text":""},{"location":"quick-start/#envoy-mode","title":"Envoy Mode","text":"<p>When Envoy receives an API request:</p> <ol> <li>Envoy's External Authorization filter sends a gRPC CheckRequest to the Kyverno Authz Server sidecar</li> <li>The sidecar evaluates the request against policies (evaluation mode: <code>Envoy</code>)</li> <li>The sidecar returns a CheckResponse with the authorization decision</li> <li>Envoy either forwards the request to your microservice or denies it based on the response</li> </ol>"},{"location":"quick-start/#http-mode","title":"HTTP Mode","text":"<p>When an HTTP request needs authorization:</p> <ol> <li>The proxy (e.g., Ingress NGINX) or application sends a vanilla HTTP request to the authorization sidecar on localhost</li> <li>The sidecar receives the request details (host, path, headers, method, etc.)</li> <li>The sidecar evaluates the request against policies (evaluation mode: <code>HTTP</code>)</li> <li>Based on the policy evaluation, the sidecar returns a custom HTTP response:</li> <li>Allow: Returns 200 with optional custom headers and response body</li> <li>Deny: Returns a custom status code (e.g., 403, 401) with a custom response body</li> </ol> <p></p> <p>Performing policy evaluations locally in the sidecar is advantageous, as it eliminates the need for an additional network hop for authorization checks, thus enhancing both performance and availability.</p> <p>Info</p> <p>The Kyverno Envoy Plugin is designed for Kubernetes environments where sidecars are automatically injected into pods. It can also be deployed as a standalone service for non-Kubernetes environments or run alongside Envoy as a separate process.</p>"},{"location":"quick-start/#getting-started","title":"Getting Started","text":"<p>Choose your deployment mode:</p> <ul> <li>Envoy Integration Guide - Set up authorization for Envoy proxy and service mesh</li> <li>HTTP Authorization Guide - Set up authorization for HTTP services and ingress controllers</li> <li>Sidecar Injector - Automatically inject authorization sidecars into pods</li> </ul>"},{"location":"quick-start/#writing-policies","title":"Writing Policies","text":"<p>Learn how to write authorization policies:</p> <ul> <li>Envoy Policy Breakdown - Complete guide for Envoy policies</li> <li>HTTP Policy Breakdown - Complete guide for HTTP policies</li> </ul>"},{"location":"quick-start/#additional-resources","title":"Additional Resources","text":""},{"location":"quick-start/#for-envoy-integration","title":"For Envoy Integration","text":"<ul> <li>External Authorization - Learn about the External Authorization filter</li> <li>Network and HTTP - Configure the External Authorization filter</li> </ul>"},{"location":"quick-start/#for-http-authorization","title":"For HTTP Authorization","text":"<ul> <li>Kyverno CEL Libraries - Available CEL functions for policies</li> <li>Installation Guide - Certificate management and deployment options</li> </ul>"},{"location":"quick-start/#general","title":"General","text":"<ul> <li>Next Steps - Continue your journey with the Kyverno Envoy Plugin</li> </ul>"},{"location":"quick-start/envoy/","title":"Authz server","text":""},{"location":"quick-start/envoy/#setup","title":"Setup","text":"<p>In this quick start guide we will deploy the Kyverno Authz Server inside a cluster.</p> <p>Then you will interface Istio, an open source service mesh with the Kyverno Authz Server to delegate the request authorisation based on policies installed in the cluster.</p>"},{"location":"quick-start/envoy/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install the Kyverno Authz Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"quick-start/envoy/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.34.0\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"quick-start/envoy/#configure-the-mesh","title":"Configure the mesh","text":"<p>We need to register the Kyverno Authz Server with Istio.</p> <pre><code># install istio base chart\nhelm install istio-base \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts base\n\n# install istiod chart\nhelm install istiod \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts istiod \\\n  --values - &lt;&lt;EOF\nmeshConfig:\n  accessLogFile: /dev/stdout\n  extensionProviders:\n  - name: kyverno-authz-server\n    envoyExtAuthzGrpc:\n      service: kyverno-authz-server.kyverno.svc.cluster.local\n      port: 9081\nEOF\n</code></pre> <p>Notice that in the configuration, we define an <code>extensionProviders</code> section that points to the Kyverno Authz Server we will install in the next step:</p> <pre><code>[...]\nmeshConfig:\n  extensionProviders:\n  - name: kyverno-authz-server.local\n    envoyExtAuthzGrpc:\n      service: kyverno-authz-server.kyverno.svc.cluster.local\n      port: '9081'\n[...]\n</code></pre>"},{"location":"quick-start/envoy/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a certificate to let the api server call into it.</p> <p>Let's deploy <code>cert-manager</code> to manage the certificate we need.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --values - &lt;&lt;EOF\ncrds:\n  enabled: true\nEOF\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"quick-start/envoy/#install-kyverno-validatingpolicy-crd","title":"Install Kyverno ValidatingPolicy CRD","text":"<p>Before deploying the Kyverno Authz Server, we need to install the Kyverno ValidatingPolicy CRD.</p> <pre><code>kubectl apply \\\n  -f https://raw.githubusercontent.com/kyverno/kyverno/refs/heads/main/config/crds/policies.kyverno.io/policies.kyverno.io_validatingpolicies.yaml\n</code></pre>"},{"location":"quick-start/envoy/#deploy-the-kyverno-authz-server","title":"Deploy the Kyverno Authz Server","text":"<p>Now we can deploy the Kyverno Authz Server.</p> <pre><code># create the kyverno namespace\nkubectl create ns kyverno\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace kyverno istio-injection=enabled\n\n# deploy the kyverno authz server\nhelm install kyverno-authz-server \\\n  --namespace kyverno \\\n  --wait  \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server \\\n  --values - &lt;&lt;EOF\ncertificates:\n  certManager:\n    issuerRef:\n      group: cert-manager.io\n      kind: ClusterIssuer\n      name: selfsigned-issuer\nEOF\n</code></pre>"},{"location":"quick-start/envoy/#deploy-the-sample-application","title":"Deploy the sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace demo istio-injection=enabled\n\n# deploy the httpbin application\nkubectl apply \\\n  -n demo \\\n  -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml\n</code></pre>"},{"location":"quick-start/envoy/#deploy-an-istio-authorizationpolicy","title":"Deploy an Istio AuthorizationPolicy","text":"<p>An <code>AuthorizationPolicy</code> is the custom Istio resource that defines the services that will be protected by the Kyverno Authz Server.</p> <pre><code># deploy istio authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: kyverno-authz-server\n  namespace: demo\nspec:\n  action: CUSTOM\n  provider:\n    name: kyverno-authz-server.local\n  rules:\n  - {} # empty rules, it will apply to all requests\nEOF\n</code></pre> <p>Notice that in this resource, we define the Kyverno Authz Server <code>extensionProvider</code> you set in the Istio configuration:</p> <pre><code>[...]\n  provider:\n    name: kyverno-authz-server.local\n[...]\n</code></pre>"},{"location":"quick-start/envoy/#deploy-a-kyverno-validatingpolicy","title":"Deploy a Kyverno ValidatingPolicy","text":"<p>A Kyverno <code>ValidatingPolicy</code> defines the rules used by the Kyverno authz server to make a decision based on a given Envoy CheckRequest.</p> <p>It uses the CEL language to analyse the incoming CheckRequest and is expected to produce a CheckResponse in return.</p> <pre><code># deploy kyverno validating policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: &gt;-\n      !variables.allowed ? envoy.Denied(403).Response() : null\nEOF\n</code></pre> <p>This simple policy will deny requests if they don't contain the header <code>x-force-authorized</code> with the value <code>enabled</code> or <code>true</code>.</p>"},{"location":"quick-start/envoy/#testing","title":"Testing","text":"<p>At this we have deployed and configured Istio, the Kyverno Authz Server, a sample application, and the authorization policies.</p>"},{"location":"quick-start/envoy/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"quick-start/envoy/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"quick-start/envoy/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send requests to the sample application and verify the result.</p> <p>The following request will return <code>403</code> (denied by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get\n</code></pre> <p>The following request will return <code>200</code> (allowed by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"x-force-authorized: true\"\n</code></pre>"},{"location":"quick-start/envoy/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the quick start guide!</p> <p>This tutorial demonstrated how to configure Istio\u2019s EnvoyFilter to utilize the Kyverno Authz Server as an external authorization service.</p>"},{"location":"quick-start/http/","title":"Quick Start","text":""},{"location":"quick-start/http/#setup","title":"Setup","text":"<p>In this quick start guide we will deploy the Kyverno HTTP Authorizer components in a Kubernetes cluster.</p>"},{"location":"quick-start/http/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install the components</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"quick-start/http/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"quick-start/http/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno HTTP Authorizer components need certificates for their webhooks.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --set crds.enabled=true\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"quick-start/http/#deploy-the-control-plane","title":"Deploy the Control Plane","text":"<p>Deploy the control plane which manages policies:</p> <pre><code># deploy the control plane\nhelm install kyverno-http-authorizer-control-plane \\\n  --namespace kyverno --create-namespace \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-http-authorizer kyverno-http-authorizer-control-plane \\\n  --set certificates.certManager.issuerRef.group=cert-manager.io \\\n  --set certificates.certManager.issuerRef.kind=ClusterIssuer \\\n  --set certificates.certManager.issuerRef.name=selfsigned-issuer\n</code></pre>"},{"location":"quick-start/http/#deploy-the-sidecar-injector","title":"Deploy the Sidecar Injector","text":"<p>Deploy the sidecar injector:</p> <pre><code># deploy the sidecar injector\nhelm install kyverno-sidecar-injector \\\n  --namespace kyverno \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-http-authorizer kyverno-sidecar-injector \\\n  --set certificates.certManager.issuerRef.group=cert-manager.io \\\n  --set certificates.certManager.issuerRef.kind=ClusterIssuer \\\n  --set certificates.certManager.issuerRef.name=selfsigned-issuer \\\n  --set controlPlaneAddress=kyverno-http-authorizer-control-plane.kyverno.svc.cluster.local:9081\n</code></pre>"},{"location":"quick-start/http/#deploy-a-validatingpolicy","title":"Deploy a ValidatingPolicy","text":"<p>Deploy a sample policy:</p> <pre><code># deploy validating policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: HTTP\n  variables:\n  - name: force_authorized\n    expression: object.headers.get(\"x-force-authorized\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  validations:\n  - expression: |\n      !variables.allowed\n        ? http.response().status(403).withBody(\"Forbidden\")\n        : null\n  - expression: |\n      http.response().status(200)\nEOF\n</code></pre> <p>This policy denies requests that don't contain the header <code>x-force-authorized</code> with the value <code>enabled</code> or <code>true</code>.</p>"},{"location":"quick-start/http/#next-steps","title":"Next Steps","text":"<p>Now that you have the components deployed, check out the tutorials to learn how to integrate with:</p> <ul> <li>Ingress NGINX</li> </ul>"},{"location":"quick-start/http/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the quick start guide!</p> <p>You have successfully deployed the Kyverno HTTP Authorizer control plane, sidecar injector, and a sample ValidatingPolicy.</p>"},{"location":"quick-start/next-steps/","title":"Next steps","text":"<p>We covered the main components of the Kyverno Envoy Plugin.</p> <p>Tip</p> <p>If there's anything you would like to be improved, please reach out, we will be happy to discuss and improve as much as we can.</p> <p>To continue exploring and learn more about the Kyverno Envoy Plugin:</p> <ul> <li>Start writing your own policies</li> <li>Browse the tutorials section</li> <li>Consult the Reference documentation</li> <li>Engage with our Community and start contributing</li> </ul>"},{"location":"quick-start/sidecar-injector/","title":"Sidecar injector","text":""},{"location":"quick-start/sidecar-injector/#setup","title":"Setup","text":"<p>In this quick start guide we will deploy the Kyverno Authz Server as a sidecar using a mutating webhook.</p> <p>Then you will interface Istio, an open source service mesh with the Kyverno Authz Server to delegate the request authorisation based on policies installed in the cluster.</p>"},{"location":"quick-start/sidecar-injector/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install the Kyverno Authz Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"quick-start/sidecar-injector/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.34.0\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"quick-start/sidecar-injector/#configure-the-mesh","title":"Configure the mesh","text":"<p>We need to register the Kyverno Authz Server with Istio.</p> <pre><code># install istio base chart\nhelm install istio-base \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts base\n\n# install istiod chart\nhelm install istiod \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts istiod \\\n  --values - &lt;&lt;EOF\nmeshConfig:\n  accessLogFile: /dev/stdout\n  extensionProviders:\n  - name: kyverno-authz-server\n    envoyExtAuthzGrpc:\n      service: kyverno-authz-server.local\n      port: 9081\nEOF\n</code></pre> <p>Notice that in the configuration, we define an <code>extensionProviders</code> section that points to <code>kyverno-authz-server.local</code>, this the service entry we will use to let Envoy talk to our sidecar:</p> <pre><code>[...]\nmeshConfig:\n  extensionProviders:\n  - name: kyverno-authz-server.local\n    envoyExtAuthzGrpc:\n      service: kyverno-authz-server.local\n      port: '9081'\n[...]\n</code></pre>"},{"location":"quick-start/sidecar-injector/#register-the-authz-server-sidecar-serviceentry","title":"Register the authz server sidecar ServiceEntry","text":"<p>We need to tell istio about the sidecar we injected and how to reach it.</p> <pre><code># register authz server sidecar in the mesh\nkubectl apply -f - &lt;&lt;EOF\napiVersion: networking.istio.io/v1\nkind: ServiceEntry\nmetadata:\n  name: kyverno-authz-server\nspec:\n  hosts:\n  - kyverno-authz-server.local\n  endpoints:\n  - address: 127.0.0.1\n  ports:\n  - name: grpc\n    number: 9081\n    protocol: GRPC\n  resolution: STATIC\nEOF\n</code></pre>"},{"location":"quick-start/sidecar-injector/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a certificate to let the api server call into it.</p> <p>Let's deploy <code>cert-manager</code> to manage the certificate we need.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --values - &lt;&lt;EOF\ncrds:\n  enabled: true\nEOF\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"quick-start/sidecar-injector/#install-kyverno-validatingpolicy-crd","title":"Install Kyverno ValidatingPolicy CRD","text":"<p>Before deploying the Kyverno Authz Server, we need to install the Kyverno ValidatingPolicy CRD.</p> <pre><code>kubectl apply \\\n  -f https://raw.githubusercontent.com/kyverno/kyverno/refs/heads/main/config/crds/policies.kyverno.io/policies.kyverno.io_validatingpolicies.yaml\n</code></pre>"},{"location":"quick-start/sidecar-injector/#create-the-demo-namespace","title":"Create the demo Namespace","text":"<pre><code># create the demo namespace\nkubectl create ns demo\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace demo istio-injection=enabled\n\n# label the namespace to inject the authz server sidecar\nkubectl label namespace demo kyverno-injection=enabled\n</code></pre>"},{"location":"quick-start/sidecar-injector/#deploy-a-kyverno-validatingpolicy","title":"Deploy a Kyverno ValidatingPolicy","text":"<p>A Kyverno <code>ValidatingPolicy</code> defines the rules used by the Kyverno authz server to make a decision based on a given Envoy CheckRequest.</p> <p>It uses the CEL language to analyse the incoming CheckRequest and is expected to produce a CheckResponse in return.</p> <p>Sidecar can't talk with API Server</p> <p>Because the sidecar usually doesn't have the permissions to fetch policies from the API server, we need to provide the policies using an external source. In this example, we use a config map.</p> <pre><code># deploy kyverno validating policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kyverno-authz-server\n  namespace: demo\ndata:\n  policy.yaml: |\n    apiVersion: policies.kyverno.io/v1alpha1\n    kind: ValidatingPolicy\n    metadata:\n      name: demo\n    spec:\n      failurePolicy: Fail\n      evaluation:\n        mode: Envoy\n      variables:\n      - name: force_authorized\n        expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n      - name: allowed\n        expression: variables.force_authorized in [\"enabled\", \"true\"]\n      validations:\n      - expression: &gt;-\n          !variables.allowed ? envoy.Denied(403).Response() : null\nEOF\n</code></pre> <p>This simple policy will deny requests if they don't contain the header <code>x-force-authorized</code> with the value <code>enabled</code> or <code>true</code>.</p>"},{"location":"quick-start/sidecar-injector/#deploy-the-sidecar-injector","title":"Deploy the Sidecar injector","text":"<p>Now we can deploy the Kyverno Authz Server.</p> <pre><code># deploy the kyverno sidecar injector\nhelm install kyverno-authz-server \\\n  --namespace kyverno --create-namespace \\\n  --wait  \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-sidecar-injector \\\n  --values - &lt;&lt;EOF\ncertificates:\n  certManager:\n    issuerRef:\n      group: cert-manager.io\n      kind: ClusterIssuer\n      name: selfsigned-issuer\nsidecar:\n  externalPolicySources:\n    # load policies from the file system\n  - file://data/kyverno-authz-server\n  volumes:\n    # add configmap in the target pod\n  - name: kyverno-authz-server\n    configMap:\n      name: kyverno-authz-server\n      optional: true\n  volumeMounts:\n    # mount the configmap in sidecar container\n  - name: kyverno-authz-server\n    readOnly: true\n    mountPath: /data/kyverno-authz-server\nEOF\n</code></pre>"},{"location":"quick-start/sidecar-injector/#deploy-the-sample-application","title":"Deploy the sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># deploy the httpbin application\nkubectl apply \\\n  -n demo \\\n  -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml\n</code></pre>"},{"location":"quick-start/sidecar-injector/#deploy-an-istio-authorizationpolicy","title":"Deploy an Istio AuthorizationPolicy","text":"<p>An <code>AuthorizationPolicy</code> is the custom Istio resource that defines the services that will be protected by the Kyverno Authz Server.</p> <pre><code># deploy istio authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: kyverno-authz-server\n  namespace: demo\nspec:\n  action: CUSTOM\n  provider:\n    name: kyverno-authz-server.local\n  rules:\n  - {} # empty rules, it will apply to all requests\nEOF\n</code></pre> <p>Notice that in this resource, we define the Kyverno Authz Server <code>extensionProvider</code> you set in the Istio configuration:</p> <pre><code>[...]\n  provider:\n    name: kyverno-authz-server.local\n[...]\n</code></pre>"},{"location":"quick-start/sidecar-injector/#testing","title":"Testing","text":"<p>At this we have deployed and configured Istio, the Kyverno Authz Server, a sample application, and the authorization policies.</p>"},{"location":"quick-start/sidecar-injector/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"quick-start/sidecar-injector/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"quick-start/sidecar-injector/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send requests to the sample application and verify the result.</p> <p>The following request will return <code>403</code> (denied by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get\n</code></pre> <p>The following request will return <code>200</code> (allowed by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"x-force-authorized: true\"\n</code></pre>"},{"location":"quick-start/sidecar-injector/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the quick start guide!</p> <p>This tutorial demonstrated how to configure Istio\u2019s EnvoyFilter to utilize the Kyverno Authz Server as an external authorization service.</p>"},{"location":"reference/","title":"Reference documentation","text":"<p>Info</p> <p>Select an item in the navigation menu to browse a specific page.</p>"},{"location":"reference/json-schemas/","title":"JSON schemas","text":"<p>JSON schemas for the Kyverno Envoy Plugin are available:</p> <ul> <li>ValidatingPolicy (v1alpha1)</li> </ul> <p>They can be used to enable validation and autocompletion in your IDE.</p>"},{"location":"reference/json-schemas/#vs-code","title":"VS code","text":"<p>In VS code, simply add a comment on top of your YAML resources.</p>"},{"location":"reference/json-schemas/#validatingpolicy","title":"ValidatingPolicy","text":"<pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/playground/main/schemas/json/v3/validatingpolicy-policies.kyverno.io-v1alpha1.json\napiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\") in [\"enabled\", \"true\"]\n  - name: force_unauthenticated\n    expression: object.attributes.request.http.headers[?\"x-force-unauthenticated\"].orValue(\"\") in [\"enabled\", \"true\"]\n  - name: metadata\n    expression: '{\"my-new-metadata\": \"my-new-value\"}'\n  validations:\n    # if force_unauthenticated -&gt; 401\n  - expression: &gt;\n      variables.force_unauthenticated\n        ? envoy\n            .Denied(401)\n            .WithBody(\"Authentication Failed\")\n            .Response()\n            .WithMetadata(variables.metadata)\n        : null\n    # if not force_authorized -&gt; 403\n  - expression: &gt;\n      !variables.force_authorized\n        ? envoy\n            .Denied(403)\n            .WithBody(\"Unauthorized Request\")\n            .Response()\n        : null\n    # else -&gt; 200\n  - expression: &gt;\n      envoy\n        .Allowed()\n        .WithHeader(\"x-validated-by\", \"my-security-checkpoint\")\n        .WithoutHeader(\"x-force-authorized\")\n        .WithResponseHeader(\"x-add-custom-response-header\", \"added\")\n        .Response()\n        .WithMetadata(variables.metadata)\n</code></pre>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/","title":"authz.kyverno.io (v1alpha1)","text":""},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#resource-types","title":"Resource Types","text":"<ul> <li>AuthorizationServer</li> </ul>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-AuthorizationServer","title":"AuthorizationServer","text":"<p>AuthorizationServer is a resource that represents a new kyverno authorization server.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>authz.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>AuthorizationServer</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>AuthorizationServerSpec</code> No description provided."},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-AuthorizationServerPolicySource","title":"AuthorizationServerPolicySource","text":"<p>Appears in:</p> <ul> <li>AuthorizationServerSpec</li> </ul> <p>AuthorizationServerPolicySource represents where the authorization server will get its policies from.</p> Field Type Required Inline Description <code>kubernetes</code> <code>KubernetesPolicySource</code> No description provided. <code>external</code> <code>ExternalPolicySource</code> No description provided."},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-AuthorizationServerSpec","title":"AuthorizationServerSpec","text":"<p>Appears in:</p> <ul> <li>AuthorizationServer</li> </ul> <p>AuthorizationServerSpec defines the spec of a authorization server.</p> Field Type Required Inline Description <code>type</code> <code>AuthorizationServerType</code> <p>Type defines the type of authorization server.</p> <code>sources</code> <code>[]AuthorizationServerPolicySource</code> <p>AuthorizationServerPolicySource contains all the sources of policies for the authorization server.</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-AuthorizationServerType","title":"AuthorizationServerType","text":"<p>Appears in:</p> <ul> <li>AuthorizationServerSpec</li> </ul> <p>AuthorizationServerType defines the type of authorization server. Only one of the fields should be set at a time (mutually exclusive).</p> Field Type Required Inline Description <code>envoy</code> <code>EnvoyAuthorizationServer</code> <p>Envoy configures an Envoy-based authorization server.</p> <code>http</code> <code>HTTPAuthorizationServer</code> <p>HTTP configures a custom HTTP authorization server.</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-EnvoyAuthorizationServer","title":"EnvoyAuthorizationServer","text":"<p>Appears in:</p> <ul> <li>AuthorizationServerType</li> </ul> <p>EnvoyAuthorizationServer defines the Envoy authorization server configuration.</p> Field Type Required Inline Description <code>network</code> <code>string</code> <p>Network is the network the server listens on.</p> <code>address</code> <code>string</code> <p>Address is the network address the server listens on.</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-ExternalPolicySource","title":"ExternalPolicySource","text":"<p>Appears in:</p> <ul> <li>AuthorizationServerPolicySource</li> </ul> <p>ExternalSource defines an external policy source.</p> Field Type Required Inline Description <code>url</code> <code>string</code> <p>URL is the URL of the external policy source Supported schemes are: file://, oci://, https://, etc</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-Group","title":"Group","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>PolicyObjectReference</li> </ul> <p>Group refers to a Kubernetes Group. It must either be an empty string or a RFC 1123 subdomain.</p> <p>This validation is based off of the corresponding Kubernetes validation: https://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/util/validation/validation.go#L208</p> <p>Valid values include:</p> <ul> <li>\"\" - empty string implies core Kubernetes API group</li> <li>\"authz.kyverno.io\"</li> <li>\"policies.kyverno.io\"</li> </ul> <p>Invalid values include:</p> <ul> <li>\"example.com/bar\" - \"/\" is an invalid character</li> </ul>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-HTTPAuthorizationServer","title":"HTTPAuthorizationServer","text":"<p>Appears in:</p> <ul> <li>AuthorizationServerType</li> </ul> <p>HTTPAuthorizationServer defines the HTTP authorization server configuration.</p> Field Type Required Inline Description <code>port</code> <code>int</code> <p>Port is the port the server listens on.</p> <code>modifiers</code> <code>Modifiers</code> <p>Modifiers to apply to requests and responses.</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-Kind","title":"Kind","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>PolicyObjectReference</li> </ul> <p>Kind refers to a Kubernetes Kind.</p> <p>Valid values include:</p> <ul> <li>\"Service\"</li> <li>\"HTTPRoute\"</li> </ul> <p>Invalid values include:</p> <ul> <li>\"invalid/kind\" - \"/\" is an invalid character</li> </ul>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-KubernetesPolicySource","title":"KubernetesPolicySource","text":"<p>Appears in:</p> <ul> <li>AuthorizationServerPolicySource</li> </ul> <p>KubernetesPolicySource defines a reference to a Kubernetes policy resource.</p> Field Type Required Inline Description <code>policyRef</code> <code>PolicyObjectReference</code> <p>PolicyRef is a reference to Kubernetes policy resources. When omitted, all ValidatingPolicy resources in the cluster are selected. When present, filters policies by name or selector.</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-Modifiers","title":"Modifiers","text":"<p>Appears in:</p> <ul> <li>HTTPAuthorizationServer</li> </ul> <p>Modifiers defines the request/response modifiers for the authorization server.</p> Field Type Required Inline Description <code>request</code> <code>string</code> <p>Request is a script or expression for modifying the incoming request.</p> <code>response</code> <code>string</code> <p>Response is a script or expression for modifying the outgoing response.</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-ObjectName","title":"ObjectName","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>PolicyObjectReference</li> </ul> <p>ObjectName refers to the name of a Kubernetes object. Object names can have a variety of forms, including RFC 1123 subdomains, RFC 1123 labels, or RFC 1035 labels.</p>"},{"location":"reference/apis/authz.kyverno.io.v1alpha1/#authz-kyverno-io-v1alpha1-PolicyObjectReference","title":"PolicyObjectReference","text":"<p>Appears in:</p> <ul> <li>KubernetesPolicySource</li> </ul> <p>PolicyObjectReference represents a reference to a policy resource.</p> Field Type Required Inline Description <code>group</code> <code>Group</code> <p>Group is the group of the referent. For example, \"policies.kyverno.io\". When unspecified or empty string, core API group is inferred.</p> <code>kind</code> <code>Kind</code> <p>Kind is the kind of the referent. For example, \"ValidatingPolicy\".</p> <code>name</code> <code>ObjectName</code> <p>Name is the name of the referent. Mutually exclusive with Selector.</p> <code>selector</code> <code>meta/v1.LabelSelector</code> <p>Selector is a label selector to select the Kubernetes policy resource. Mutually exclusive with Name.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/","title":"policies.kyverno.io (v1alpha1)","text":""},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#resource-types","title":"Resource Types","text":"<ul> <li>DeletingPolicy</li> <li>GeneratingPolicy</li> <li>ImageValidatingPolicy</li> <li>MutatingPolicy</li> <li>PolicyException</li> <li>ValidatingPolicy</li> </ul>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-DeletingPolicy","title":"DeletingPolicy","text":"Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>policies.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>DeletingPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>DeletingPolicySpec</code> No description provided. <code>status</code> <code>DeletingPolicyStatus</code> <p>Status contains policy runtime data.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-GeneratingPolicy","title":"GeneratingPolicy","text":"Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>policies.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>GeneratingPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>GeneratingPolicySpec</code> No description provided. <code>status</code> <code>GeneratingPolicyStatus</code> <p>Status contains policy runtime data.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ImageValidatingPolicy","title":"ImageValidatingPolicy","text":"Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>policies.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>ImageValidatingPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>ImageValidatingPolicySpec</code> No description provided. <code>status</code> <code>ImageValidatingPolicyStatus</code> <p>Status contains policy runtime data.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutatingPolicy","title":"MutatingPolicy","text":"Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>policies.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>MutatingPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>MutatingPolicySpec</code> No description provided. <code>status</code> <code>MutatingPolicyStatus</code> <p>Status contains policy runtime data.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-PolicyException","title":"PolicyException","text":"<p>PolicyException declares resources to be excluded from specified policies.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>policies.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>PolicyException</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>PolicyExceptionSpec</code> <p>Spec declares policy exception behaviors.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ValidatingPolicy","title":"ValidatingPolicy","text":"Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>policies.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>ValidatingPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>ValidatingPolicySpec</code> No description provided. <code>status</code> <code>ValidatingPolicyStatus</code> <p>Status contains policy runtime data.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-AdmissionConfiguration","title":"AdmissionConfiguration","text":"<p>Appears in:</p> <ul> <li>EvaluationConfiguration</li> <li>GeneratingPolicyEvaluationConfiguration</li> <li>MutatingPolicyEvaluationConfiguration</li> </ul> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled controls if rules are applied during admission. Optional. Default value is \"true\".</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Attestation","title":"Attestation","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> </ul> <p>Attestation defines the identification details of the  metadata that has to be verified</p> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name is the name for this attestation. It is used to refer to the attestation in verification</p> <code>intoto</code> <code>InToto</code> <p>InToto defines the details of attestation attached using intoto format</p> <code>referrer</code> <code>Referrer</code> <p>Referrer defines the details of attestation attached using OCI 1.1 format</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Attestor","title":"Attestor","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> </ul> <p>Attestor is an identity that confirms or verifies the authenticity of an image or an attestation</p> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name is the name for this attestor. It is used to refer to the attestor in verification</p> <code>cosign</code> <code>Cosign</code> <p>Cosign defines attestor configuration for Cosign based signatures</p> <code>notary</code> <code>Notary</code> <p>Notary defines attestor configuration for Notary based signatures</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-BackgroundConfiguration","title":"BackgroundConfiguration","text":"<p>Appears in:</p> <ul> <li>EvaluationConfiguration</li> </ul> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled controls if rules are applied to existing resources during a background scan. Optional. Default value is \"true\". The value must be set to \"false\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-CTLog","title":"CTLog","text":"<p>Appears in:</p> <ul> <li>Cosign</li> </ul> <p>CTLog sets the configuration to verify the authority against a Rekor instance.</p> Field Type Required Inline Description <code>url</code> <code>string</code> <p>URL sets the url to the rekor instance (by default the public rekor.sigstore.dev)</p> <code>rekorPubKey</code> <code>string</code> <p>RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.</p> <code>ctLogPubKey</code> <code>string</code> <p>CTLogPubKey, if set, is used to validate SCTs against a custom source.</p> <code>tsaCertChain</code> <code>string</code> <p>TSACertChain, if set, is the PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates, and may contain the leaf TSA certificate if not present in the timestamurce.</p> <code>insecureIgnoreTlog</code> <code>bool</code> <p>InsecureIgnoreTlog skips transparency log verification.</p> <code>insecureIgnoreSCT</code> <code>bool</code> <p>IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Certificate","title":"Certificate","text":"<p>Appears in:</p> <ul> <li>Cosign</li> </ul> <p>Certificate defines the configuration for local signature verification</p> Field Type Required Inline Description <code>cert</code> <code>StringOrExpression</code> <p>Certificate is the to the public certificate for local signature verification.</p> <code>certChain</code> <code>StringOrExpression</code> <p>CertificateChain is the list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ConditionStatus","title":"ConditionStatus","text":"<p>Appears in:</p> <ul> <li>DeletingPolicyStatus</li> <li>GeneratingPolicyStatus</li> <li>ImageValidatingPolicyStatus</li> <li>MutatingPolicyStatus</li> <li>ValidatingPolicyStatus</li> </ul> <p>ConditionStatus is the shared status across all policy types</p> Field Type Required Inline Description <code>ready</code> <code>bool</code> <p>The ready of a policy is a high-level summary of where the policy is in its lifecycle. The conditions array, the reason and message fields contain more detail about the policy's status.</p> <code>conditions</code> <code>[]meta/v1.Condition</code> No description provided. <code>message</code> <code>string</code> <p>Message is a human readable message indicating details about the generation of ValidatingAdmissionPolicy/MutatingAdmissionPolicy It is an empty string when ValidatingAdmissionPolicy/MutatingAdmissionPolicy is successfully generated.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Cosign","title":"Cosign","text":"<p>Appears in:</p> <ul> <li>Attestor</li> </ul> <p>Cosign defines attestor configuration for Cosign based signatures</p> Field Type Required Inline Description <code>key</code> <code>Key</code> <p>Key defines the type of key to validate the image.</p> <code>keyless</code> <code>Keyless</code> <p>Keyless sets the configuration to verify the authority against a Fulcio instance.</p> <code>certificate</code> <code>Certificate</code> <p>Certificate defines the configuration for local signature verification</p> <code>source</code> <code>Source</code> <p>Sources sets the configuration to specify the sources from where to consume the signature and attestations.</p> <code>ctlog</code> <code>CTLog</code> <p>CTLog sets the configuration to verify the authority against a Rekor instance.</p> <code>tuf</code> <code>TUF</code> <p>TUF defines the configuration to fetch sigstore root</p> <code>annotations</code> <code>map[string]string</code> <p>Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Credentials","title":"Credentials","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> </ul> Field Type Required Inline Description <code>allowInsecureRegistry</code> <code>bool</code> <p>AllowInsecureRegistry allows insecure access to a registry.</p> <code>providers</code> <code>[]CredentialsProvidersType</code> <p>Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.</p> <code>secrets</code> <code>[]string</code> <p>Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-CredentialsProvidersType","title":"CredentialsProvidersType","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>Credentials</li> </ul> <p>CredentialsProvidersType provides the list of credential providers required.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-DeletingPolicySpec","title":"DeletingPolicySpec","text":"<p>Appears in:</p> <ul> <li>DeletingPolicy</li> </ul> <p>DeletingPolicySpec is the specification of the desired behavior of the DeletingPolicy.</p> Field Type Required Inline Description <code>matchConstraints</code> <code>admissionregistration/v1.MatchResources</code> <p>MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches all Constraints. Required.</p> <code>conditions</code> <code>[]admissionregistration/v1.MatchCondition</code> <p>Conditions is a list of conditions that must be met for a resource to be deleted. Conditions filter resources that have already been matched by the match constraints, namespaceSelector, and objectSelector. An empty list of conditions matches all resources. There are a maximum of 64 conditions allowed. The exact matching logic is (in order):   1. If ANY condition evaluates to FALSE, the policy is skipped.   2. If ALL conditions evaluate to TRUE, the policy is executed.</p> <code>variables</code> <code>[]admissionregistration/v1.Variable</code> <p>Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy. The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.</p> <code>schedule</code> <code>string</code> <p>The schedule in Cron format Required.</p> <code>deletionPropagationPolicy</code> <code>meta/v1.DeletionPropagation</code> <p>DeletionPropagationPolicy defines how resources will be deleted (Foreground, Background, Orphan).</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-DeletingPolicyStatus","title":"DeletingPolicyStatus","text":"<p>Appears in:</p> <ul> <li>DeletingPolicy</li> </ul> Field Type Required Inline Description <code>conditionStatus</code> <code>ConditionStatus</code> No description provided. <code>lastExecutionTime</code> <code>meta/v1.Time</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-EvaluationConfiguration","title":"EvaluationConfiguration","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> <li>ValidatingPolicySpec</li> </ul> Field Type Required Inline Description <code>mode</code> <code>EvaluationMode</code> <p>Mode is the mode of policy evaluation. Allowed values are \"Kubernetes\" or \"JSON\". Optional. Default value is \"Kubernetes\".</p> <code>admission</code> <code>AdmissionConfiguration</code> <p>Admission controls policy evaluation during admission.</p> <code>background</code> <code>BackgroundConfiguration</code> <p>Background  controls policy evaluation during background scan.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-EvaluationMode","title":"EvaluationMode","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>EvaluationConfiguration</li> </ul>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-GenerateExistingConfiguration","title":"GenerateExistingConfiguration","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicyEvaluationConfiguration</li> </ul> <p>GenerateExistingConfiguration defines the configuration for generating resources for existing triggers.</p> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled controls whether to trigger the policy for existing resources If is set to \"true\" the policy will be triggered and applied to existing matched resources. Optional. Defaults to \"false\" if not specified.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-GeneratingPolicyEvaluationConfiguration","title":"GeneratingPolicyEvaluationConfiguration","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicySpec</li> </ul> Field Type Required Inline Description <code>admission</code> <code>AdmissionConfiguration</code> <p>Admission controls policy evaluation during admission.</p> <code>generateExisting</code> <code>GenerateExistingConfiguration</code> <p>GenerateExisting defines the configuration for generating resources for existing triggeres.</p> <code>synchronize</code> <code>SynchronizationConfiguration</code> <p>Synchronization defines the configuration for the synchronization of generated resources.</p> <code>orphanDownstreamOnPolicyDelete</code> <code>OrphanDownstreamOnPolicyDeleteConfiguration</code> <p>OrphanDownstreamOnPolicyDelete defines the configuration for orphaning downstream resources on policy delete.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-GeneratingPolicySpec","title":"GeneratingPolicySpec","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicy</li> </ul> <p>GeneratingPolicySpec is the specification of the desired behavior of the GeneratingPolicy.</p> Field Type Required Inline Description <code>matchConstraints</code> <code>admissionregistration/v1.MatchResources</code> <p>MatchConstraints specifies what resources will trigger this policy. The AdmissionPolicy cares about a request if it matches all Constraints. Required.</p> <code>matchConditions</code> <code>[]admissionregistration/v1.MatchCondition</code> <p>MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed. If a parameter object is provided, it can be accessed via the <code>params</code> handle in the same manner as validation expressions. The exact matching logic is (in order):   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.   3. If any matchCondition evaluates to an error (but none are FALSE):      - If failurePolicy=Fail, reject the request      - If failurePolicy=Ignore, the policy is skipped</p> <code>variables</code> <code>[]admissionregistration/v1.Variable</code> <p>Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy. The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.</p> <code>evaluation</code> <code>GeneratingPolicyEvaluationConfiguration</code> <p>EvaluationConfiguration defines the configuration for the policy evaluation.</p> <code>webhookConfiguration</code> <code>WebhookConfiguration</code> <p>WebhookConfiguration defines the configuration for the webhook.</p> <code>generate</code> <code>[]Generation</code> <p>Generation defines a set of CEL expressions that will be evaluated to generate resources. Required.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-GeneratingPolicyStatus","title":"GeneratingPolicyStatus","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicy</li> </ul> Field Type Required Inline Description <code>conditionStatus</code> <code>ConditionStatus</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Generation","title":"Generation","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicySpec</li> </ul> <p>Generation defines the configuration for the generation of resources.</p> Field Type Required Inline Description <code>expression</code> <code>string</code> <p>Expression is a CEL expression that takes a list of resources to be generated.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Identity","title":"Identity","text":"<p>Appears in:</p> <ul> <li>Keyless</li> </ul> <p>Identity may contain the issuer and/or the subject found in the transparency log. Issuer/Subject uses a strict match, while IssuerRegExp and SubjectRegExp apply a regexp for matching.</p> Field Type Required Inline Description <code>issuer</code> <code>string</code> <p>Issuer defines the issuer for this identity.</p> <code>subject</code> <code>string</code> <p>Subject defines the subject for this identity.</p> <code>issuerRegExp</code> <code>string</code> <p>IssuerRegExp specifies a regular expression to match the issuer for this identity.</p> <code>subjectRegExp</code> <code>string</code> <p>SubjectRegExp specifies a regular expression to match the subject for this identity.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ImageExtractor","title":"ImageExtractor","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> </ul> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name is the name for this imageList. It is used to refer to the images in verification block as images. <code>expression</code> <code>string</code> <p>Expression defines CEL expression to extract images from the resource.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ImageValidatingPolicyAutogen","title":"ImageValidatingPolicyAutogen","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicyAutogenStatus</li> </ul> Field Type Required Inline Description <code>targets</code> <code>[]Target</code> No description provided. <code>spec</code> <code>ImageValidatingPolicySpec</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ImageValidatingPolicyAutogenConfiguration","title":"ImageValidatingPolicyAutogenConfiguration","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> </ul> Field Type Required Inline Description <code>podControllers</code> <code>PodControllersGenerationConfiguration</code> <p>PodControllers specifies whether to generate a pod controllers rules.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ImageValidatingPolicyAutogenStatus","title":"ImageValidatingPolicyAutogenStatus","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicyStatus</li> </ul> Field Type Required Inline Description <code>configs</code> <code>map[string]ImageValidatingPolicyAutogen</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ImageValidatingPolicySpec","title":"ImageValidatingPolicySpec","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicy</li> <li>ImageValidatingPolicyAutogen</li> </ul> <p>ImageValidatingPolicySpec is the specification of the desired behavior of the ImageValidatingPolicy.</p> Field Type Required Inline Description <code>matchConstraints</code> <code>admissionregistration/v1.MatchResources</code> <p>MatchConstraints specifies what resources this policy is designed to validate.</p> <code>failurePolicy</code> <code>admissionregistration/v1.FailurePolicyType</code> <p>FailurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.</p> <code>auditAnnotations</code> <code>[]admissionregistration/v1.AuditAnnotation</code> <p>auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.</p> <code>validationActions</code> <code>[]admissionregistration/v1.ValidationAction</code> <p>ValidationAction specifies the action to be taken when the matched resource violates the policy. Required.</p> <code>matchConditions</code> <code>[]admissionregistration/v1.MatchCondition</code> <p>MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.</p> <code>variables</code> <code>[]admissionregistration/v1.Variable</code> <p>Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression.</p> <code>validationConfigurations</code> <code>ValidationConfiguration</code> <p>ValidationConfigurations defines settings for mutating and verifying image digests, and enforcing image verification through signatures.</p> <code>matchImageReferences</code> <code>[]MatchImageReference</code> <p>MatchImageReferences is a list of Glob and CELExpressions to match images. Any image that matches one of the rules is considered for validation Any image that does not match a rule is skipped, even when they are passed as arguments to image verification functions</p> <code>credentials</code> <code>Credentials</code> <p>Credentials provides credentials that will be used for authentication with registry.</p> <code>images</code> <code>[]ImageExtractor</code> <p>ImageExtractors is a list of CEL expression to extract images from the resource</p> <code>attestors</code> <code>[]Attestor</code> <p>Attestors provides a list of trusted authorities.</p> <code>attestations</code> <code>[]Attestation</code> <p>Attestations provides a list of image metadata to verify</p> <code>validations</code> <code>[]admissionregistration/v1.Validation</code> <p>Validations contain CEL expressions which is used to apply the image validation checks.</p> <code>webhookConfiguration</code> <code>WebhookConfiguration</code> <p>WebhookConfiguration defines the configuration for the webhook.</p> <code>evaluation</code> <code>EvaluationConfiguration</code> <p>EvaluationConfiguration defines the configuration for the policy evaluation.</p> <code>autogen</code> <code>ImageValidatingPolicyAutogenConfiguration</code> <p>AutogenConfiguration defines the configuration for the generation controller.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ImageValidatingPolicyStatus","title":"ImageValidatingPolicyStatus","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicy</li> </ul> Field Type Required Inline Description <code>conditionStatus</code> <code>ConditionStatus</code> No description provided. <code>autogen</code> <code>ImageValidatingPolicyAutogenStatus</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-InToto","title":"InToto","text":"<p>Appears in:</p> <ul> <li>Attestation</li> </ul> Field Type Required Inline Description <code>type</code> <code>string</code> <p>Type defines the type of attestation contained within the statement.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Key","title":"Key","text":"<p>Appears in:</p> <ul> <li>Cosign</li> </ul> <p>A Key must specify only one of CEL, Data or KMS</p> Field Type Required Inline Description <code>data</code> <code>string</code> <p>Data contains the inline public key</p> <code>kms</code> <code>string</code> <p>KMS contains the KMS url of the public key Supported formats differ based on the KMS system used.</p> <code>hashAlgorithm</code> <code>string</code> <p>HashAlgorithm specifues signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512. Defaults to sha256.</p> <code>expression</code> <code>string</code> <p>Expression is a Expression expression that returns the public key.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Keyless","title":"Keyless","text":"<p>Appears in:</p> <ul> <li>Cosign</li> </ul> <p>Keyless contains location of the validating certificate and the identities against which to verify.</p> Field Type Required Inline Description <code>identities</code> <code>[]Identity</code> <p>Identities sets a list of identities.</p> <code>roots</code> <code>string</code> <p>Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MAPGenerationConfiguration","title":"MAPGenerationConfiguration","text":"<p>Appears in:</p> <ul> <li>MutatingPolicyAutogenConfiguration</li> </ul> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled specifies whether to generate a Kubernetes MutatingAdmissionPolicy. Optional. Defaults to \"false\" if not specified.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MatchImageReference","title":"MatchImageReference","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> </ul> <p>MatchImageReference defines a Glob or a CEL expression for matching images</p> Field Type Required Inline Description <code>glob</code> <code>string</code> <p>Glob defines a globbing pattern for matching images</p> <code>expression</code> <code>string</code> <p>Expression defines CEL Expressions for matching images</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutateExistingConfiguration","title":"MutateExistingConfiguration","text":"<p>Appears in:</p> <ul> <li>MutatingPolicyEvaluationConfiguration</li> </ul> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled enables mutation of existing resources. Default is false. When spec.targetMatchConstraints is not defined, Kyverno mutates existing resources matched in spec.matchConstraints.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutatingPolicyAutogen","title":"MutatingPolicyAutogen","text":"<p>Appears in:</p> <ul> <li>MutatingPolicyAutogenStatus</li> </ul> Field Type Required Inline Description <code>targets</code> <code>[]Target</code> No description provided. <code>spec</code> <code>MutatingPolicySpec</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutatingPolicyAutogenConfiguration","title":"MutatingPolicyAutogenConfiguration","text":"<p>Appears in:</p> <ul> <li>MutatingPolicySpec</li> </ul> Field Type Required Inline Description <code>podControllers</code> <code>PodControllersGenerationConfiguration</code> <p>PodControllers specifies whether to generate a pod controllers rules.</p> <code>mutatingAdmissionPolicy</code> <code>MAPGenerationConfiguration</code> <p>MutatingAdmissionPolicy specifies whether to generate a Kubernetes MutatingAdmissionPolicy.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutatingPolicyAutogenStatus","title":"MutatingPolicyAutogenStatus","text":"<p>Appears in:</p> <ul> <li>MutatingPolicyStatus</li> </ul> Field Type Required Inline Description <code>configs</code> <code>map[string]MutatingPolicyAutogen</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutatingPolicyEvaluationConfiguration","title":"MutatingPolicyEvaluationConfiguration","text":"<p>Appears in:</p> <ul> <li>MutatingPolicySpec</li> </ul> Field Type Required Inline Description <code>admission</code> <code>AdmissionConfiguration</code> <p>Admission controls policy evaluation during admission.</p> <code>mutateExisting</code> <code>MutateExistingConfiguration</code> <p>MutateExisting controls whether existing resources are mutated.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutatingPolicySpec","title":"MutatingPolicySpec","text":"<p>Appears in:</p> <ul> <li>MutatingPolicy</li> <li>MutatingPolicyAutogen</li> </ul> <p>MutatingPolicySpec is the specification of the desired behavior of the MutatingPolicy.</p> Field Type Required Inline Description <code>matchConstraints</code> <code>admissionregistration/v1alpha1.MatchResources</code> <p>MatchConstraints specifies what resources this policy is designed to evaluate. The AdmissionPolicy cares about a request if it matches all Constraints. Required.</p> <code>failurePolicy</code> <code>admissionregistration/v1alpha1.FailurePolicyType</code> <p>failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings. failurePolicy does not define how validations that evaluate to false are handled. When failurePolicy is set to Fail, the validationActions field define how failures are enforced. Allowed values are Ignore or Fail. Defaults to Fail.</p> <code>matchConditions</code> <code>[]admissionregistration/v1alpha1.MatchCondition</code> <p>MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed. If a parameter object is provided, it can be accessed via the <code>params</code> handle in the same manner as validation expressions. The exact matching logic is (in order):   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.   3. If any matchCondition evaluates to an error (but none are FALSE):      - If failurePolicy=Fail, reject the request      - If failurePolicy=Ignore, the policy is skipped</p> <code>variables</code> <code>[]admissionregistration/v1alpha1.Variable</code> <p>Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy. The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.</p> <code>autogen</code> <code>MutatingPolicyAutogenConfiguration</code> <p>AutogenConfiguration defines the configuration for the generation controller.</p> <code>targetMatchConstraints</code> <code>admissionregistration/v1alpha1.MatchResources</code> <p>TargetMatchConstraints specifies what target mutation resources this policy is designed to evaluate.</p> <code>mutations</code> <code>[]admissionregistration/v1alpha1.Mutation</code> <p>mutations contain operations to perform on matching objects. mutations may not be empty; a minimum of one mutation is required. mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy. The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.</p> <code>webhookConfiguration</code> <code>WebhookConfiguration</code> <p>WebhookConfiguration defines the configuration for the webhook.</p> <code>evaluation</code> <code>MutatingPolicyEvaluationConfiguration</code> <p>EvaluationConfiguration defines the configuration for mutating policy evaluation.</p> <code>reinvocationPolicy</code> <code>admissionregistration/v1.ReinvocationPolicyType</code> <p>reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\". Never: These mutations will not be called more than once per binding in a single admission evaluation. IfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.  Mutations are only reinvoked when mutations change the object after this mutation is invoked. Required.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-MutatingPolicyStatus","title":"MutatingPolicyStatus","text":"<p>Appears in:</p> <ul> <li>MutatingPolicy</li> </ul> Field Type Required Inline Description <code>conditionStatus</code> <code>ConditionStatus</code> No description provided. <code>autogen</code> <code>MutatingPolicyAutogenStatus</code> No description provided. <code>generated</code> <code>bool</code> <p>Generated indicates whether a MutatingAdmissionPolicy is generated from the policy or not</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Notary","title":"Notary","text":"<p>Appears in:</p> <ul> <li>Attestor</li> </ul> <p>Notary defines attestor configuration for Notary based signatures</p> Field Type Required Inline Description <code>certs</code> <code>StringOrExpression</code> <p>Certs define the cert chain for Notary signature verification</p> <code>tsaCerts</code> <code>StringOrExpression</code> <p>TSACerts define the cert chain for verifying timestamps of notary signature</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-OrphanDownstreamOnPolicyDeleteConfiguration","title":"OrphanDownstreamOnPolicyDeleteConfiguration","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicyEvaluationConfiguration</li> </ul> <p>OrphanDownstreamOnPolicyDeleteConfiguration defines the configuration for orphaning downstream resources on policy delete.</p> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled controls whether generated resources should be deleted when the policy that generated them is deleted with synchronization enabled. This option is only applicable to generate rules of the data type. Optional. Defaults to \"false\" if not specified.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-PodControllersGenerationConfiguration","title":"PodControllersGenerationConfiguration","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicyAutogenConfiguration</li> <li>MutatingPolicyAutogenConfiguration</li> <li>ValidatingPolicyAutogenConfiguration</li> </ul> Field Type Required Inline Description <code>controllers</code> <code>[]string</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-PolicyExceptionSpec","title":"PolicyExceptionSpec","text":"<p>Appears in:</p> <ul> <li>PolicyException</li> </ul> <p>PolicyExceptionSpec stores policy exception spec</p> Field Type Required Inline Description <code>policyRefs</code> <code>[]PolicyRef</code> <p>PolicyRefs identifies the policies to which the exception is applied.</p> <code>matchConditions</code> <code>[]admissionregistration/v1.MatchCondition</code> <p>MatchConditions is a list of CEL expressions that must be met for a resource to be excluded.</p> <code>images</code> <code>[]string</code> <p>Images specifies container images to be excluded from policy evaluation. These excluded images can be referenced in CEL expressions via <code>exceptions.allowedImages</code>.</p> <code>allowedValues</code> <code>[]string</code> <p>AllowedValues specifies values that can be used in CEL expressions to bypass policy checks. These values can be referenced in CEL expressions via <code>exceptions.allowedValues</code>.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-PolicyRef","title":"PolicyRef","text":"<p>Appears in:</p> <ul> <li>PolicyExceptionSpec</li> </ul> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name is the name of the policy</p> <code>kind</code> <code>string</code> <p>Kind is the kind of the policy</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Referrer","title":"Referrer","text":"<p>Appears in:</p> <ul> <li>Attestation</li> </ul> Field Type Required Inline Description <code>type</code> <code>string</code> <p>Type defines the type of attestation attached to the image.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Source","title":"Source","text":"<p>Appears in:</p> <ul> <li>Cosign</li> </ul> <p>Source specifies the location of the signature / attestations.</p> Field Type Required Inline Description <code>repository</code> <code>string</code> <p>Repository defines the location from where to pull the signature / attestations.</p> <code>PullSecrets</code> <code>[]core/v1.LocalObjectReference</code> <p>SignaturePullSecrets is an optional list of references to secrets in the same namespace as the deploying resource for pulling any of the signatures used by this Source.</p> <code>tagPrefix</code> <code>string</code> <p>TagPrefix is an optional prefix that signature and attestations have. This is the 'tag based discovery' and in the future once references are fully supported that should likely be the preferred way to handle these.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-StringOrExpression","title":"StringOrExpression","text":"<p>Appears in:</p> <ul> <li>Certificate</li> <li>Notary</li> </ul> <p>StringOrExpression contains either a raw string input or a CEL expression</p> Field Type Required Inline Description <code>value</code> <code>string</code> <p>Value defines the raw string input.</p> <code>expression</code> <code>string</code> <p>Expression defines the a CEL expression input.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-SynchronizationConfiguration","title":"SynchronizationConfiguration","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicyEvaluationConfiguration</li> </ul> <p>SynchronizationConfiguration defines the configuration for the synchronization of generated resources.</p> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \"true\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \"false\" if not specified.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-TUF","title":"TUF","text":"<p>Appears in:</p> <ul> <li>Cosign</li> </ul> <p>TUF defines the configuration to fetch sigstore root</p> Field Type Required Inline Description <code>root</code> <code>TUFRoot</code> <p>Root defines the path or data of the trusted root</p> <code>mirror</code> <code>string</code> <p>Mirror is the base URL of Sigstore TUF repository</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-TUFRoot","title":"TUFRoot","text":"<p>Appears in:</p> <ul> <li>TUF</li> </ul> <p>TUFRoot defines the path or data of the trusted root</p> Field Type Required Inline Description <code>path</code> <code>string</code> <p>Path is the URL or File location of the TUF root</p> <code>data</code> <code>string</code> <p>Data is the base64 encoded TUF root</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-Target","title":"Target","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicyAutogen</li> <li>MutatingPolicyAutogen</li> <li>ValidatingPolicyAutogen</li> </ul> Field Type Required Inline Description <code>group</code> <code>string</code> No description provided. <code>version</code> <code>string</code> No description provided. <code>resource</code> <code>string</code> No description provided. <code>kind</code> <code>string</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ValidatingPolicyAutogen","title":"ValidatingPolicyAutogen","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicyAutogenStatus</li> </ul> Field Type Required Inline Description <code>targets</code> <code>[]Target</code> No description provided. <code>spec</code> <code>ValidatingPolicySpec</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ValidatingPolicyAutogenConfiguration","title":"ValidatingPolicyAutogenConfiguration","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicySpec</li> </ul> Field Type Required Inline Description <code>podControllers</code> <code>PodControllersGenerationConfiguration</code> <p>PodControllers specifies whether to generate a pod controllers rules.</p> <code>validatingAdmissionPolicy</code> <code>VapGenerationConfiguration</code> <p>ValidatingAdmissionPolicy specifies whether to generate a Kubernetes ValidatingAdmissionPolicy.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ValidatingPolicyAutogenStatus","title":"ValidatingPolicyAutogenStatus","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicyStatus</li> </ul> Field Type Required Inline Description <code>configs</code> <code>map[string]ValidatingPolicyAutogen</code> No description provided."},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ValidatingPolicySpec","title":"ValidatingPolicySpec","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicy</li> <li>ValidatingPolicyAutogen</li> </ul> <p>ValidatingPolicySpec is the specification of the desired behavior of the ValidatingPolicy.</p> Field Type Required Inline Description <code>matchConstraints</code> <code>admissionregistration/v1.MatchResources</code> <p>MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches all Constraints. Required.</p> <code>validations</code> <code>[]admissionregistration/v1.Validation</code> <p>Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.</p> <code>failurePolicy</code> <code>admissionregistration/v1.FailurePolicyType</code> <p>failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings. failurePolicy does not define how validations that evaluate to false are handled. When failurePolicy is set to Fail, the validationActions field define how failures are enforced. Allowed values are Ignore or Fail. Defaults to Fail.</p> <code>auditAnnotations</code> <code>[]admissionregistration/v1.AuditAnnotation</code> <p>auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.</p> <code>matchConditions</code> <code>[]admissionregistration/v1.MatchCondition</code> <p>MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed. If a parameter object is provided, it can be accessed via the <code>params</code> handle in the same manner as validation expressions. The exact matching logic is (in order):   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.   3. If any matchCondition evaluates to an error (but none are FALSE):      - If failurePolicy=Fail, reject the request      - If failurePolicy=Ignore, the policy is skipped</p> <code>variables</code> <code>[]admissionregistration/v1.Variable</code> <p>Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy. The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.</p> <code>autogen</code> <code>ValidatingPolicyAutogenConfiguration</code> <p>AutogenConfiguration defines the configuration for the generation controller.</p> <code>validationActions</code> <code>[]admissionregistration/v1.ValidationAction</code> <p>ValidationAction specifies the action to be taken when the matched resource violates the policy. Required.</p> <code>webhookConfiguration</code> <code>WebhookConfiguration</code> <p>WebhookConfiguration defines the configuration for the webhook.</p> <code>evaluation</code> <code>EvaluationConfiguration</code> <p>EvaluationConfiguration defines the configuration for the policy evaluation.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ValidatingPolicyStatus","title":"ValidatingPolicyStatus","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicy</li> </ul> Field Type Required Inline Description <code>conditionStatus</code> <code>ConditionStatus</code> No description provided. <code>autogen</code> <code>ValidatingPolicyAutogenStatus</code> No description provided. <code>generated</code> <code>bool</code> <p>Generated indicates whether a ValidatingAdmissionPolicy/MutatingAdmissionPolicy is generated from the policy or not</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-ValidationConfiguration","title":"ValidationConfiguration","text":"<p>Appears in:</p> <ul> <li>ImageValidatingPolicySpec</li> </ul> Field Type Required Inline Description <code>mutateDigest</code> <code>bool</code> <p>MutateDigest enables replacement of image tags with digests. Defaults to true.</p> <code>verifyDigest</code> <code>bool</code> <p>VerifyDigest validates that images have a digest.</p> <code>required</code> <code>bool</code> <p>Required validates that images are verified, i.e., have passed a signature or attestation check.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-VapGenerationConfiguration","title":"VapGenerationConfiguration","text":"<p>Appears in:</p> <ul> <li>ValidatingPolicyAutogenConfiguration</li> </ul> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled specifies whether to generate a Kubernetes ValidatingAdmissionPolicy. Optional. Defaults to \"false\" if not specified.</p>"},{"location":"reference/apis/policies.kyverno.io.v1alpha1/#policies-kyverno-io-v1alpha1-WebhookConfiguration","title":"WebhookConfiguration","text":"<p>Appears in:</p> <ul> <li>GeneratingPolicySpec</li> <li>ImageValidatingPolicySpec</li> <li>MutatingPolicySpec</li> <li>ValidatingPolicySpec</li> </ul> Field Type Required Inline Description <code>timeoutSeconds</code> <code>int32</code> <p>TimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.</p>"},{"location":"reference/commands/kyverno-envoy-plugin/","title":"kyverno-envoy-plugin","text":""},{"location":"reference/commands/kyverno-envoy-plugin/#kyverno-envoy-plugin","title":"kyverno-envoy-plugin","text":"<p>kyverno-envoy-plugin is a plugin for Envoy</p> <pre><code>kyverno-envoy-plugin [flags]\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin/#options","title":"Options","text":"<pre><code>  -h, --help   help for kyverno-envoy-plugin\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin run    - Run authz-server controller</li> <li>kyverno-envoy-plugin serve    - Run Kyverno Envoy Plugin servers</li> <li>kyverno-envoy-plugin version    - Print the version informations</li> </ul>"},{"location":"reference/commands/kyverno-envoy-plugin_run/","title":"kyverno-envoy-plugin run","text":""},{"location":"reference/commands/kyverno-envoy-plugin_run/#kyverno-envoy-plugin-run","title":"kyverno-envoy-plugin run","text":"<p>Run authz-server controller</p> <pre><code>kyverno-envoy-plugin run [flags]\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_run/#options","title":"Options","text":"<pre><code>  -h, --help                                help for run\n      --kube-as string                      Username to impersonate for the operation\n      --kube-as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                  UID to impersonate for the operation\n      --kube-certificate-authority string   Path to a cert file for the certificate authority\n      --kube-client-certificate string      Path to a client certificate file for TLS\n      --kube-client-key string              Path to a client key file for TLS\n      --kube-cluster string                 The name of the kubeconfig cluster to use\n      --kube-context string                 The name of the kubeconfig context to use\n      --kube-disable-compression            If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string               If present, the namespace scope for this CLI request\n      --kube-password string                Password for basic authentication to the API server\n      --kube-proxy-url string               If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                  The address and port of the Kubernetes API server\n      --kube-tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                   Bearer token for authentication to the API server\n      --kube-user string                    The name of the kubeconfig user to use\n      --kube-username string                Username for basic authentication to the API server\n      --leader-election                     Enable leader election\n      --leader-election-id string           Leader election ID\n      --metrics-address string              Address to listen on for metrics (default \":9082\")\n      --probes-address string               Address to listen on for health checks (default \":9080\")\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_run/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin    - kyverno-envoy-plugin is a plugin for Envoy</li> </ul>"},{"location":"reference/commands/kyverno-envoy-plugin_serve/","title":"kyverno-envoy-plugin serve","text":""},{"location":"reference/commands/kyverno-envoy-plugin_serve/#kyverno-envoy-plugin-serve","title":"kyverno-envoy-plugin serve","text":"<p>Run Kyverno Envoy Plugin servers</p>"},{"location":"reference/commands/kyverno-envoy-plugin_serve/#options","title":"Options","text":"<pre><code>  -h, --help   help for serve\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin    - kyverno-envoy-plugin is a plugin for Envoy</li> <li>kyverno-envoy-plugin serve authz-server  - Start the Kyverno Authz Server</li> <li>kyverno-envoy-plugin serve control-plane    - Start the Kyverno authorizer control plane</li> <li>kyverno-envoy-plugin serve sidecar-injector  - Start the Kubernetes mutating webhook injecting Kyverno Authz Server sidecars into pod containers</li> <li>kyverno-envoy-plugin serve validation-webhook  - Start the validation webhook</li> </ul>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_authz-server/","title":"kyverno-envoy-plugin serve authz-server","text":""},{"location":"reference/commands/kyverno-envoy-plugin_serve_authz-server/#kyverno-envoy-plugin-serve-authz-server","title":"kyverno-envoy-plugin serve authz-server","text":"<p>Start the Kyverno Authz Server</p> <pre><code>kyverno-envoy-plugin serve authz-server [flags]\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_authz-server/#options","title":"Options","text":"<pre><code>      --allow-insecure-registry                    Allow insecure registry\n      --control-plane-address string               Control plane address\n      --control-plane-max-dial-interval duration   Duration to wait before stopping attempts of sending a policy to a client (default 8s)\n      --control-plane-reconnect-wait duration      Duration to wait before retrying connecting to the control plane (default 3s)\n      --external-policy-source stringArray         External policy sources\n      --grpc-address string                        Address to listen on (default \":9081\")\n      --grpc-network string                        Network to listen on (default \"tcp\")\n      --health-check-interval duration             Interval for sending health checks (default 30s)\n  -h, --help                                       help for authz-server\n      --http-auth-server-address string            Address to serve the http authorization server on (default \":9083\")\n      --image-pull-secret stringArray              Image pull secrets\n      --kube-as string                             Username to impersonate for the operation\n      --kube-as-group stringArray                  Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                         UID to impersonate for the operation\n      --kube-certificate-authority string          Path to a cert file for the certificate authority\n      --kube-client-certificate string             Path to a client certificate file for TLS\n      --kube-client-key string                     Path to a client key file for TLS\n      --kube-cluster string                        The name of the kubeconfig cluster to use\n      --kube-context string                        The name of the kubeconfig context to use\n      --kube-disable-compression                   If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify              If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string                      If present, the namespace scope for this CLI request\n      --kube-password string                       Password for basic authentication to the API server\n      --kube-policy-source                         Enable in-cluster kubernetes policy source (default true)\n      --kube-proxy-url string                      If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string                The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                         The address and port of the Kubernetes API server\n      --kube-tls-server-name string                If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                          Bearer token for authentication to the API server\n      --kube-user string                           The name of the kubeconfig user to use\n      --kube-username string                       Username for basic authentication to the API server\n      --leader-election                            Enable leader election\n      --leader-election-id string                  Leader election ID\n      --metrics-address string                     Address to listen on for metrics (default \":9082\")\n      --nested-request                             Expect the requests to validate to be in the body of the original request\n      --probes-address string                      Address to listen on for health checks (default \":9080\")\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_authz-server/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin serve    - Run Kyverno Envoy Plugin servers</li> </ul>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_control-plane/","title":"kyverno-envoy-plugin serve control-plane","text":""},{"location":"reference/commands/kyverno-envoy-plugin_serve_control-plane/#kyverno-envoy-plugin-serve-control-plane","title":"kyverno-envoy-plugin serve control-plane","text":"<p>Start the Kyverno authorizer control plane</p> <pre><code>kyverno-envoy-plugin serve control-plane [flags]\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_control-plane/#options","title":"Options","text":"<pre><code>      --client-flush-interval duration          Interval for how often to remove dead client connections (default 3m0s)\n      --grpc-address string                     Address to listen on (default \":9081\")\n      --grpc-network string                     Network to listen on (default \"tcp\")\n  -h, --help                                    help for control-plane\n      --initial-send-wait duration              Duration to wait before retrying a send to a client (default 5s)\n      --kube-as string                          Username to impersonate for the operation\n      --kube-as-group stringArray               Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                      UID to impersonate for the operation\n      --kube-certificate-authority string       Path to a cert file for the certificate authority\n      --kube-client-certificate string          Path to a client certificate file for TLS\n      --kube-client-key string                  Path to a client key file for TLS\n      --kube-cluster string                     The name of the kubeconfig cluster to use\n      --kube-context string                     The name of the kubeconfig context to use\n      --kube-disable-compression                If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify           If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string                   If present, the namespace scope for this CLI request\n      --kube-password string                    Password for basic authentication to the API server\n      --kube-proxy-url string                   If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string             The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                      The address and port of the Kubernetes API server\n      --kube-tls-server-name string             If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                       Bearer token for authentication to the API server\n      --kube-user string                        The name of the kubeconfig user to use\n      --kube-username string                    Username for basic authentication to the API server\n      --leader-election                         Enable leader election\n      --leader-election-id string               Leader election ID\n      --max-client-inactive-duration duration   Duration to wait before declaring a client as inactive (default 4m0s)\n      --max-send-interval duration              Duration to wait before stopping attempts of sending a policy to a client (default 10s)\n      --metrics-address string                  Address to listen on for metrics (default \":9082\")\n      --probes-address string                   Address to listen on for health checks (default \":9080\")\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_control-plane/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin serve    - Run Kyverno Envoy Plugin servers</li> </ul>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_sidecar-injector/","title":"kyverno-envoy-plugin serve sidecar-injector","text":""},{"location":"reference/commands/kyverno-envoy-plugin_serve_sidecar-injector/#kyverno-envoy-plugin-serve-sidecar-injector","title":"kyverno-envoy-plugin serve sidecar-injector","text":"<p>Start the Kubernetes mutating webhook injecting Kyverno Authz Server sidecars into pod containers</p> <pre><code>kyverno-envoy-plugin serve sidecar-injector [flags]\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_sidecar-injector/#options","title":"Options","text":"<pre><code>      --address string       Address to listen on (default \":9443\")\n      --cert-file string     File containing tls certificate\n      --config-file string   File containing the sidecar config\n  -h, --help                 help for sidecar-injector\n      --key-file string      File containing tls private key\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_sidecar-injector/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin serve    - Run Kyverno Envoy Plugin servers</li> </ul>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_validation-webhook/","title":"kyverno-envoy-plugin serve validation-webhook","text":""},{"location":"reference/commands/kyverno-envoy-plugin_serve_validation-webhook/#kyverno-envoy-plugin-serve-validation-webhook","title":"kyverno-envoy-plugin serve validation-webhook","text":"<p>Start the validation webhook</p> <pre><code>kyverno-envoy-plugin serve validation-webhook [flags]\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_validation-webhook/#options","title":"Options","text":"<pre><code>  -h, --help                                help for validation-webhook\n      --kube-as string                      Username to impersonate for the operation\n      --kube-as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                  UID to impersonate for the operation\n      --kube-certificate-authority string   Path to a cert file for the certificate authority\n      --kube-client-certificate string      Path to a client certificate file for TLS\n      --kube-client-key string              Path to a client key file for TLS\n      --kube-cluster string                 The name of the kubeconfig cluster to use\n      --kube-context string                 The name of the kubeconfig context to use\n      --kube-disable-compression            If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string               If present, the namespace scope for this CLI request\n      --kube-password string                Password for basic authentication to the API server\n      --kube-proxy-url string               If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                  The address and port of the Kubernetes API server\n      --kube-tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                   Bearer token for authentication to the API server\n      --kube-user string                    The name of the kubeconfig user to use\n      --kube-username string                Username for basic authentication to the API server\n      --metrics-address string              Address to listen on for metrics (default \":9082\")\n      --probes-address string               Address to listen on for health checks (default \":9080\")\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_serve_validation-webhook/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin serve    - Run Kyverno Envoy Plugin servers</li> </ul>"},{"location":"reference/commands/kyverno-envoy-plugin_version/","title":"kyverno-envoy-plugin version","text":""},{"location":"reference/commands/kyverno-envoy-plugin_version/#kyverno-envoy-plugin-version","title":"kyverno-envoy-plugin version","text":"<p>Print the version informations</p> <pre><code>kyverno-envoy-plugin version [flags]\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"reference/commands/kyverno-envoy-plugin_version/#see-also","title":"SEE ALSO","text":"<ul> <li>kyverno-envoy-plugin    - kyverno-envoy-plugin is a plugin for Envoy</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>If you didn't read the Quick start section yet, we really recommend giving it a try to discover and familiarise with the Kyverno Envoy Plugin components first.</p> <ul> <li>Quick start overview</li> <li>Envoy integration guide</li> <li>HTTP authorization guide</li> <li>Sidecar injector guide</li> </ul>"},{"location":"tutorials/envoy-gateway/","title":"Envoy Gateway","text":"<p>Envoy Gateway is an open source project for managing Envoy Proxy as a standalone or Kubernetes-based application gateway. Gateway API resources are used to dynamically provision and configure the managed Envoy Proxies.</p> <p>This tutorial shows how Envoy Gateway can be configured to delegate authorization decisions to the Kyverno Authz Server.</p>"},{"location":"tutorials/envoy-gateway/#setup","title":"Setup","text":""},{"location":"tutorials/envoy-gateway/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install Envoy Gateway the Kyverno Authz Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"tutorials/envoy-gateway/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"tutorials/envoy-gateway/#install-envoy-gateway","title":"Install Envoy Gateway","text":"<p>First we need to install Envoy Gateway in the cluster.</p> <pre><code># install envoy gateway\nhelm install envoy-gateway \\\n  --namespace envoy-gateway-system --create-namespace \\\n  --wait \\\n  --version v1.2.2 oci://docker.io/envoyproxy/gateway-helm\n</code></pre>"},{"location":"tutorials/envoy-gateway/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# deploy the httpbin application\nkubectl apply \\\n  -n demo \\\n  -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml\n</code></pre>"},{"location":"tutorials/envoy-gateway/#create-a-gatewayclass-and-a-gateway","title":"Create a GatewayClass and a Gateway","text":"<p>With Envoy Gateway installed we can now create a <code>Gateway</code>. To do so we will also create a dedicated <code>GatewayClass</code>.</p> <p>Depending on your setup you will potentially need to create an <code>EnvoyProxy</code> resource to customize the way Envoy Gateway will create the underlying <code>Service</code>. The script below creates one to set the name and type of the service because the kind cluster created in the first step doesn't come with load balancer support.</p> <pre><code># create a gateway\nkubectl apply -n demo -f - &lt;&lt;EOF\napiVersion: gateway.envoyproxy.io/v1alpha1\nkind: EnvoyProxy\nmetadata:\n  name: demo\nspec:\n  provider:\n    type: Kubernetes\n    kubernetes:\n      envoyService:\n        name: internet   # use a known name for the created service\n        type: ClusterIP  # because a kind cluster has no support for LB\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: GatewayClass\nmetadata:\n  name: demo\nspec:\n  controllerName: gateway.envoyproxy.io/gatewayclass-controller\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: demo\nspec:\n  gatewayClassName: demo\n  infrastructure:\n    parametersRef:\n      group: gateway.envoyproxy.io\n      kind: EnvoyProxy\n      name: demo\n  listeners:\n  - name: http\n    protocol: HTTP\n    port: 80\nEOF\n</code></pre>"},{"location":"tutorials/envoy-gateway/#create-an-httproute-to-the-sample-application","title":"Create an HTTPRoute to the sample application","text":"<p>Next, we need to link the Gateway to our sample applicate with an <code>HTTPRoute</code>.</p> <pre><code># create an http route to the sample app\nkubectl apply -n demo -f - &lt;&lt;EOF\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: demo\nspec:\n  parentRefs:\n  - name: demo\n  rules:\n  - matches:\n    - path:\n        type: PathPrefix\n        value: /\n    backendRefs:\n    - group: ''\n      kind: Service\n      name: httpbin\n      port: 8000\n      weight: 1\nEOF\n</code></pre>"},{"location":"tutorials/envoy-gateway/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a certificate to let the api server call into it.</p> <p>Let's deploy <code>cert-manager</code> to manage the certificate we need.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --values - &lt;&lt;EOF\ncrds:\n  enabled: true\nEOF\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"tutorials/envoy-gateway/#deploy-the-kyverno-authz-server","title":"Deploy the Kyverno Authz Server","text":"<p>Now deploy the Kyverno Authz Server.</p> <pre><code># deploy the kyverno authz server\nhelm install kyverno-authz-server \\\n  --namespace kyverno --create-namespace \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server \\\n  --values - &lt;&lt;EOF\ncertificates:\n  certManager:\n    issuerRef:\n      group: cert-manager.io\n      kind: ClusterIssuer\n      name: selfsigned-issuer\nEOF\n</code></pre>"},{"location":"tutorials/envoy-gateway/#create-a-kyverno-validatingpolicy","title":"Create a Kyverno ValidatingPolicy","text":"<p>In summary the policy below does the following:</p> <ul> <li>Checks that the JWT token is valid</li> <li>Checks that the action is allowed based on the token payload <code>role</code> and the request path</li> </ul> <pre><code># deploy kyverno authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: authorization\n    expression: object.attributes.request.http.headers[?\"authorization\"].orValue(\"\").split(\" \")\n  - name: token\n    expression: &gt;\n      size(variables.authorization) == 2 &amp;&amp; variables.authorization[0].lowerAscii() == \"bearer\"\n        ? jwt.Decode(variables.authorization[1], \"secret\")\n        : null\n  validations:\n    # request not authenticated -&gt; 401\n  - expression: &gt;\n      variables.token == null || !variables.token.Valid\n        ? envoy.Denied(401).Response()\n        : null\n    # request authenticated but not admin role -&gt; 403\n  - expression: &gt;\n      variables.token.Claims.?role.orValue(\"\") != \"admin\"\n        ? envoy.Denied(403).Response()\n        : null\n    # request authenticated and admin role -&gt; 200\n  - expression: &gt;\n      envoy\n        .Allowed()\n        .WithHeader(\"x-validated-by\", \"my-security-checkpoint\")\n        .WithoutHeader(\"x-force-authorized\")\n        .WithResponseHeader(\"x-add-custom-response-header\", \"added\")\n        .Response()\nEOF\n</code></pre>"},{"location":"tutorials/envoy-gateway/#deploy-an-envoy-gateway-securitypolicy","title":"Deploy an Envoy Gateway SecurityPolicy","text":"<p>A <code>SecurityPolicy</code> is the custom Envoy Gateway resource to configure underlying Envoy Proxy to use an external auth server (the Kyverno Authz Server we installed in a prior step).</p> <pre><code># deploy envoy gateway security policy\nkubectl apply -n demo -f - &lt;&lt;EOF\napiVersion: gateway.envoyproxy.io/v1alpha1\nkind: SecurityPolicy\nmetadata:\n  name: demo\nspec:\n  targetRefs:\n  - group: gateway.networking.k8s.io\n    kind: HTTPRoute\n    name: demo\n  extAuth:\n    grpc:\n      backendRef:\n        group: ''\n        kind: Service\n        name: kyverno-authz-server\n        namespace: kyverno\n        port: 9081\nEOF\n</code></pre> <p>Notice that in this resource, we define the Kyverno Authz Server service as the GRPC backend:</p> <pre><code>[...]\n  extAuth:\n    grpc:\n      backendRef:\n        group: ''\n        kind: Service\n        name: kyverno-authz-server\n        namespace: kyverno\n        port: 9081\n[...]\n</code></pre> <p>Also notice that the security policy applies to the <code>demo</code> HTTPRoute:</p> <pre><code>[...]\n  targetRefs:\n    - group: gateway.networking.k8s.io\n      kind: HTTPRoute\n      name: demo\n[...]\n</code></pre>"},{"location":"tutorials/envoy-gateway/#grant-access-to-the-kyverno-authz-server-service","title":"Grant access to the Kyverno Authz Server service","text":"<p>Last thing we need to configure is to grant access to the Kyverno Authz Server service for our SecurityPolicy to take effect.</p> <pre><code># grant access\nkubectl apply -n kyverno -f - &lt;&lt;EOF\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: ReferenceGrant\nmetadata:\n  name: demo\nspec:\n  from:\n  - group: gateway.envoyproxy.io\n    kind: SecurityPolicy\n    namespace: demo\n  to:\n  - group: ''\n    kind: Service\nEOF\n</code></pre>"},{"location":"tutorials/envoy-gateway/#testing","title":"Testing","text":"<p>At this we have deployed and configured Envoy Gateway, the Kyverno Authz Server, a sample application, and the authorization and security policies.</p>"},{"location":"tutorials/envoy-gateway/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"tutorials/envoy-gateway/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"tutorials/envoy-gateway/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send request to the sample application and verify the result.</p> <p>For convenience, we will store Alice\u2019s and Bob\u2019s tokens in environment variables.</p> <p>Here Bob is assigned the admin role and Alice is assigned the guest role.</p> <pre><code>export ALICE_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk\"\nexport BOB_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6ImFkbWluIiwic3ViIjoiWVd4cFkyVT0ifQ.veMeVDYlulTdieeX-jxFZ_tCmqQ_K8rwx2OktUHv5Z0\"\n</code></pre> <p>Calling without a JWT token will return <code>401</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" internet.envoy-gateway-system/get\n</code></pre> <p>Calling with Alice\u2019s JWT token will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" internet.envoy-gateway-system/get -H \"authorization: Bearer $ALICE_TOKEN\"\n</code></pre> <p>Calling with Bob\u2019s JWT token will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" internet.envoy-gateway-system/get -H \"authorization: Bearer $BOB_TOKEN\"\n</code></pre>"},{"location":"tutorials/envoy-gateway/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure Envoy Gateway to utilize the Kyverno Authz Server as an external authorization service.</p> <p>Additionally, the tutorial provided an example policy to decode a JWT token and make a decision based on it.</p>"},{"location":"tutorials/gateway-api/","title":"Istio","text":"<p>Istio is an open source service mesh for managing the different microservices that make up a cloud-native application. Istio provides a mechanism to use a service as an external authorizer with the AuthorizationPolicy API.</p> <p>This tutorial shows how Istio\u2019s AuthorizationPolicy can be configured to delegate authorization decisions to the Kyverno Authz Server.</p>"},{"location":"tutorials/gateway-api/#setup","title":"Setup","text":""},{"location":"tutorials/gateway-api/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install the Kyverno Authz Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"tutorials/gateway-api/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"tutorials/gateway-api/#configure-the-mesh","title":"Configure the mesh","text":"<p>We need to register the Kyverno Authz Server with Istio.</p> <pre><code># install istio base chart\nhelm install istio-base \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts base\n\n# install istiod chart\nhelm install istiod \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts istiod \\\n  --values - &lt;&lt;EOF\nmeshConfig:\n  accessLogFile: /dev/stdout\n  extensionProviders:\n  - name: kyverno-authz-server\n    envoyExtAuthzGrpc:\n      service: kyverno-authz-server.kyverno.svc.cluster.local\n      port: 9081\nEOF\n</code></pre> <p>Notice that in the configuration, we define an <code>extensionProviders</code> section that points to the Kyverno Authz Server we will install in the next step:</p> <pre><code>[...]\n    extensionProviders:\n    - name: kyverno-authz-server.local\n      envoyExtAuthzGrpc:\n        service: kyverno-authz-server.kyverno.svc.cluster.local\n        port: '9081'\n[...]\n</code></pre>"},{"location":"tutorials/gateway-api/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a certificate to let the api server call into it.</p> <p>Let's deploy <code>cert-manager</code> to manage the certificate we need.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --values - &lt;&lt;EOF\ncrds:\n  enabled: true\nEOF\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"tutorials/gateway-api/#deploy-the-kyverno-authz-server","title":"Deploy the Kyverno Authz Server","text":"<p>Now we can deploy the Kyverno Authz Server.</p> <pre><code># create the kyverno namespace\nkubectl create ns kyverno\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace kyverno istio-injection=enabled\n\n# deploy the kyverno authz server\nhelm install kyverno-authz-server \\\n  --namespace kyverno \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server \\\n  --values - &lt;&lt;EOF\ncertificates:\n  certManager:\n    issuerRef:\n      group: cert-manager.io\n      kind: ClusterIssuer\n      name: selfsigned-issuer\nEOF\n</code></pre>"},{"location":"tutorials/gateway-api/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace demo istio-injection=enabled\n\n# deploy the httpbin application\nkubectl apply \\\n   -n demo \\\n   -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml\n</code></pre>"},{"location":"tutorials/gateway-api/#deploy-an-istio-authorizationpolicy","title":"Deploy an Istio AuthorizationPolicy","text":"<p>An <code>AuthorizationPolicy</code> is the custom Istio resource that defines the services that will be protected by the Kyverno Authz Server.</p> <pre><code># deploy istio authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: kyverno-authz-server\n  namespace: demo\nspec:\n  action: CUSTOM\n  provider:\n    name: kyverno-authz-server.local\n  rules:\n  - {} # empty rules, it will apply to all requests\nEOF\n</code></pre> <p>Notice that in this resource, we define the Kyverno Authz Server <code>extensionProvider</code> you set in the Istio configuration:</p> <pre><code>[...]\n  provider:\n    name: kyverno-authz-server.local\n[...]\n</code></pre>"},{"location":"tutorials/gateway-api/#create-a-kyverno-validatingpolicy","title":"Create a Kyverno ValidatingPolicy","text":"<p>In summary the policy below does the following:</p> <ul> <li>Checks that the JWT token is valid</li> <li>Checks that the action is allowed based on the token payload <code>role</code> and the request path</li> </ul> <pre><code># deploy kyverno authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: authorization\n    expression: object.attributes.request.http.headers[?\"authorization\"].orValue(\"\").split(\" \")\n  - name: token\n    expression: &gt;\n      size(variables.authorization) == 2 &amp;&amp; variables.authorization[0].lowerAscii() == \"bearer\"\n        ? jwt.Decode(variables.authorization[1], \"secret\")\n        : null\n  validations:\n    # request not authenticated -&gt; 401\n  - expression: &gt;\n      variables.token == null || !variables.token.Valid\n        ? envoy.Denied(401).Response()\n        : null\n    # request authenticated but not admin role -&gt; 403\n  - expression: &gt;\n      variables.token.Claims.?role.orValue(\"\") != \"admin\"\n        ? envoy.Denied(403).Response()\n        : null\n    # request authenticated and admin role -&gt; 200\n  - expression: &gt;\n      envoy.Allowed().Response()\nEOF\n</code></pre>"},{"location":"tutorials/gateway-api/#testing","title":"Testing","text":"<p>At this we have deployed and configured Istio, the Kyverno Authz Server, a sample application, and the authorization policies.</p>"},{"location":"tutorials/gateway-api/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"tutorials/gateway-api/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"tutorials/gateway-api/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send request to the sample application and verify the result.</p> <p>For convenience, we will store Alice\u2019s and Bob\u2019s tokens in environment variables.</p> <p>Here Bob is assigned the admin role and Alice is assigned the guest role.</p> <pre><code>export ALICE_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk\"\nexport BOB_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6ImFkbWluIiwic3ViIjoiWVd4cFkyVT0ifQ.veMeVDYlulTdieeX-jxFZ_tCmqQ_K8rwx2OktUHv5Z0\"\n</code></pre> <p>Calling without a JWT token will return <code>401</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get\n</code></pre> <p>Calling with Alice\u2019s JWT token will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"authorization: Bearer $ALICE_TOKEN\"\n</code></pre> <p>Calling with Bob\u2019s JWT token will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"authorization: Bearer $BOB_TOKEN\"\n</code></pre>"},{"location":"tutorials/gateway-api/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure Istio\u2019s EnvoyFilter to utilize the Kyverno Authz Server as an external authorization service.</p> <p>Additionally, the tutorial provided an example policy to decode a JWT token and make a decision based on it.</p>"},{"location":"tutorials/ingress-nginx/","title":"Ingress Nginx","text":"<p>Ingress NGINX is an open source Ingress controller for Kubernetes that uses NGINX as a reverse proxy and load balancer. It provides a flexible and powerful way to manage external access to services in a Kubernetes cluster.</p> <p>This tutorial shows how Ingress NGINX can be configured to delegate authorization decisions to the Kyverno Authz Server using the external authentication feature.</p>"},{"location":"tutorials/ingress-nginx/#setup","title":"Setup","text":""},{"location":"tutorials/ingress-nginx/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install Ingress NGINX and the Kyverno Authz Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"tutorials/ingress-nginx/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"tutorials/ingress-nginx/#install-ingress-nginx","title":"Install Ingress NGINX","text":"<p>First we need to install Ingress NGINX in the cluster.</p> <pre><code># install ingress-nginx\nhelm install ingress-nginx \\\n  --namespace ingress-nginx --create-namespace \\\n  --wait \\\n  --repo https://kubernetes.github.io/ingress-nginx ingress-nginx \\\n  --set controller.service.type=ClusterIP\n</code></pre> <p>The <code>controller.service.type=ClusterIP</code> setting is used because the kind cluster created in the previous step doesn't come with load balancer support. For production environments or cloud providers with load balancer support, you can omit this setting or use <code>LoadBalancer</code>.</p>"},{"location":"tutorials/ingress-nginx/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a certificate to let the api server call into it.</p> <p>Let's deploy <code>cert-manager</code> to manage the certificate we need.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --set crds.enabled=true\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"tutorials/ingress-nginx/#deploy-the-kyverno-http-authorizer-control-plane","title":"Deploy the Kyverno HTTP Authorizer Control Plane","text":"<p>First, deploy the control plane which manages policies and serves them to the sidecars:</p> <pre><code># deploy the control plane\nhelm install kyverno-http-authorizer-control-plane \\\n  --namespace kyverno --create-namespace \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-http-authorizer kyverno-http-authorizer-control-plane \\\n  --set certificates.certManager.issuerRef.group=cert-manager.io \\\n  --set certificates.certManager.issuerRef.kind=ClusterIssuer \\\n  --set certificates.certManager.issuerRef.name=selfsigned-issuer\n</code></pre> <p>The cert-manager configuration is required because the control plane includes a validating webhook for ValidatingPolicy resources.</p>"},{"location":"tutorials/ingress-nginx/#deploy-the-kyverno-sidecar-injector","title":"Deploy the Kyverno Sidecar Injector","text":"<p>Now deploy the sidecar injector, passing the control plane address:</p> <pre><code># deploy the sidecar injector\nhelm install kyverno-sidecar-injector \\\n  --namespace kyverno \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-http-authorizer kyverno-sidecar-injector \\\n  --set certificates.certManager.issuerRef.group=cert-manager.io \\\n  --set certificates.certManager.issuerRef.kind=ClusterIssuer \\\n  --set certificates.certManager.issuerRef.name=selfsigned-issuer \\\n  --set controlPlaneAddress=kyverno-http-authorizer-control-plane.kyverno.svc.cluster.local:9081\n</code></pre> <p>The <code>controlPlaneAddress</code> tells injected sidecars where to connect to fetch policies.</p>"},{"location":"tutorials/ingress-nginx/#enable-sidecar-injection-for-the-ingress-namespace","title":"Enable sidecar injection for the Ingress namespace","text":"<p>Label the <code>ingress-nginx</code> namespace to enable automatic sidecar injection:</p> <pre><code># enable sidecar injection\nkubectl label namespace ingress-nginx kyverno-injection=enabled\n</code></pre> <p>This triggers the mutating webhook to inject the Kyverno Authz Server sidecar into pods created in the <code>ingress-nginx</code> namespace.</p> <p>The mutating webhook is configured with a namespace selector:</p> <pre><code>namespaceSelector:\n  matchExpressions:\n    - key: kyverno-injection\n      operator: In\n      values:\n      - enabled\n</code></pre> <p>Restart the Ingress NGINX controller to trigger sidecar injection:</p> <pre><code># restart ingress controller to inject sidecar\nkubectl rollout restart deployment -n ingress-nginx ingress-nginx-controller\n</code></pre>"},{"location":"tutorials/ingress-nginx/#create-a-kyverno-validatingpolicy","title":"Create a Kyverno ValidatingPolicy","text":"<p>In summary the policy below does the following:</p> <ul> <li>Is triggered only when the host is <code>myapp.com</code> and the path starts with <code>/api/v1</code></li> <li>Fetches a secret word from an external service</li> <li>Allows GET requests with a matching secret header</li> <li>Allows POST requests with <code>application/json</code> content type</li> <li>Denies all other requests with <code>403</code></li> </ul> <pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: example-api\nspec:\n  evaluation:\n    mode: HTTP\n  matchConditions:\n  - expression: |\n      object.host == \"myapp.com\"\n    name: host\n  - expression: |\n      object.path.startsWith(\"/api/v1\")\n    name: v1-api\n  variables:\n  - name: secretWord\n    expression: |\n      http.Get(\"http://my-server:3000\").secretWord\n  validations:\n  - expression: |\n      object.headers.get(\"secret-header\") == variables.secretWord &amp;&amp; object.method == \"GET\"\n        ? http.response().status(200).withBody(\"request is GET and contains secret header\")\n        : null\n  - expression: |\n      object.headers.get(\"content-type\") == \"application/json\" &amp;&amp; object.method == \"POST\"\n        ? http.response().status(200).withBody(\"request is post and content is application/json\")\n        : null\n  - expression: |\n      http.response().status(403).withBody(\"validations didnt pass\")\n</code></pre>"},{"location":"tutorials/ingress-nginx/#deploy-the-external-service","title":"Deploy the external service","text":"<p>The policy will fetch a secret word from an external service. Let's deploy it first.</p> <pre><code>package main\n\nimport (\n    \"encoding/json\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        log.Println(\"got a request\")\n        resp := map[string]string{\"secretWord\": \"my-secret-word\"}\n        json.NewEncoder(w).Encode(resp)\n    })\n\n    log.Println(\"Server listening on :3000\")\n    if err := http.ListenAndServe(\":3000\", nil); err != nil {\n        log.Fatal(err)\n    }\n}\n</code></pre> <p>Deploy this service to your cluster:</p> <pre><code># create a deployment and service for the external service\nkubectl apply -n demo -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-server\n  template:\n    metadata:\n      labels:\n        app: my-server\n    spec:\n      containers:\n      - name: server\n        image: your-registry/my-server:latest\n        ports:\n        - containerPort: 3000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-server\nspec:\n  selector:\n    app: my-server\n  ports:\n  - port: 3000\n    targetPort: 3000\nEOF\n</code></pre>"},{"location":"tutorials/ingress-nginx/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# deploy the httpbin application\nkubectl apply \\\n  -n demo \\\n  -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml\n</code></pre>"},{"location":"tutorials/ingress-nginx/#create-an-ingress-with-external-authentication","title":"Create an Ingress with External Authentication","text":"<p>Now create a separate Ingress resource for <code>myapp.com</code> with external authentication enabled.</p> <pre><code># create ingress with external auth for myapp.com\nkubectl apply -n demo -f - &lt;&lt;EOF\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myapp\n  annotations:\n    nginx.ingress.kubernetes.io/auth-url: \"http://localhost:9083/validate\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: myapp.com\n    http:\n      paths:\n      - path: /api/v1\n        pathType: Prefix\n        backend:\n          service:\n            name: httpbin\n            port:\n              number: 8000\nEOF\n</code></pre> <p>The <code>nginx.ingress.kubernetes.io/auth-url</code> annotation points to <code>localhost:9083</code> because the Kyverno Authz Server sidecar is injected into the Ingress NGINX controller pod and runs locally on port 9083 (HTTP). The Ingress is configured for host <code>myapp.com</code> and path <code>/api/v1/*</code> to match the ValidatingPolicy conditions.</p>"},{"location":"tutorials/ingress-nginx/#testing","title":"Testing","text":"<p>At this point we have deployed and configured Ingress NGINX, the Kyverno Authz Server, a sample application, and the authorization policies.</p>"},{"location":"tutorials/ingress-nginx/#port-forward-to-the-ingress-controller","title":"Port-forward to the Ingress controller","text":"<p>To access the Ingress without setting up DNS, port-forward to the Ingress NGINX controller:</p> <pre><code>kubectl port-forward -n ingress-nginx service/ingress-nginx-controller 8080:80\n</code></pre>"},{"location":"tutorials/ingress-nginx/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send requests to the sample application and verify the result.</p> <p>The policy requires requests to <code>myapp.com</code> with path <code>/api/v1/*</code>. Let's test different scenarios:</p> <p>GET request with the correct secret header will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -H \"Host: myapp.com\" \\\n  -H \"secret-header: my-secret-word\" \\\n  localhost:8080/api/v1/get\n</code></pre> <p>GET request with wrong secret header will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -H \"Host: myapp.com\" \\\n  -H \"secret-header: wrong-word\" \\\n  localhost:8080/api/v1/get\n</code></pre> <p>POST request with JSON content type will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -X POST \\\n  -H \"Host: myapp.com\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"data\":\"test\"}' \\\n  localhost:8080/api/v1/post\n</code></pre> <p>POST request without JSON content type will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -X POST \\\n  -H \"Host: myapp.com\" \\\n  localhost:8080/api/v1/post\n</code></pre> <p>Request to wrong host will not trigger the policy:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -H \"Host: wronghost.com\" \\\n  localhost:8080/api/v1/get\n</code></pre>"},{"location":"tutorials/ingress-nginx/#alternative-using-kubernetes-resources","title":"Alternative: Using Kubernetes Resources","text":"<p>The previous policy fetched data from an external HTTP service using the <code>http.Get()</code> function. You can also fetch data from Kubernetes resources like ConfigMaps using the <code>resource.Get()</code> function. These functions are part of the Kyverno CEL libraries.</p>"},{"location":"tutorials/ingress-nginx/#create-a-configmap-with-the-secret-word","title":"Create a ConfigMap with the secret word","text":"<pre><code># create configmap with secret word\nkubectl apply -n demo -f - &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: secret-word\ndata:\n  secret-word: \"my-k8s-secret\"\nEOF\n</code></pre>"},{"location":"tutorials/ingress-nginx/#create-a-policy-that-reads-from-configmap","title":"Create a policy that reads from ConfigMap","text":"<pre><code># create policy that reads from configmap\nkubectl apply -f - &lt;&lt;EOF\napiVersion: envoy.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: acme-api\nspec:\n  evaluation:\n    mode: HTTP\n  matchConditions:\n  - expression: |\n      object.host == \"acme.corp\"\n    name: host\n  - expression: |\n      object.path.startsWith(\"/api/v1\")\n    name: v1-api\n  variables:\n  - name: secretWord\n    expression: |\n      resource.Get(\"v1\", \"configmaps\", \"demo\", \"secret-word\").data[\"secret-word\"]\n  validations:\n  - expression: |\n      object.headers.get(\"secret-header\") == variables.secretWord &amp;&amp; object.method == \"GET\"\n        ? http.response().status(200).withBody(\"request is GET and contains secret header\")\n        : null\n  - expression: |\n      object.headers.get(\"content-type\") == \"application/json\" &amp;&amp; object.method == \"POST\"\n        ? http.response().status(200).withBody(\"request is post and content is application/json\")\n        : null\n  - expression: |\n      http.response().status(403).withBody(\"validations didnt pass\")\nEOF\n</code></pre> <p>This policy is similar to the previous one, but fetches the secret word from a ConfigMap in the <code>demo</code> namespace instead of an external HTTP service.</p>"},{"location":"tutorials/ingress-nginx/#create-an-ingress-for-acmecorp","title":"Create an Ingress for acme.corp","text":"<pre><code># create ingress for acme.corp\nkubectl apply -n demo -f - &lt;&lt;EOF\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: acme\n  annotations:\n    nginx.ingress.kubernetes.io/auth-url: \"http://localhost:9083/validate\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: acme.corp\n    http:\n      paths:\n      - path: /api/v1\n        pathType: Prefix\n        backend:\n          service:\n            name: httpbin\n            port:\n              number: 8000\nEOF\n</code></pre>"},{"location":"tutorials/ingress-nginx/#test-the-acmecorp-policy","title":"Test the acme.corp policy","text":"<p>GET request with the correct secret header from ConfigMap will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -H \"Host: acme.corp\" \\\n  -H \"secret-header: my-k8s-secret\" \\\n  localhost:8080/api/v1/get\n</code></pre> <p>GET request with wrong secret header will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -H \"Host: acme.corp\" \\\n  -H \"secret-header: wrong-secret\" \\\n  localhost:8080/api/v1/get\n</code></pre> <p>POST request with JSON content type will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -X POST \\\n  -H \"Host: acme.corp\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"data\":\"test\"}' \\\n  localhost:8080/api/v1/post\n</code></pre> <p>POST request without JSON content type will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" \\\n  -X POST \\\n  -H \"Host: acme.corp\" \\\n  localhost:8080/api/v1/post\n</code></pre>"},{"location":"tutorials/ingress-nginx/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure Ingress NGINX to utilize the Kyverno Authz Server as an external authorization service.</p> <p>Additionally, the tutorial provided an example policy that fetches data from an external service and validates requests based on headers and HTTP methods.</p>"},{"location":"tutorials/istio/","title":"Istio","text":"<p>Istio is an open source service mesh for managing the different microservices that make up a cloud-native application. Istio provides a mechanism to use a service as an external authorizer with the AuthorizationPolicy API.</p> <p>This tutorial shows how Istio\u2019s AuthorizationPolicy can be configured to delegate authorization decisions to the Kyverno Authz Server.</p>"},{"location":"tutorials/istio/#setup","title":"Setup","text":""},{"location":"tutorials/istio/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install the Kyverno Authz Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"tutorials/istio/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"tutorials/istio/#configure-the-mesh","title":"Configure the mesh","text":"<p>We need to register the Kyverno Authz Server with Istio.</p> <pre><code># install istio base chart\nhelm install istio-base \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts base\n\n# install istiod chart\nhelm install istiod \\\n  --namespace istio-system --create-namespace \\\n  --wait \\\n  --repo https://istio-release.storage.googleapis.com/charts istiod \\\n  --values - &lt;&lt;EOF\nmeshConfig:\n  accessLogFile: /dev/stdout\n  extensionProviders:\n  - name: kyverno-authz-server\n    envoyExtAuthzGrpc:\n      service: kyverno-authz-server.kyverno.svc.cluster.local\n      port: 9081\nEOF\n</code></pre> <p>Notice that in the configuration, we define an <code>extensionProviders</code> section that points to the Kyverno Authz Server we will install in the next step:</p> <pre><code>[...]\n    extensionProviders:\n    - name: kyverno-authz-server.local\n      envoyExtAuthzGrpc:\n        service: kyverno-authz-server.kyverno.svc.cluster.local\n        port: '9081'\n[...]\n</code></pre>"},{"location":"tutorials/istio/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a certificate to let the api server call into it.</p> <p>Let's deploy <code>cert-manager</code> to manage the certificate we need.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --values - &lt;&lt;EOF\ncrds:\n  enabled: true\nEOF\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"tutorials/istio/#deploy-the-kyverno-authz-server","title":"Deploy the Kyverno Authz Server","text":"<p>Now we can deploy the Kyverno Authz Server.</p> <pre><code># create the kyverno namespace\nkubectl create ns kyverno\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace kyverno istio-injection=enabled\n\n# deploy the kyverno authz server\nhelm install kyverno-authz-server \\\n  --namespace kyverno \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server \\\n  --values - &lt;&lt;EOF\ncertificates:\n  certManager:\n    issuerRef:\n      group: cert-manager.io\n      kind: ClusterIssuer\n      name: selfsigned-issuer\nEOF\n</code></pre>"},{"location":"tutorials/istio/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace demo istio-injection=enabled\n\n# deploy the httpbin application\nkubectl apply \\\n   -n demo \\\n   -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml\n</code></pre>"},{"location":"tutorials/istio/#deploy-an-istio-authorizationpolicy","title":"Deploy an Istio AuthorizationPolicy","text":"<p>An <code>AuthorizationPolicy</code> is the custom Istio resource that defines the services that will be protected by the Kyverno Authz Server.</p> <pre><code># deploy istio authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: kyverno-authz-server\n  namespace: demo\nspec:\n  action: CUSTOM\n  provider:\n    name: kyverno-authz-server.local\n  rules:\n  - {} # empty rules, it will apply to all requests\nEOF\n</code></pre> <p>Notice that in this resource, we define the Kyverno Authz Server <code>extensionProvider</code> you set in the Istio configuration:</p> <pre><code>[...]\n  provider:\n    name: kyverno-authz-server.local\n[...]\n</code></pre>"},{"location":"tutorials/istio/#create-a-kyverno-validatingpolicy","title":"Create a Kyverno ValidatingPolicy","text":"<p>In summary the policy below does the following:</p> <ul> <li>Checks that the JWT token is valid</li> <li>Checks that the action is allowed based on the token payload <code>role</code> and the request path</li> </ul> <pre><code># deploy kyverno authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: authorization\n    expression: object.attributes.request.http.headers[?\"authorization\"].orValue(\"\").split(\" \")\n  - name: token\n    expression: &gt;\n      size(variables.authorization) == 2 &amp;&amp; variables.authorization[0].lowerAscii() == \"bearer\"\n        ? jwt.Decode(variables.authorization[1], \"secret\")\n        : null\n  validations:\n    # request not authenticated -&gt; 401\n  - expression: &gt;\n      variables.token == null || !variables.token.Valid\n        ? envoy.Denied(401).Response()\n        : null\n    # request authenticated but not admin role -&gt; 403\n  - expression: &gt;\n      variables.token.Claims.?role.orValue(\"\") != \"admin\"\n        ? envoy.Denied(403).Response()\n        : null\n    # request authenticated and admin role -&gt; 200\n  - expression: &gt;\n      envoy.Allowed().Response()\nEOF\n</code></pre>"},{"location":"tutorials/istio/#testing","title":"Testing","text":"<p>At this we have deployed and configured Istio, the Kyverno Authz Server, a sample application, and the authorization policies.</p>"},{"location":"tutorials/istio/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"tutorials/istio/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"tutorials/istio/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send request to the sample application and verify the result.</p> <p>For convenience, we will store Alice\u2019s and Bob\u2019s tokens in environment variables.</p> <p>Here Bob is assigned the admin role and Alice is assigned the guest role.</p> <pre><code>export ALICE_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk\"\nexport BOB_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6ImFkbWluIiwic3ViIjoiWVd4cFkyVT0ifQ.veMeVDYlulTdieeX-jxFZ_tCmqQ_K8rwx2OktUHv5Z0\"\n</code></pre> <p>Calling without a JWT token will return <code>401</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get\n</code></pre> <p>Calling with Alice\u2019s JWT token will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"authorization: Bearer $ALICE_TOKEN\"\n</code></pre> <p>Calling with Bob\u2019s JWT token will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"authorization: Bearer $BOB_TOKEN\"\n</code></pre>"},{"location":"tutorials/istio/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure Istio\u2019s EnvoyFilter to utilize the Kyverno Authz Server as an external authorization service.</p> <p>Additionally, the tutorial provided an example policy to decode a JWT token and make a decision based on it.</p>"},{"location":"tutorials/kgateway/","title":"KGateway","text":"<p>kgateway is the most mature and widely deployed Envoy-based gateway in the market today. Built on open source and open standards, kgateway implements the Kubernetes Gateway API with a control plane that scales from lightweight microgateway deployments between services, to massively parallel centralized gateways handling billions of API calls, to advanced AI gateway use cases for safety, security, and governance when serving models or integrating applications with third-party LLMs. kgateway brings omni-directional API connectivity to any cloud and any environment.</p> <p>This tutorial shows how kgateway can be configured to delegate authorization decisions to the Kyverno Authz Server.</p>"},{"location":"tutorials/kgateway/#setup","title":"Setup","text":""},{"location":"tutorials/kgateway/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install kgateway the Kyverno Authz Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"tutorials/kgateway/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"tutorials/kgateway/#install-kgateway","title":"Install KGateway","text":"<p>First we need to install KGateway in the cluster.</p> <pre><code># install gateway API CDRDs\nkubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.1/standard-install.yaml\n\n# install kgateway CDRDs\nhelm upgrade -i --create-namespace --namespace kgateway-system --version v2.0.3 --wait kgateway-crds oci://cr.kgateway.dev/kgateway-dev/charts/kgateway-crds\n\n# install kgateway\nhelm upgrade -i --namespace kgateway-system --version v2.0.3 --wait kgateway oci://cr.kgateway.dev/kgateway-dev/charts/kgateway\n</code></pre>"},{"location":"tutorials/kgateway/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# deploy the httpbin application\nkubectl apply \\\n  -n demo \\\n  -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml\n</code></pre>"},{"location":"tutorials/kgateway/#set-up-an-api-gateway","title":"Set up an API gateway","text":"<p>Create an API gateway with an HTTP listener by using the Kubernetes Gateway API.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\nkind: Gateway\napiVersion: gateway.networking.k8s.io/v1\nmetadata:\n  name: http\n  namespace: kgateway-system\nspec:\n  gatewayClassName: kgateway\n  listeners:\n  - name: http\n    protocol: HTTP\n    port: 80\n    allowedRoutes:\n      namespaces:\n        from: All\nEOF\n</code></pre> <p>Info</p> <p>Using Kind and getting a CrashLoopBackOff error with a Failed to create temporary file message in the logs? You might have a multi-arch platform issue on macOS. In your Docker Desktop settings, uncheck Use Rosetta, restart Docker, re-create your Kind cluster, and try again.</p>"},{"location":"tutorials/kgateway/#expose-the-app-on-the-gateway","title":"Expose the app on the gateway","text":"<p>Now that you have an app and a gateway proxy, you can create a route to access the app.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: httpbin\n  namespace: demo\nspec:\n  parentRefs:\n  - name: http\n    namespace: kgateway-system\n  rules:\n  - matches:\n    - path:\n        type: PathPrefix\n        value: /\n    backendRefs:\n    - group: ''\n      kind: Service\n      name: httpbin\n      port: 8000\n      weight: 1\nEOF\n</code></pre>"},{"location":"tutorials/kgateway/#deploy-cert-manager","title":"Deploy cert-manager","text":"<p>The Kyverno Authz Server comes with a validation webhook and needs a certificate to let the api server call into it.</p> <p>Let's deploy <code>cert-manager</code> to manage the certificate we need.</p> <pre><code># install cert-manager\nhelm install cert-manager \\\n  --namespace cert-manager --create-namespace \\\n  --wait \\\n  --repo https://charts.jetstack.io cert-manager \\\n  --values - &lt;&lt;EOF\ncrds:\n  enabled: true\nEOF\n\n# create a self-signed cluster issuer\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>For more certificate management options, refer to Certificates management.</p>"},{"location":"tutorials/kgateway/#deploy-the-kyverno-authz-server","title":"Deploy the Kyverno Authz Server","text":"<p>Now deploy the Kyverno Authz Server.</p> <pre><code># deploy the kyverno authz server\nhelm install kyverno-authz-server \\\n  --namespace kyverno --create-namespace \\\n  --wait \\\n  --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server \\\n  --values - &lt;&lt;EOF\nservice:\n  appProtocol: kubernetes.io/h2c\ncertificates:\n  certManager:\n    issuerRef:\n      group: cert-manager.io\n      kind: ClusterIssuer\n      name: selfsigned-issuer\nEOF\n</code></pre>"},{"location":"tutorials/kgateway/#create-a-kyverno-validatingpolicy","title":"Create a Kyverno ValidatingPolicy","text":"<p>In summary the policy below does the following:</p> <ul> <li>Checks that the JWT token is valid</li> <li>Checks that the action is allowed based on the token payload <code>role</code> and the request path</li> </ul> <pre><code># deploy kyverno authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: policies.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  evaluation:\n    mode: Envoy\n  variables:\n  - name: authorization\n    expression: object.attributes.request.http.headers[?\"authorization\"].orValue(\"\").split(\" \")\n  - name: token\n    expression: &gt;\n      size(variables.authorization) == 2 &amp;&amp; variables.authorization[0].lowerAscii() == \"bearer\"\n        ? jwt.Decode(variables.authorization[1], \"secret\")\n        : null\n  validations:\n    # request not authenticated -&gt; 401\n  - expression: &gt;\n      variables.token == null || !variables.token.Valid\n        ? envoy.Denied(401).Response()\n        : null\n    # request authenticated but not admin role -&gt; 403\n  - expression: &gt;\n      variables.token.Claims.?role.orValue(\"\") != \"admin\"\n        ? envoy.Denied(403).Response()\n        : null\n    # request authenticated and admin role -&gt; 200\n  - expression: &gt;\n      envoy\n        .Allowed()\n        .WithHeader(\"x-validated-by\", \"my-security-checkpoint\")\n        .WithoutHeader(\"x-force-authorized\")\n        .WithResponseHeader(\"x-add-custom-response-header\", \"added\")\n        .Response()\nEOF\n</code></pre>"},{"location":"tutorials/kgateway/#create-a-gatewayextension-to-delegate-auth-to-the-kyverno-authz-server","title":"Create a GatewayExtension to delegate auth to the Kyverno Authz Server","text":"<pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: gateway.kgateway.dev/v1alpha1\nkind: GatewayExtension\nmetadata:\n  namespace: kgateway-system\n  name: kyverno-authz-server\nspec:\n  type: ExtAuth\n  extAuth:\n    grpcService:\n      backendRef:\n        name: kyverno-authz-server\n        namespace: kyverno\n        port: 9081\nEOF\n\nkubectl apply -f - &lt;&lt;EOF\napiVersion: gateway.kgateway.dev/v1alpha1\nkind: TrafficPolicy\nmetadata:\n  namespace: kgateway-system\n  name: kyverno-authz-server\nspec:\n  targetRefs:\n  - group: gateway.networking.k8s.io\n    kind: Gateway\n    name: http\n  extAuth:\n    extensionRef: \n      name: kyverno-authz-server\nEOF\n</code></pre>"},{"location":"tutorials/kgateway/#grant-access-to-the-kyverno-authz-server-service","title":"Grant access to the Kyverno Authz Server service","text":"<p>Last thing we need to configure is to grant access to the Kyverno Authz Server service for our GatewayExtension to take effect.</p> <pre><code># grant access\nkubectl apply -f - &lt;&lt;EOF\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: ReferenceGrant\nmetadata:\n  name: kgateway-gateway\n  namespace: kyverno\nspec:\n  from:\n    - group: gateway.kgateway.dev\n      kind: GatewayExtension\n      namespace: kgateway-system\n  to:\n    - group: \"\"\n      kind: Service\nEOF\n</code></pre>"},{"location":"tutorials/kgateway/#testing","title":"Testing","text":"<p>At this we have deployed and configured KGateway, the Kyverno Authz Server, a sample application, and the authorization and security policies.</p>"},{"location":"tutorials/kgateway/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"tutorials/kgateway/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"tutorials/kgateway/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send request to the sample application and verify the result.</p> <p>For convenience, we will store Alice\u2019s and Bob\u2019s tokens in environment variables.</p> <p>Here Bob is assigned the admin role and Alice is assigned the guest role.</p> <pre><code>export ALICE_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk\"\nexport BOB_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6ImFkbWluIiwic3ViIjoiWVd4cFkyVT0ifQ.veMeVDYlulTdieeX-jxFZ_tCmqQ_K8rwx2OktUHv5Z0\"\n</code></pre> <p>Calling without a JWT token will return <code>401</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" http.kgateway-system/get\n</code></pre> <p>Calling with Alice\u2019s JWT token will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" http.kgateway-system/get -H \"authorization: Bearer $ALICE_TOKEN\"\n</code></pre> <p>Calling with Bob\u2019s JWT token will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" http.kgateway-system/get -H \"authorization: Bearer $BOB_TOKEN\"\n</code></pre>"},{"location":"tutorials/kgateway/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure kgateway to utilize the Kyverno Authz Server as an external authorization service.</p> <p>Additionally, the tutorial provided an example policy to decode a JWT token and make a decision based on it.</p>"}]}