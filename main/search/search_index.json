{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"cel-extensions/","title":"CEL extensions","text":"<p>The CEL engine used to evaluate variables and authorization rules has been extended with libraries to help processing the input <code>CheckRequest</code> and forge the corresponding <code>CheckResponse</code>.</p>"},{"location":"cel-extensions/#envoy-plugin-libraries","title":"Envoy plugin libraries","text":"<ul> <li>Envoy</li> <li>Jwt</li> </ul>"},{"location":"cel-extensions/#common-libraries","title":"Common libraries","text":"<p>The libraries below are common CEL extensions enabled in the Kyverno Authz Server CEL engine:</p> <ul> <li>Optional types</li> <li>Cross type numeric comparisons</li> <li>Bindings</li> <li>Encoders</li> <li>Lists</li> <li>Math</li> <li>Protos</li> <li>Sets</li> <li>Strings</li> </ul>"},{"location":"cel-extensions/#kubernetes-libraries","title":"Kubernetes libraries","text":"<p>The libraries below are imported from Kubernetes:</p> <ul> <li>CIDR</li> <li>Format</li> <li>IP</li> <li>Lists</li> <li>Regex</li> <li>URL</li> </ul>"},{"location":"cel-extensions/envoy/","title":"Envoy library","text":"<p>The <code>envoy</code> library adds some types and function to simplify the creation of Envoy CheckResponse objects.</p>"},{"location":"cel-extensions/envoy/#types","title":"Types","text":"CEL Type Proto Docs <code>&lt;CheckRequest&gt;</code> <code>envoy.service.auth.v3.CheckRequest</code> Docs <code>&lt;CheckResponse&gt;</code> <code>envoy.service.auth.v3.CheckResponse</code> Docs <code>&lt;OkHttpResponse&gt;</code> <code>envoy.service.auth.v3.OkHttpResponse</code> Docs <code>&lt;DeniedHttpResponse&gt;</code> <code>envoy.service.auth.v3.DeniedHttpResponse</code> Docs <code>&lt;Metadata&gt;</code> <code>google.protobuf.Struct</code> Docs <code>&lt;HeaderValueOption&gt;</code> <code>envoy.config.core.v3.HeaderValueOption</code> Docs <code>&lt;QueryParameter&gt;</code> <code>envoy.config.core.v3.QueryParameter</code> Docs"},{"location":"cel-extensions/envoy/#functions","title":"Functions","text":""},{"location":"cel-extensions/envoy/#envoyallowed","title":"envoy.Allowed","text":"<p>This function creates an <code>&lt;OkHttpResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads","title":"Signature and overloads","text":"<pre><code>envoy.Allowed() -&gt; &lt;OkHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example","title":"Example","text":"<pre><code>envoy.Allowed()\n</code></pre>"},{"location":"cel-extensions/envoy/#envoydenied","title":"envoy.Denied","text":"<p>This function creates a <code>&lt;DeniedHttpResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_1","title":"Signature and overloads","text":"<pre><code>envoy.Denied(&lt;int&gt; code) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_1","title":"Example","text":"<pre><code>envoy.Denied(401)\n</code></pre>"},{"location":"cel-extensions/envoy/#envoyresponse","title":"envoy.Response","text":"<p>This function creates a <code>&lt;CheckResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_2","title":"Signature and overloads","text":"<p><pre><code>envoy.Response(&lt;int&gt; code) -&gt; &lt;CheckResponse&gt;\n</code></pre> <pre><code>envoy.Response(&lt;OkHttpResponse&gt; ok) -&gt; &lt;CheckResponse&gt;\n</code></pre> <pre><code>envoy.Response(&lt;DeniedHttpResponse&gt; denied) -&gt; &lt;CheckResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_2","title":"Example","text":"<p><pre><code>// ok\nenvoy.Response(0)\n\n// permission denied\nenvoy.Response(7)\n</code></pre> <pre><code>envoy.Response(envoy.Allowed())\n</code></pre> <pre><code>envoy.Response(envoy.Denied(401))\n</code></pre></p>"},{"location":"cel-extensions/envoy/#envoyheader","title":"envoy.Header","text":"<p>This function creates an <code>&lt;HeaderValueOption&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_3","title":"Signature and overloads","text":"<pre><code>envoy.Header(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;HeaderValueOption&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_3","title":"Example","text":"<pre><code>envoy.Header(\"foo\", \"bar\")\n</code></pre>"},{"location":"cel-extensions/envoy/#withbody","title":"WithBody","text":"<p>This function sets the body of a <code>&lt;DeniedHttpResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_4","title":"Signature and overloads","text":"<pre><code>&lt;DeniedHttpResponse&gt;.WithBody(&lt;string&gt; body) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_4","title":"Example","text":"<pre><code>envoy.Denied(401).WithBody(\"Unauthorized Request\")\n</code></pre>"},{"location":"cel-extensions/envoy/#withheader","title":"WithHeader","text":"<p>This function adds a <code>&lt;HeaderValueOption&gt;</code>:</p> <ul> <li>When the request is sent upstream by Envoy, in the case of an <code>&lt;OkHttpResponse&gt;</code>.</li> <li>When the response is sent downstream by Envoy, in the case of a <code>&lt;DeniedHttpResponse&gt;</code>.</li> </ul>"},{"location":"cel-extensions/envoy/#signature-and-overloads_5","title":"Signature and overloads","text":"<p><pre><code>&lt;OkHttpResponse&gt;.WithHeader(&lt;HeaderValueOption&gt; header) -&gt; &lt;OkHttpResponse&gt;\n</code></pre> <pre><code>&lt;OkHttpResponse&gt;.WithHeader(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;OkHttpResponse&gt;\n</code></pre> <pre><code>&lt;DeniedHttpResponse&gt;.WithHeader(&lt;HeaderValueOption&gt; header) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre> <pre><code>&lt;DeniedHttpResponse&gt;.WithHeader(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;DeniedHttpResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_5","title":"Example","text":"<p><pre><code>envoy.Allowed().WithHeader(envoy.Header(\"foo\", \"bar\"))\n</code></pre> <pre><code>envoy.Allowed().WithHeader(\"foo\", \"bar\")\n</code></pre> <pre><code>envoy.Denied(401).WithHeader(envoy.Header(\"foo\", \"bar\"))\n</code></pre> <pre><code>envoy.Denied(401).WithHeader(\"foo\", \"bar\")\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withoutheader","title":"WithoutHeader","text":"<p>This function marks a header to be removed when the request is sent upstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_6","title":"Signature and overloads","text":"<pre><code>&lt;OkHttpResponse&gt;.WithoutHeader(&lt;string&gt; header) -&gt; &lt;OkHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_6","title":"Example","text":"<pre><code>envoy.Allowed().WithoutHeader(\"foo\")\n</code></pre>"},{"location":"cel-extensions/envoy/#withresponseheader","title":"WithResponseHeader","text":"<p>This function adds a <code>&lt;HeaderValueOption&gt;</code> when the response is sent downstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_7","title":"Signature and overloads","text":"<p><pre><code>&lt;OkHttpResponse&gt;.WithResponseHeader(&lt;HeaderValueOption&gt; header) -&gt; &lt;OkHttpResponse&gt;\n</code></pre> <pre><code>&lt;OkHttpResponse&gt;.WithResponseHeader(&lt;string&gt; key, &lt;string&gt; value) -&gt; &lt;OkHttpResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_7","title":"Example","text":"<p><pre><code>envoy.Allowed().WithResponseHeader(envoy.Header(\"foo\", \"bar\"))\n</code></pre> <pre><code>envoy.Allowed().WithResponseHeader(\"foo\", \"bar\")\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withqueryparam","title":"WithQueryParam","text":"<p>This function adds a <code>&lt;QueryParameter&gt;</code> to be added when the request is sent upstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_8","title":"Signature and overloads","text":"<pre><code>&lt;OkHttpResponse&gt;.WithQueryParam(&lt;QueryParameter&gt; param) -&gt; &lt;OkHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_8","title":"Example","text":"<pre><code>envoy.Allowed().WithQueryParam(envoy.config.core.v3.QueryParameter{\n    key: \"foo\",\n    bar: \"bar\"\n})\n</code></pre>"},{"location":"cel-extensions/envoy/#withoutqueryparam","title":"WithoutQueryParam","text":"<p>This function marks a query parameter to be removed when the request is sent upstream by Envoy.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_9","title":"Signature and overloads","text":"<pre><code>&lt;OkHttpResponse&gt;.WithoutQueryParam(&lt;string&gt; param) -&gt; &lt;OkHttpResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_9","title":"Example","text":"<pre><code>envoy.Allowed().WithoutQueryParam(\"foo\")\n</code></pre>"},{"location":"cel-extensions/envoy/#keepemptyvalue","title":"KeepEmptyValue","text":"<p>This function sets the <code>keep_empty_value</code> field of an <code>&lt;HeaderValueOption&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_10","title":"Signature and overloads","text":"<p><pre><code>&lt;HeaderValueOption&gt;.KeepEmptyValue() -&gt; &lt;HeaderValueOption&gt;\n</code></pre> <pre><code>&lt;HeaderValueOption&gt;.KeepEmptyValue(&lt;bool&gt; keep) -&gt; &lt;HeaderValueOption&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_10","title":"Example","text":"<p><pre><code>envoy.Header(\"foo\", \"bar\").KeepEmptyValue()\n</code></pre> <pre><code>envoy.Header(\"foo\", \"bar\").KeepEmptyValue(true)\n</code></pre></p>"},{"location":"cel-extensions/envoy/#response","title":"Response","text":"<p>This function creates a <code>&lt;CheckResponse&gt;</code> object from an <code>&lt;OkHttpResponse&gt;</code> or <code>&lt;DeniedHttpResponse&gt;</code>.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_11","title":"Signature and overloads","text":"<p><pre><code>&lt;OkHttpResponse&gt;.Response() -&gt; &lt;CheckResponse&gt;\n</code></pre> <pre><code>&lt;DeniedHttpResponse&gt;.Response() -&gt; &lt;CheckResponse&gt;\n</code></pre></p>"},{"location":"cel-extensions/envoy/#example_11","title":"Example","text":"<p><pre><code>envoy.Allowed().Response()\n</code></pre> <pre><code>envoy.Denied(401).Response()\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withmessage","title":"WithMessage","text":"<p>This function sets the <code>status.message</code> field of a <code>&lt;CheckResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_12","title":"Signature and overloads","text":"<pre><code>&lt;CheckResponse&gt;.WithMessage(&lt;string&gt; message) -&gt; &lt;CheckResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_12","title":"Example","text":"<p><pre><code>envoy.Allowed().Response().WithMessage(\"hello world!\")\n</code></pre> <pre><code>envoy.Denied(401).Response().WithMessage(\"hello world!\")\n</code></pre></p>"},{"location":"cel-extensions/envoy/#withmetadata","title":"WithMetadata","text":"<p>This function sets the <code>dynamic_metadata</code> field of a <code>&lt;CheckResponse&gt;</code> object.</p>"},{"location":"cel-extensions/envoy/#signature-and-overloads_13","title":"Signature and overloads","text":"<pre><code>&lt;CheckResponse&gt;.WithMetadata(&lt;Metadata&gt; metadata) -&gt; &lt;CheckResponse&gt;\n</code></pre>"},{"location":"cel-extensions/envoy/#example_13","title":"Example","text":"<p><pre><code>envoy.Allowed().Response().WithMetadata({ \"foo\": \"bar\" })\n</code></pre> <pre><code>envoy.Denied(401).Response().WithMetadata({ \"foo\": \"bar\" })\n</code></pre></p>"},{"location":"cel-extensions/jwt/","title":"Jwt library","text":"<p>Policies have native functionality to decode and verify the contents of JWT tokens in order to enforce additional authorization logic on requests.</p>"},{"location":"cel-extensions/jwt/#functions","title":"Functions","text":""},{"location":"cel-extensions/jwt/#jwtdecode","title":"jwt.Decode","text":"<p>The <code>jwt.Decode</code> function decodes and validates a JWT token. It accepts two arguments: the token and the secret to verify the signature.</p>"},{"location":"cel-extensions/jwt/#signature-and-overloads","title":"Signature and overloads","text":"<pre><code>jwt.Decode(&lt;string&gt; token, &lt;string&gt; key) -&gt; &lt;token&gt;\n</code></pre>"},{"location":"cel-extensions/jwt/#example","title":"Example","text":"<pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: token\n    expression: &gt;\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk\"\n  - name: secret\n    expression: &gt;\n      \"secret\"\n  authorizations:\n  - expression: &gt;\n      jwt.Decode(variables.token, variables.secret)....\n</code></pre>"},{"location":"community/","title":"Community","text":"<p>The Kyverno Envoy Plugin has a growing community and we would definitely love to see you join and contribute.</p> <p>Everyone is welcome to make suggestions, report bugs, open feature requests, contribute code or docs, participate in discussions, write blogs or anything that can benefit the project.</p> <p> The Kyverno Envoy Plugin is built and maintained under the Kyverno umbrella but decisions are Community driven Everyone's voice matters <p></p>"},{"location":"community/#slack-channel","title":"Slack channel","text":"<p>Join our slack channel #kyverno to meet with users, contributors and maintainers.</p>"},{"location":"community/#roadmap","title":"RoadMap","text":"<p>For detailed information on our planned features and upcoming updates, please view our Roadmap.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>Please read the contributing guide for details around:</p> <ol> <li>Code of Conduct</li> <li>Code Culture</li> <li>Details on how to contribute</li> </ol>"},{"location":"community/#adopters","title":"Adopters","text":"<p>If you are using the Kyverno Envoy Plugin and want to share it publicly we always appreciate a bit of support. Pull requests to the ADOPTERS LIST will put a smile on our faces </p>"},{"location":"community/contribute/","title":"Contributing","text":"<p>Kyverno Envoy Plugin, developed by Kyverno, is an advanced end-to-end testing tool for Kubernetes. Our community plays a crucial role in shaping the project by reporting bugs, suggesting features, and improving documentation.</p> <p>We aim to make our issue tracker, discussion board, and documentation well-structured and easy to navigate. By following our guidelines, you can help us address your requests efficiently.</p>"},{"location":"community/contribute/#how-you-can-contribute","title":"How you can contribute","text":"<p>We appreciate your efforts in reporting bugs, requesting features, and engaging in discussions. Here's how you can contribute:</p>"},{"location":"community/contribute/#creating-an-issue","title":"Creating an issue","text":"<ul> <li> <p> Something is not working?</p> <p>Report a bug by creating an issue with a reproduction</p> <p> Report a bug</p> </li> <li> <p> Missing information in our docs?</p> <p>Report missing information or potential inconsistencies in our documentation</p> <p> Report a docs issue</p> </li> <li> <p> Want to submit an idea?</p> <p>Propose a change, feature request, or suggest an improvement</p> <p> Request a change</p> </li> <li> <p> Have a question or need help?</p> <p>Ask a question on our discussion board and get in touch with our community</p> <p> Ask a question</p> </li> </ul>"},{"location":"community/contribute/#contributing_1","title":"Contributing","text":"<ul> <li> <p> Want to create a pull request?</p> <p>Learn how to create a comprehensive and useful pull request (PR)</p> <p> Create a pull request</p> </li> </ul>"},{"location":"community/contribute/#checklist","title":"Checklist","text":"<p>Before interacting within the project, please consider the following questions to ensure you're using the correct issue template and providing all necessary information.</p> <p>Issues, discussions, and comments are forever</p> <p>Please note that everything you write is permanent and will remain for everyone to read \u2013 forever. Therefore, please always be nice and constructive, follow our contribution guidelines, and comply with our Code of Conduct.</p>"},{"location":"community/contribute/#before-creating-an-issue","title":"Before creating an issue","text":"<ul> <li>Are you using the appropriate issue template, or is there another issue template that better fits the context of your request?</li> <li>Have you checked if a similar bug report or change request has already been created, or have you stumbled upon something that might be related?</li> <li>Did you fill out every field as requested and provide all additional information needed to comprehend your request?</li> </ul>"},{"location":"community/contribute/#before-asking-a-question","title":"Before asking a question","text":"<ul> <li>Is the topic a question for our discussion board, or is it a bug report or change request that should be raised on our issue tracker?</li> <li>Is there an open discussion on the topic of your request? If the answer is yes, does your question match the direction of the discussion, or should you open a new discussion?</li> <li>Did you provide our community with all the necessary information to understand your question and help you quickly, or can you make it easier to help you?</li> </ul>"},{"location":"community/contribute/#before-commenting","title":"Before commenting","text":"<ul> <li>Is your comment relevant to the topic of the current page, post, issue, or discussion, or is it better to create a new issue or discussion?</li> <li>Does your comment add value to the conversation? Is it constructive and respectful to our community and maintainers? Could you just use a  reaction instead?</li> </ul>"},{"location":"community/contribute/#rights-and-responsibilities","title":"Rights and responsibilities","text":"<p>As maintainers, we are entrusted with the responsibility to moderate communication within our community, including the authority to close, remove, reject, or edit issues, discussions, comments, commits, and to block users who do not align with our contribution guidelines and our Code of Conduct. This role requires us to be actively involved in maintaining the integrity and positive atmosphere of our community. Upholding these standards decisively ensures a respectful and inclusive environment for all members.</p>"},{"location":"community/contribute/#code-of-conduct","title":"Code of Conduct","text":"<p>Our Code of Conduct outlines the expectation for all community members to treat one another with respect, employing inclusive and welcoming language. Our commitment is to foster a positive and supportive environment, free of inappropriate, offensive, or harmful behavior.</p> <p>We take any violations seriously and will take appropriate action in response to uphold these values.<sup>1</sup></p>"},{"location":"community/contribute/#incomplete-issues-and-duplicates","title":"Incomplete issues and duplicates","text":"<p>We have invested significant time and effort in the setup of our contribution process, ensuring that we assess the essential requirements for reviewing and responding to issues effectively. Each field in our issue templates is thoughtfully designed to help us fully understand your concerns and the nature of your matter. We encourage all members to utilize the search function before submitting new issues or starting discussions to help avoid duplicates. Your cooperation is crucial in keeping our community's discussions constructive and organized.</p> <ul> <li> <p>Mandatory completion of issue templates: We need all of the information required in our issue templates because it ensures that every user and maintainer, regardless of their experience, can understand the content and severity of your bug report or change request.</p> </li> <li> <p>Closing incomplete issues:   We reserve the right to close issues lacking essential information, such as but not limited to [minimal reproductions] or those not adhering to the quality standards and requirements specified in our issue templates. Such issues can be reopened once the missing information has been provided.</p> </li> <li> <p>Handling duplicates: To maintain organized and efficient communication within our issue tracker and discussion board, we reserve the right to close any duplicated issues or lock duplicated discussions. Opening multiple channels to ask the same question or report the same issue across different forums hinders our ability to manage and address community concerns effectively. This approach is vital for efficient time management, as duplicated questions can consume the time of multiple team members simultaneously. Ensuring that each issue or discussion is unique and progresses with new information helps us to maintain focus and support our community.</p> <p>We further reserve the right to immediately close discussions or issues that are reopened without providing new information or simply because users have not yet received a response to their issue/question, as the issue is marked as incomplete.</p> </li> <li> <p>Limitations of automated tools:  While we believe in the value and efficiency that automated tools bring to identifying potential issues (such as those identified by Lighthouse, Accessibility tools, and others), simply submitting an issue generated by these tools does not constitute a complete bug report. These tools sometimes produce verbose outputs and may include false positives, which necessitate a critical evaluation. You are of course welcome to attach generated reports to your issue. However, this does not substitute the requirement for a minimal reproduction or a thorough discussion of the findings. We reserve the right to mark these issues as incomplete and close them. This practice ensures that we are addressing genuine concerns with precision and clarity, rather than navigating through extensive automated outputs.</p> </li> </ul> <ol> <li> <p>Warning and blocking policy: Given the increasing popularity of our project and our commitment to a healthy community, we've defined clear guidelines on how we proceed with violations:</p> <p>1.1. First warning: Users displaying repeated inappropriate, offensive, or harmful behavior will receive a first warning. This warning serves as a formal notice that their behavior is not in alignment with our community standards and Code of Conduct. The first warning is permanent.</p> <p>1.2. Second warning and opportunity for resolution: If the behavior persists, a second warning will be issued. Upon receiving the second warning, the user will be given a 5-day period for reflection, during which they are encouraged to publicly explain or apologize for their actions. This period is designed to offer an opportunity for openly clearing out any misunderstanding.</p> <p>1.3. Blocking: Should there be no response or improvement in behavior following the second warning, we reserve the right to block the user from the community and repository. Blocking is considered a last resort, used only when absolutely necessary to protect the community's integrity and positive atmosphere.</p> <p>Blocking has been an exceptionally rare necessity in our overwhelmingly positive community, highlighting our preference for constructive dialogue and mutual respect. It aims to protect our community members and team.\u00a0\u21a9</p> </li> </ol>"},{"location":"community/making-a-pull-request/","title":"Pull Requests","text":"<p>You can contribute by making a pull request that will be reviewed by maintainers and integrated into the main repository when the changes made are approved. You can contribute bug fixes, documentation changes, or new functionalities.</p> <p>Considering a pull request</p> <p>Before deciding to spend effort on making changes and creating a pull request, please discuss what you intend to do. If you are responding to what you think might be a bug, please issue a bug report first. If you intend to work on documentation, create a documentation issue. If you want to work on a new feature, please create a change request.</p> <p>Keep in mind the guidance given and let people advise you. It might be that there are easier solutions to the problem you perceive and want to address. It might be that what you want to achieve can already be done by configuration or [customization].</p>"},{"location":"community/making-a-pull-request/#learning-about-pull-requests","title":"Learning about pull requests","text":"<p>Pull requests are a concept layered on top of Git by services that provide Git hosting. Before you consider making a pull request, you should familiarize yourself with the documentation on GitHub, the service we are using. The following articles are of particular importance:</p> <ol> <li>Forking a repository</li> <li>Creating a pull request from a fork</li> <li>Creating a pull request</li> </ol> <p>Note that they provide tailored documentation for different operating systems and different ways of interacting with GitHub. We do our best in the documentation here to describe the process as it applies but cannot cover all possible combinations of tools and ways of doing things. It is also important that you understand the concept of a pull-request in general before continuing.</p>"},{"location":"community/making-a-pull-request/#pull-request-process","title":"Pull request process","text":"<p>In the following, we describe the general process for making pull requests. The aim here is to provide the 30k ft overview before describing details later on.</p>"},{"location":"community/making-a-pull-request/#preparing-changes-and-draft-pr","title":"Preparing changes and draft PR","text":"<p>The diagram below describes what typically happens to repositories in the process or preparing a pull request. We will be discussing the review-revise process below. It is important that you understand the overall process first before you worry about specific commands. This is why we cover this first before providing instructions below.</p> <pre><code>sequenceDiagram\n  autonumber\n\n  participant upstream\n  participant PR\n  participant fork\n  participant local\n\n  upstream -&gt;&gt; fork: fork on GitHub\n  fork -&gt;&gt; local: clone to local\n  local -&gt;&gt; local: branch\n  loop prepare\n    loop push\n      loop edit\n        local -&gt;&gt; local: commit\n      end\n      local -&gt;&gt; fork: push\n    end\n    upstream -&gt;&gt; fork: merge in any changes\n    fork -&gt;&gt;+ PR: create draft PR\n    PR -&gt;&gt; PR: review your changes\n  end</code></pre> <ol> <li>Fork the Repository: Fork the upstream repository on GitHub to create your own copy.</li> <li>Clone to Local: Clone your fork to your local machine.</li> <li>Create a Branch: Create a topic branch for your changes.</li> <li>Set Up Development Environment: Follow the instructions to set up a development environment.</li> <li>Iterate and Commit: Make incremental changes and commit them with meaningful messages.</li> <li>Push Regularly: Push your commits to your fork regularly.</li> <li>Merge Changes from Upstream: Regularly merge changes from the original upstream repository to avoid conflicts.</li> <li>Create a Draft Pull Request: Once satisfied with your changes, create a draft pull request for early feedback.</li> <li>Review and Revise: Review your work critically, address feedback, and refine your changes.</li> </ol>"},{"location":"community/making-a-pull-request/#finalizing","title":"Finalizing","text":"<p>Once you are happy with your changes, you can move to the next step, finalizing your pull request and asking for a more formal and detailed review. The diagram below shows the process:</p> <pre><code>sequenceDiagram\n  autonumber\n  participant upstream\n  participant PR\n  participant fork\n  participant local\n\n  activate PR\n  PR -&gt;&gt; PR: finalize PR\n  loop review\n    loop discuss\n      PR -&gt;&gt; PR: request review\n      PR -&gt;&gt; PR: discussion\n      local -&gt;&gt; fork: push further changes\n    end\n    PR -&gt;&gt; upstream: merge (and squash)\n    deactivate PR\n    fork -&gt;&gt; fork: delete branch\n    upstream -&gt;&gt; fork: pull\n    local -&gt;&gt; local: delete branch\n    fork -&gt;&gt; local: pull\n  end\n</code></pre> <ol> <li>Finalize PR: Signal that your changes are ready for review.</li> <li>Request Review: Ask the maintainer to review your changes.</li> <li>Discuss and Revise: Engage in discussions, make necessary revisions, and iterate.</li> <li>Merge and Squash: Once approved, the maintainer will merge and possibly squash your commits.</li> <li>Clean Up: Delete the branch used for the PR from both your fork and local clone.</li> </ol>"},{"location":"community/reporting-a-bug/","title":"Bug Reports","text":"<p>If you think you have discovered a bug, you can help us by submitting an issue in our public issue tracker, following this guide.</p>"},{"location":"community/reporting-a-bug/#before-creating-an-issue","title":"Before Creating an Issue","text":"<p>With numerous users, issues are created regularly. The maintainers of this project strive to address bugs promptly. By following this guide, you will know exactly what information we need to help you quickly.</p> <p>Please do the following before creating an issue:</p>"},{"location":"community/reporting-a-bug/#upgrade-to-latest-version","title":"Upgrade to Latest Version","text":"<p>Chances are that the bug you discovered was already fixed in a subsequent version. Before reporting an issue, ensure that you're running the latest version.</p> <p>Bug fixes are not backported</p> <p>Please understand that only bugs that occur in the latest version will be addressed. Also, to reduce duplicate efforts, fixes cannot always be backported to earlier versions.</p>"},{"location":"community/reporting-a-bug/#remove-customizations","title":"Remove Customizations","text":"<p>If you're using customizations like additional configurations, remove them before reporting a bug. We can't offer official support for bugs that might hide in your overrides, so make sure to omit custom settings from your configuration files.</p> <p>Don't be shy to ask on our discussion board for help if you run into problems.</p>"},{"location":"community/reporting-a-bug/#search-for-solutions","title":"Search for Solutions","text":"<p>At this stage, we know that the problem persists in the latest version and is not caused by any of your customizations. However, the problem might result from a small typo or a syntactical error in a configuration file.</p> <p>Before creating a bug report, save time for us and yourself by doing some research:</p> <ol> <li>Search our documentation for relevant sections related to your problem. Ensure everything is configured correctly.</li> <li>[Search our issue tracker] as another user might have already reported the same problem.</li> <li>[Search our discussion board] to see if other users are facing similar issues and find possible solutions.</li> </ol> <p>Keep track of all search terms and relevant links; you'll need them in the bug report.</p> <p>If you still haven't found a solution to your problem, create an issue. It's now likely that you've encountered something new. Read the following section to learn how to create a complete and helpful bug report.</p>"},{"location":"community/reporting-a-bug/#issue-template","title":"Issue Template","text":"<p>We have created a new issue template to make the bug reporting process as simple as possible and more efficient for our community and us. It consists of the following parts:</p> <ul> <li>Title</li> <li>Context optional</li> <li>Bug Description</li> <li>Related Links</li> <li>Reproduction</li> <li>Steps to Reproduce</li> <li>Browser optional</li> <li>Checklist</li> </ul>"},{"location":"community/reporting-a-bug/#title","title":"Title","text":"<p>A good title is short and descriptive. It should be a one-sentence executive summary of the issue, so the impact and severity of the bug can be inferred from the title.</p> Example Clear <code>apply</code> command fails with specific CRD Wordy The <code>apply</code> command fails when used with a certain Custom Resource Definition Unclear Command does not work Useless Help"},{"location":"community/reporting-a-bug/#context","title":"Context optional","text":"<p>Before describing the bug, you can provide additional context to help us understand what you were trying to achieve. Explain the circumstances under which the bug happens, and what you think might be relevant. Don't describe the bug here.</p>"},{"location":"community/reporting-a-bug/#bug-description","title":"Bug Description","text":"<p>Provide a clear, focused, specific, and concise summary of the bug you encountered. Explain why you think this is a bug that should be reported, and not to one of its dependencies. Follow these principles:</p> <ul> <li>Explain the what, not the how \u2013 don't explain how to reproduce the bug here, we're getting there. Focus on articulating the problem and its impact.</li> <li>Keep it short and concise \u2013 if the bug can be precisely explained in one or two sentences, perfect. Don't inflate it.</li> <li>One bug at a time \u2013 if you encounter several unrelated bugs, create separate issues for them.</li> </ul>"},{"location":"community/reporting-a-bug/#related-links","title":"Related Links","text":"<p>Share links to relevant sections of our documentation and any related issues or discussions. This helps us improve our documentation and understand the problem better.</p>"},{"location":"community/reporting-a-bug/#reproduction","title":"Reproduction","text":"<p>A minimal reproduction is essential for a well-written bug report, as it allows us to recreate the conditions necessary to inspect the bug. Follow the guide to create a reproduction:</p> <p>[ Create reproduction][Create reproduction]{ .md-button .md-button--primary }</p> <p>After creating the reproduction, you should have a <code>.zip</code> file, ideally not larger than 1 MB. Drag and drop the <code>.zip</code> file into the issue field, which will automatically upload it to GitHub.</p> <p>Don't share links to repositories</p> <p>While linking to a repository is a common practice, we currently don't support this. The reproduction, created using the built-in info plugin, contains all necessary environment information.</p>"},{"location":"community/reporting-a-bug/#steps-to-reproduce","title":"Steps to Reproduce","text":"<p>List specific steps to follow when running your reproduction to observe the bug. Keep the steps concise and ensure nothing is left out. Use simple language and focus on continuity.</p>"},{"location":"community/reporting-a-bug/#browser","title":"Browser optional","text":"<p>If the bug only occurs in specific browsers, let us know which ones are affected. This field is optional, as it is only relevant for bugs that do not involve a crash when previewing or building your site.</p> <p>Incognito Mode</p> <p>Verify that the bug is not caused by a browser extension by switching to incognito mode. If the bug disappears, it is likely caused by an extension.</p>"},{"location":"community/reporting-a-bug/#checklist","title":"Checklist","text":"<p>Before submitting, ensure you have:</p> <ul> <li>Followed this guide thoroughly</li> <li>Provided all necessary information</li> <li>Created a minimal reproduction</li> </ul> <p>Thanks for following the guide and creating a high-quality bug report. We will take it from here.</p>"},{"location":"community/reporting-a-docs-issue/","title":"Documentation Issues","text":"<p>The documentation includes extensive information on features, configurations, customizations, and more. If you have found an inconsistency or see room for improvement, please follow this guide to submit an issue on our issue tracker.</p>"},{"location":"community/reporting-a-docs-issue/#issue-template","title":"Issue Template","text":"<p>Reporting a documentation issue is usually less involved than reporting a bug, as we don't need a [reproduction]. Please thoroughly read this guide before creating a new documentation issue, and provide the following information as part of the issue:</p> <ul> <li>Title</li> <li>Description</li> <li>Related Links</li> <li>Proposed Change optional</li> <li>Checklist</li> </ul>"},{"location":"community/reporting-a-docs-issue/#title","title":"Title","text":"<p>A good title should be a short, one-sentence description of the issue, containing all relevant information and keywords to simplify the search in our issue tracker.</p> Example Clear Clarify resource templating setup Unclear Missing information in the docs Useless Help"},{"location":"community/reporting-a-docs-issue/#description","title":"Description","text":"<p>Provide a clear and concise summary of the inconsistency or issue you encountered in the documentation or the documentation section that needs improvement. Explain why you think the documentation should be adjusted and describe the severity of the issue:</p> <ul> <li>Keep it short and concise \u2013 if the inconsistency or issue can be precisely explained in one or two sentences, perfect. Maintainers and future users will be grateful for having to read less.</li> <li>One issue at a time \u2013 if you encounter several unrelated inconsistencies, please create separate issues for them.</li> </ul> <p>Why we need this: describing the problem clearly and concisely is a prerequisite for improving our documentation \u2013 we need to understand what's wrong so we can fix it.</p>"},{"location":"community/reporting-a-docs-issue/#related-links","title":"Related Links","text":"<p>After you describe the documentation section that needs to be adjusted, share the link to this specific documentation section and other possibly related sections. Use anchor links (permanent links) where possible, as it simplifies discovery.</p> <p>Why we need this: providing the links to the documentation helps us understand which sections of our documentation need to be adjusted, extended, or overhauled.</p>"},{"location":"community/reporting-a-docs-issue/#proposed-change","title":"Proposed Change optional","text":"<p>Now that you have provided us with the description and links to the documentation sections, you can help us, maintainers, and the community by proposing an improvement. You can sketch out rough ideas or write a concrete proposal. This field is optional but very helpful.</p> <p>Why we need this: an improvement proposal can be beneficial for other users who encounter the same issue, as they offer solutions before we maintainers can update the documentation.</p>"},{"location":"community/reporting-a-docs-issue/#checklist","title":"Checklist","text":"<p>Thanks for following the guide and providing valuable feedback for our documentation \u2013 you are almost done. The checklist ensures that you have read this guide and have worked to your best knowledge to provide us with every piece of information we need to improve it.</p> <p>We'll take it from here.</p>"},{"location":"community/requesting-a-change/","title":"Change Requests","text":"<p>We value every idea or contribution from our community. Please follow this guide before submitting your change request in our public issue tracker. This helps us better understand the proposed change and how it will benefit our community.</p>"},{"location":"community/requesting-a-change/#before-creating-an-issue","title":"Before Creating an Issue","text":"<p>Before you invest time in submitting a change request, answer these questions to determine if your idea is a good fit and matches the project's philosophy and tone.</p>"},{"location":"community/requesting-a-change/#its-not-a-bug-its-a-feature","title":"It's Not a Bug, It's a Feature","text":"<p>Change requests suggest minor adjustments, new features, or influence the project's direction. They are not intended for reporting bugs. Refer to our bug reporting guide for that.</p>"},{"location":"community/requesting-a-change/#look-for-sources-of-inspiration","title":"Look for Sources of Inspiration","text":"<p>If your idea is implemented in another tool or framework, collect information on its implementation. This helps us evaluate its fit more quickly.</p>"},{"location":"community/requesting-a-change/#connect-with-our-community","title":"Connect with Our Community","text":"<p>Our discussion board is the best place to connect with our community. Seeking input from other users helps implement features that benefit a larger number of users.</p> <p> Start a discussion</p>"},{"location":"community/requesting-a-change/#issue-template","title":"Issue Template","text":"<p>After doing the preliminary work, create a change request. Follow these steps:</p> <ul> <li>Title</li> <li>Context optional</li> <li>Description</li> <li>Related Links</li> <li>Use Cases</li> <li>Visuals optional</li> <li>Checklist</li> </ul>"},{"location":"community/requesting-a-change/#title","title":"Title","text":"<p>A good title is short and descriptive, summarizing the idea so the potential impact and benefit can be inferred.</p> Example Clear Support for resource templating Wordy Add support for templating resources for easier testing Unclear Improve templating Useless Help"},{"location":"community/requesting-a-change/#context","title":"Context optional","text":"<p>Provide additional context to help us understand what you are trying to achieve. Explain the circumstances and relevant settings without describing the change request itself.</p>"},{"location":"community/requesting-a-change/#description","title":"Description","text":"<p>Provide a detailed and clear description of your idea. Explain why your idea is relevant and should be implemented here, not in one of its dependencies.</p> <ul> <li>Explain the what, not the why \u2013 focus on describing the change request precisely.</li> <li>Keep it short and concise \u2013 be brief and to the point.</li> <li>One idea at a time \u2013 if you have multiple ideas, open separate change requests for each.</li> </ul>"},{"location":"community/requesting-a-change/#related-links","title":"Related Links","text":"<p>Provide any relevant links to issues, discussions, or documentation sections related to your change request. This helps us gain additional context.</p>"},{"location":"community/requesting-a-change/#use-cases","title":"Use Cases","text":"<p>Explain how your change request would work from an author's and user's perspective. What is the expected impact, and why does it benefit other users? Would it potentially break existing functionality?</p>"},{"location":"community/requesting-a-change/#visuals","title":"Visuals optional","text":"<p>If you have any visuals, such as sketches, screenshots, mockups, or external assets, present them in this section. If you have seen this change used in other tools, showcase and describe its implementation.</p>"},{"location":"community/requesting-a-change/#checklist","title":"Checklist","text":"<p>Thanks for following the guide and creating a high-quality change request. The checklist ensures that you have read this guide and provided all necessary information for us to review your idea.</p> <p>We'll take it from here.</p>"},{"location":"community/requesting-a-change/#rejected-requests","title":"Rejected Requests","text":"<p>Your change request got rejected? We're sorry for that. We understand it can be frustrating, but we always need to consider the needs of our entire community. If you're unsure why your change request was rejected, please ask for clarification.</p> <p>We consider the following principles when evaluating change requests:</p> <ul> <li> Alignment with the project's vision and tone</li> <li> Compatibility with existing features and plugins</li> <li> Compatibility with all screen sizes and browsers</li> <li> Effort of implementation and maintenance</li> <li> Usefulness to the majority of users</li> <li> Simplicity and ease of use</li> <li> Accessibility</li> </ul> <p>If your idea was rejected, you can always implement it via [customization]. If you're unsure how or want to know if someone has already done it, get in touch with our community on the discussion board.</p>"},{"location":"performance/","title":"Performance","text":"<p>This page offers guidance and best practices for benchmarking the performance of the Kyverno Authz Server, helping users understand the associated overhead. It outlines an example setup for conducting benchmarks, various benchmarking scenarios, and key metrics to capture for assessing the impact of the Kyverno Authz Server.</p>"},{"location":"performance/#benchmark-setup","title":"Benchmark Setup","text":"<p>The benchmark setup consists of the following components:</p>"},{"location":"performance/#sample-application","title":"Sample Application","text":"<p>The first component is a simple Go application that provides information of books in the library books collection and exposes APIs to <code>get</code>, <code>create</code> and <code>delete</code> books collection. Check this out for more information about the Go test application . </p>"},{"location":"performance/#envoy","title":"Envoy","text":"<p>The second component is the Envoy proxy, which runs alongside the example application. The Envoy configuration defines an external authorization filter <code>envoy.ext_authz</code> for a gRPC authorization server.</p> <p>The config uses Envoy's in-built gRPC client to make external gRPC calls.</p> <pre><code>static_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          codec_type: auto\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: backend\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: service\n          http_filters:\n          - name: envoy.ext_authz\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\n              transport_api_version: V3\n              with_request_body:\n                max_request_bytes: 8192\n                allow_partial_message: true\n              failure_mode_allow: false\n              grpc_service:\n                google_grpc:\n                  target_uri: 127.0.0.1:9191\n                  stat_prefix: ext_authz\n                timeout: 0.5s\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: service\n    connect_timeout: 0.25s\n    type: strict_dns\n    lb_policy: round_robin\n    load_assignment:\n      cluster_name: service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 8080\nadmin:\n  access_log_path: \"/dev/null\"\n  address:\n    socket_address:\n      address: 0.0.0.0\n      port_value: 8001\nlayered_runtime:\n  layers:\n    - name: static_layer_0\n      static_layer:\n        envoy:\n          resource_limits:\n            listener:\n              example_listener_name:\n                connection_limit: 10000\n        overload:\n          global_downstream_max_connections: 50000\n</code></pre>"},{"location":"performance/#kyverno-authz-server","title":"Kyverno Authz Server","text":"<p>The third component is the Kyverno Authz Server itself, which is configured to load and enforce Kyverno policies on incoming requests. </p>"},{"location":"performance/#benchmark-scenarios","title":"Benchmark Scenarios","text":"<p>The following scenarios should be tested to compare the performance of the Kyverno Authz Server under different conditions:</p> <ol> <li>App Only: Requests are sent directly to the application, without Envoy or the Kyverno Authz Server.</li> <li>App and Envoy: Envoy is included in the request path, but the Kyverno Authz Server is not (i.e., Envoy External Authorization API is disabled).</li> <li>App, Envoy, and Kyverno: Envoy External Authorization API is enabled, and a sample real-world policy is loaded into the Kyverno Authz Server.</li> </ol>"},{"location":"performance/#load-testing-with-k6","title":"Load Testing with k6","text":"<p>To perform load testing, we'll use the k6 tool. Follow these steps:</p> <ol> <li> <p>Install k6: Install k6 on your machine by following the instructions on the official website.</p> </li> <li> <p>Write the k6 script:  Below is the example k6 script. </p> </li> </ol> <pre><code>import http from 'k6/http';\nimport { check, group, sleep } from 'k6';\n\nexport const options = {\n  stages: [\n    { duration: '30s', target: 100 }, // Ramp-up to 100 virtual users over 30 seconds\n    { duration: '1m', target: 100 }, // Stay at 100 virtual users for 1 minute\n    { duration: '30s', target: 0 }, // Ramp-down to 0 virtual users over 30 seconds\n  ],\n};\n\n/*\nReplace ip for every scenerio\nexport SERVICE_PORT=$(kubectl -n demo get service testapp -o jsonpath='{.spec.ports[?(@.port==8080)].nodePort}')\nexport SERVICE_HOST=$(minikube ip)\nexport SERVICE_URL=$SERVICE_HOST:$SERVICE_PORT\necho $SERVICE_URL\n\nhttp://192.168.49.2:31541\n\n*/\nconst BASE_URL = 'http://192.168.49.2:31541'; \n\nexport default function () {\n  group('GET /book with guest token', () =&gt; {\n    const res = http.get(`${BASE_URL}/book`, {\n      headers: { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk' },\n    });\n    check(res, {\n      'is status 200': (r) =&gt; r.status === 200,\n    });\n  });\n\n  sleep(1); // Sleep for 1 second between iterations\n}\n</code></pre> <ol> <li>Run the k6 test: Run the load test with the following command:</li> </ol> <pre><code>$ k6 run -f - &lt;&lt;EOF\nimport http from 'k6/http';\nimport { check, group, sleep } from 'k6';\n\nexport const options = {\n  stages: [\n    { duration: '30s', target: 100 }, // Ramp-up to 100 virtual users over 30 seconds\n    { duration: '1m', target: 100 }, // Stay at 100 virtual users for 1 minute\n    { duration: '30s', target: 0 }, // Ramp-down to 0 virtual users over 30 seconds\n  ],\n};\n\n\nconst BASE_URL = 'http://192.168.49.2:31700'; // Replace with your application URL \n\nexport default function () {\n  group('GET /book with guest token', () =&gt; {\n    const res = http.get(`${BASE_URL}/book`, {\n      headers: { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk' },\n    });\n    check(res, {\n      'is status 200': (r) =&gt; r.status === 200,\n    });\n  });\n\n  sleep(1); // Sleep for 1 second between iterations\n}\nEOF\n</code></pre> <ol> <li>Analyze the results: Generate an json report with detailed insight by running:</li> </ol> <p><pre><code>k6 run --out json=report.json k6-script.js\n</code></pre> 5. Repeat for different scenarios:</p> <ul> <li> <p>App only</p> <p>In this case , request are sent directly to the sample application ie no Envoy and Kyverno-plugin in the request path . For this run this command to apply the sample applicaition and then test with k6</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-envoy-plugin/main/tests/performance-test/manifest/app.yaml\n</code></pre> <p>Results of the k6 when only application is applied</p> <pre><code>        /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n   /\\  /  \\     |  |/  /   /  /    \n  /  \\/    \\    |     (   /   \u203e\u203e\\  \n /          \\   |  |\\  \\ |  (\u203e)  | \n/ __________ \\  |__| \\__\\ \\_____/ .io\n\n execution: local\n    script: k6-script.js\n    output: -\n\n scenarios: (100.00%) 1 scenario, 100 max VUs, 2m30s max duration (incl. graceful stop):\n          * default: Up to 100 looping VUs for 2m0s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n \u2588 GET /book with guest token\n\n   \u2713 is status 200\n\n checks.........................: 100.00% \u2713 9048      \u2717 0    \n data_received..................: 2.1 MB  18 kB/s\n data_sent......................: 2.6 MB  21 kB/s\n group_duration.................: avg=1.01ms   min=166.46\u00b5s med=775.01\u00b5s max=36ms    p(90)=1.72ms   p(95)=2.31ms  \n http_req_blocked...............: avg=15.08\u00b5s  min=1.55\u00b5s   med=6.54\u00b5s   max=4.09ms  p(90)=12.07\u00b5s  p(95)=15.25\u00b5s \n http_req_connecting............: avg=4.58\u00b5s   min=0s       med=0s       max=1.57ms  p(90)=0s       p(95)=0s      \n http_req_duration..............: avg=745.73\u00b5s min=103.06\u00b5s med=549.17\u00b5s max=35.88ms p(90)=1.26ms   p(95)=1.75ms  \n   { expected_response:true }...: avg=745.73\u00b5s min=103.06\u00b5s med=549.17\u00b5s max=35.88ms p(90)=1.26ms   p(95)=1.75ms  \n http_req_failed................: 0.00%   \u2713 0         \u2717 9048 \n http_req_receiving.............: avg=119.69\u00b5s min=11.33\u00b5s  med=77.78\u00b5s  max=10.97ms p(90)=193.73\u00b5s p(95)=285.58\u00b5s\n http_req_sending...............: avg=41\u00b5s     min=6.96\u00b5s   med=31.12\u00b5s  max=2.39ms  p(90)=61.88\u00b5s  p(95)=78.15\u00b5s \n http_req_tls_handshaking.......: avg=0s       min=0s       med=0s       max=0s      p(90)=0s       p(95)=0s      \n http_req_waiting...............: avg=585.04\u00b5s min=75.52\u00b5s  med=407.87\u00b5s max=35.84ms p(90)=965.49\u00b5s p(95)=1.33ms  \n http_reqs......................: 9048    75.050438/s\n iteration_duration.............: avg=1s       min=1s       med=1s       max=1.06s   p(90)=1s       p(95)=1s      \n iterations.....................: 9048    75.050438/s\n vus............................: 2       min=2       max=100\n vus_max........................: 100     min=100     max=100\n\n\nrunning (2m00.6s), 000/100 VUs, 9048 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 000/100 VUs  2m0s\n</code></pre> </li> <li> <p>App and Envoy</p> <p>In this case, the Kyverno Authz Server is not included in the path but Envoy is but Envoy External Authorization API disabled  For this run this command to apply the sample application with envoy.</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-envoy-plugin/main/tests/performance-test/manifest/app-envoy.yaml\n</code></pre> <p>Results of k6 after applying sample-application with envoy.</p> <pre><code>        /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n   /\\  /  \\     |  |/  /   /  /    \n  /  \\/    \\    |     (   /   \u203e\u203e\\  \n /          \\   |  |\\  \\ |  (\u203e)  | \n/ __________ \\  |__| \\__\\ \\_____/ .io\n\n execution: local\n    script: k6-script.js\n    output: -\n\n scenarios: (100.00%) 1 scenario, 100 max VUs, 2m30s max duration (incl. graceful stop):\n          * default: Up to 100 looping VUs for 2m0s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n \u2588 GET /book with guest token\n\n   \u2713 is status 200\n\n checks.........................: 100.00% \u2713 9031      \u2717 0    \n data_received..................: 2.5 MB  21 kB/s\n data_sent......................: 2.6 MB  21 kB/s\n group_duration.................: avg=2.66ms  min=457.22\u00b5s med=1.8ms   max=65.53ms p(90)=4.85ms   p(95)=6.58ms  \n http_req_blocked...............: avg=12.81\u00b5s min=1.52\u00b5s   med=5.98\u00b5s  max=2.41ms  p(90)=11.84\u00b5s  p(95)=13.9\u00b5s  \n http_req_connecting............: avg=3.82\u00b5s  min=0s       med=0s      max=2.34ms  p(90)=0s       p(95)=0s      \n http_req_duration..............: avg=2.38ms  min=383.7\u00b5s  med=1.58ms  max=65.22ms p(90)=4.36ms   p(95)=5.92ms  \n   { expected_response:true }...: avg=2.38ms  min=383.7\u00b5s  med=1.58ms  max=65.22ms p(90)=4.36ms   p(95)=5.92ms  \n http_req_failed................: 0.00%   \u2713 0         \u2717 9031 \n http_req_receiving.............: avg=136.3\u00b5s min=12.53\u00b5s  med=76.74\u00b5s max=12.75ms p(90)=183.23\u00b5s p(95)=272.91\u00b5s\n http_req_sending...............: avg=41.54\u00b5s min=6.58\u00b5s   med=28.1\u00b5s  max=4.15ms  p(90)=59.62\u00b5s  p(95)=74.85\u00b5s \n http_req_tls_handshaking.......: avg=0s      min=0s       med=0s      max=0s      p(90)=0s       p(95)=0s      \n http_req_waiting...............: avg=2.2ms   min=349.23\u00b5s med=1.43ms  max=65.08ms p(90)=4.05ms   p(95)=5.52ms  \n http_reqs......................: 9031    74.825497/s\n iteration_duration.............: avg=1s      min=1s       med=1s      max=1.06s   p(90)=1s       p(95)=1s      \n iterations.....................: 9031    74.825497/s\n vus............................: 3       min=3       max=100\n vus_max........................: 100     min=100     max=100\n\n\nrunning (2m00.7s), 000/100 VUs, 9031 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 000/100 VUs  2m0s\n</code></pre> </li> <li> <p>App, Envoy and Kyverno Authz Server</p> <p>In this case, performance measurements are observed with Envoy External Authorization API enabled and a sample real-world policy loaded into the Kyverno Authz Server.</p> <p>For this apply this command to apply sample-application, envoy and Kyverno Authz Server:</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kyverno/kyverno-envoy-plugin/main/tests/performance-test/manifest/app-envoy-plugin.yaml\n</code></pre> <p>Results of k6 after applying sample-application, Envoy and the Kyverno Authz Server.</p> <pre><code>        /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/   \n   /\\  /  \\     |  |/  /   /  /    \n  /  \\/    \\    |     (   /   \u203e\u203e\\  \n /          \\   |  |\\  \\ |  (\u203e)  | \n/ __________ \\  |__| \\__\\ \\_____/ .io\n\n execution: local\n    script: k6-script.js\n    output: -\n\n scenarios: (100.00%) 1 scenario, 100 max VUs, 2m30s max duration (incl. graceful stop):\n          * default: Up to 100 looping VUs for 2m0s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)\n\n\n \u2588 GET /book with guest token\n\n   \u2713 is status 200\n\n checks.........................: 100.00% \u2713 8655      \u2717 0    \n data_received..................: 2.4 MB  20 kB/s\n data_sent......................: 2.4 MB  20 kB/s\n group_duration.................: avg=46.54ms min=4.59ms  med=29.69ms max=337.79ms p(90)=109.35ms p(95)=140.51ms\n http_req_blocked...............: avg=11.88\u00b5s min=1.21\u00b5s  med=4.15\u00b5s  max=2.83ms   p(90)=9.87\u00b5s   p(95)=11.4\u00b5s  \n http_req_connecting............: avg=4.98\u00b5s  min=0s      med=0s      max=2.18ms   p(90)=0s       p(95)=0s      \n http_req_duration..............: avg=46.37ms min=4.49ms  med=29.49ms max=337.69ms p(90)=109.26ms p(95)=140.28ms\n   { expected_response:true }...: avg=46.37ms min=4.49ms  med=29.49ms max=337.69ms p(90)=109.26ms p(95)=140.28ms\n http_req_failed................: 0.00%   \u2713 0         \u2717 8655 \n http_req_receiving.............: avg=65.19\u00b5s min=11.14\u00b5s med=56.47\u00b5s max=5.58ms   p(90)=102.86\u00b5s p(95)=145.19\u00b5s\n http_req_sending...............: avg=30.35\u00b5s min=5.43\u00b5s  med=18.48\u00b5s max=5.29ms   p(90)=46.63\u00b5s  p(95)=58\u00b5s    \n http_req_tls_handshaking.......: avg=0s      min=0s      med=0s      max=0s       p(90)=0s       p(95)=0s      \n http_req_waiting...............: avg=46.27ms min=4.43ms  med=29.42ms max=337.65ms p(90)=109.22ms p(95)=140.24ms\n http_reqs......................: 8655    71.999297/s\n iteration_duration.............: avg=1.04s   min=1s      med=1.03s   max=1.33s    p(90)=1.11s    p(95)=1.14s   \n iterations.....................: 8655    71.999297/s\n vus............................: 2       min=2       max=100\n vus_max........................: 100     min=100     max=100\n\n\nrunning (2m00.2s), 000/100 VUs, 8655 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 000/100 VUs  2m0s\n</code></pre> </li> </ul>"},{"location":"performance/#measuring-performance","title":"Measuring Performance","text":"<p>The following metrics should be measured to evaluate the performance impact of the Kyverno Authz Server:</p> <ul> <li> <p>End-to-end latency</p> <p>The end-to-end latency represents the time taken for a request to complete, from the client sending the request to receiving the response. Based on the k6 results, the average end-to-end latency for the different scenarios is as follows:</p> <ul> <li>App Only: <code>avg=1.01ms</code> (from <code>group_duration</code> or <code>http_req_duration</code>)</li> <li>App and Envoy: <code>avg=2.38ms</code> (from <code>http_req_duration</code>)</li> <li>App, Envoy, and Kyverno Authz Server: <code>avg=46.37ms</code> (from <code>http_req_duration</code>)</li> </ul> </li> <li> <p>Kyverno evaluation latency</p> <p>The Kyverno evaluation latency represents the time taken by the Kyverno Authz Server to evaluate the request against the configured policies. While the k6 results do not directly provide this metric, an estimate can be inferred by analyzing the differences in latency between the \"App and Envoy\" scenario and the \"App, Envoy, and Kyverno Authz Server\" scenario.</p> <p>The difference in average latency between these two scenarios is: <code>46.37ms</code> - <code>2.38ms</code> = <code>43.99ms</code></p> <p>This difference can be attributed to the Kyverno evaluation latency and the gRPC server handler latency combined. Assuming the gRPC server handler latency is relatively small compared to the Kyverno evaluation latency, the estimated range for the Kyverno evaluation latency is around 40ms to 45ms.</p> </li> <li> <p>Resource utilization</p> <p>Refers to CPU and memory usage of the Kyverno Authz Server container , <code>kubectl top</code> utility can be laveraged to measure the resource utilization.</p> <p>Get the resource utilization of the Kyverno Authz Server container using the following command:</p> <pre><code>$ kubectl top pod -n demo --containers\n</code></pre> <p>To monitor resource utilization overtime use the following command:</p> <pre><code>$ watch -n 1 \"kubectl top pod -n demo --containers\"\n</code></pre> <p>Now run the k6 script in different terminal window and observe the resource utilization of the Kyverno Authz Server container.</p> <p>Initial resource utilization of the Kyverno Authz Server container:</p> <pre><code>POD                        NAME                   CPU(cores)   MEMORY(bytes)\ntestapp-5955cd6f8b-dbvgd   envoy                  4m           70Mi\ntestapp-5955cd6f8b-dbvgd   server                 1m           51Mi\ntestapp-5955cd6f8b-dbvgd   test-application       1m           11Mi\n</code></pre> <p>Resource utilization of the Kyverno Authz Server container after 100 requests:</p> <pre><code>POD                        NAME                   CPU(cores)   MEMORY(bytes)\ntestapp-5955cd6f8b-dbvgd   envoy                  110m         70Mi\ntestapp-5955cd6f8b-dbvgd   server                 895m         60Mi\ntestapp-5955cd6f8b-dbvgd   test-application       17m          15Mi\n</code></pre> <p>Observations:</p> <ul> <li>The CPU utilization of the Kyverno Authz Server container increased significantly from 1m to 895m after receiving 100 requests during the load test.</li> <li>The memory utilization also increased, but to a lesser extent, from 51Mi to 60Mi.</li> </ul> <p>Resource utilization of the Kyverno Authz Server container after load completion:</p> <pre><code>POD                        NAME                   CPU(cores)   MEMORY(bytes)\ntestapp-5955cd6f8b-dbvgd   envoy                  4m           70Mi\ntestapp-5955cd6f8b-dbvgd   server                 1m           51Mi\ntestapp-5955cd6f8b-dbvgd   test-application       1m           11Mi\n</code></pre> </li> </ul> <p>Observations:</p> <ul> <li>After the load test completed and the request volume returned to normal levels, the CPU and memory utilization of the Kyverno Authz Server container returned to their initial values. This indicates that the Kyverno Authz Server can efficiently handle the increased load during the test and release the additional resources when the load subsides.</li> </ul> <p>Correlation with k6 results:</p> <ul> <li>The k6 script simulated a load test scenario with 100 virtual users, ramping up over 30 seconds, staying at 100 users for 1 minute, and then ramping down over 30 seconds.</li> <li>During the load test, when the request volume was at its peak (100 virtual users), the Kyverno Authz Server container experienced a significant increase in CPU utilization, reaching 895m.</li> <li>This CPU utilization spike aligns with the increased processing demand on the Kyverno Authz Server to evaluate the incoming requests against the configured Kyverno policies.</li> <li>The memory utilization increase during the load test was relatively modest, suggesting that the policy evaluation did not significantly impact the memory requirements of the Kyverno Authz Server.</li> </ul>"},{"location":"policies/","title":"Policies","text":"<p>A Kyverno <code>AuthorizationPolicy</code> is a custom Kubernetes resources and can be easily managed via Kubernetes APIs, GitOps workflows, and other existing tools.</p>"},{"location":"policies/#resource-scope","title":"Resource Scope","text":"<p>A Kyverno <code>AuthorizationPolicy</code> is a cluster-wide resource.</p>"},{"location":"policies/#api-group-and-kind","title":"API Group and Kind","text":"<p>An <code>AuthorizationPolicy</code> belongs to the <code>envoy.kyverno.io/v1alpha1</code> group and can only be of kind <code>AuthorizationPolicy</code>.</p> <pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n  - expression: &gt;\n      variables.allowed\n        ? envoy.Allowed().Response()\n        : envoy.Denied(403).Response()\n</code></pre>"},{"location":"policies/#envoy-external-authorization","title":"Envoy External Authorization","text":"<p>The Kyverno Authz Server implements the Envoy External Authorization API.</p> <p>A Kyverno <code>AuthorizationPolicy</code> analyses an Envoy CheckRequest and can make a decision by returning an Envoy CheckResponse (or nothing if no decision is made).</p>"},{"location":"policies/#cel-language","title":"CEL language","text":"<p>An <code>AuthorizationPolicy</code> uses the CEL language to process the <code>CheckRequest</code> sent by Envoy.</p> <p>CEL is an expression language that\u2019s fast, portable, and safe to execute in performance-critical applications.</p>"},{"location":"policies/#policy-structure","title":"Policy structure","text":"<p>A Kyverno <code>AuthorizationPolicy</code> is made of:</p> <ul> <li>A failure policy</li> <li>Eventually some variables</li> <li>The authorization rules</li> </ul>"},{"location":"policies/authorization-rules/","title":"Authorization rules","text":"<p>An <code>AuthorizationPolicy</code> main element is the authorization rules defined in <code>authorizations</code>.</p> <p>Every authorization rule must contain a CEL <code>expression</code>. It is expected to return an Envoy <code>CheckResponse</code> describing the decision made by the rule (or nothing if no decision is made).</p> <p>Creating the Envoy CheckResponse can be a tedious task, you need to remember the different types names and format.</p> <p>The CEL engine used to evaluate the authorization rules has been extended with a library to make the creation of <code>CheckResponse</code> easier. (TODO)</p>"},{"location":"policies/authorization-rules/#authorization-rules_1","title":"Authorization rules","text":"<p>The policy below will allow requests if they contain the header <code>x-force-authorized</code> with the value <code>enabled</code> or <code>true</code>. If the header is not present or has a different value, the request will be denied.</p> <pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n    # make an authorisation decision based on the value of `variables.allowed`\n    # - allow the request if it is `true`\n    # - deny the request with 403 status code if it is `false`\n  - expression: &gt;\n      variables.allowed\n        ? envoy.Allowed().Response()\n        : envoy.Denied(403).Response()\n</code></pre> <p>In this simple rule:</p> <ul> <li> <p><code>envoy.Allowed().Response()</code></p> <p>Creates a <code>CheckResponse</code> to allow the request</p> </li> <li> <p><code>envoy.Denied(403).Response()</code></p> <p>Creates a <code>CheckResponse</code> to deny the request with status code <code>403</code></p> </li> </ul> <p>However, we can do a lot more with Envoy's <code>CheckResponse</code>. Envoy can add or remove headers, query parameters, and even change the response body. (TODO)</p>"},{"location":"policies/authorization-rules/#multiple-rules","title":"Multiple rules","text":"<p>In the example above, we combined allow and denied response handling in a single expression. However it is possible to use multiple expressions, the first one returning a non null response will be used by the Kyverno Authz Server:</p> <pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n    # allow the request if `variables.allowed` is `true`\n    # or delegate the decision to the next rule\n  - expression: &gt;\n      variables.allowed\n        ? envoy.Allowed().Response()\n        : null\n    # deny the request with 403 status code\n  - expression: &gt;\n      envoy.Denied(403).Response()\n</code></pre>"},{"location":"policies/authorization-rules/#the-hard-way","title":"The hard way","text":"<p>Below is the same policy, creating the <code>CheckResponses</code> manually:</p> <pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n  - expression: &gt;\n      variables.allowed\n        ? envoy.service.auth.v3.CheckResponse{\n            status: google.rpc.Status{\n              code: 0\n            },\n            ok_response: envoy.service.auth.v3.OkHttpResponse{}\n          }\n        : envoy.service.auth.v3.CheckResponse{\n            status: google.rpc.Status{\n              code: 7\n            },\n            denied_response: envoy.service.auth.v3.DeniedHttpResponse{\n              status: envoy.type.v3.HttpStatus{\n                code: 403\n              }\n            }\n          }\n</code></pre>"},{"location":"policies/authorization-rules/#advanced-example","title":"Advanced example","text":"<p>This second policy showcases a more advanced example.</p> <pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\") in [\"enabled\", \"true\"]\n  - name: force_unauthenticated\n    expression: object.attributes.request.http.headers[?\"x-force-unauthenticated\"].orValue(\"\") in [\"enabled\", \"true\"]\n  authorizations:\n  - expression: &gt;\n      variables.force_authorized &amp;&amp; !variables.force_unauthenticated\n      ? envoy\n          .Allowed()\n          .WithHeader(\"x-validated-by\", \"my-security-checkpoint\")\n          .WithoutHeader(\"x-force-authorized\")\n          .WithResponseHeader(\"x-add-custom-response-header\", \"added\")\n          .Response()\n          .WithMetadata({\"my-new-metadata\": \"my-new-value\"})\n      : envoy\n          .Denied(variables.force_unauthenticated ? 401 : 403)\n          .WithBody(variables.force_unauthenticated ? \"Authentication Failed\" : \"Unauthorized Request\")\n          .Response()\nEOF\n</code></pre> <p>Notice this policy uses helper functions:</p> <ul> <li> <p><code>WithHeader</code></p> <p>To add a request header</p> </li> <li> <p><code>WithoutHeader</code></p> <p>To remove a request header</p> </li> <li> <p><code>WithResponseHeader</code></p> <p>To add a response header</p> </li> <li> <p><code>WithBody</code></p> <p>To modify the response body</p> </li> <li> <p><code>WithMetadata</code></p> <p>To add dynamic metadata in the envoy filter chain (this is useful when you want to pass data to another filter in the chain or you want to print it in the application logs)</p> </li> </ul>"},{"location":"policies/failure-policy/","title":"Failure policy","text":"<p>FailurePolicy defines how to handle failures for the policy.</p> <p>Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions.</p> <p>Allowed values are:</p> <ul> <li><code>Ignore</code></li> <li><code>Fail</code></li> </ul> <p>If not set, the failure policy defaults to <code>Fail</code>.</p> <p>Info</p> <p>FailurePolicy does not define how validations that evaluate to <code>false</code> are handled.</p>"},{"location":"policies/failure-policy/#fail","title":"Fail","text":"<pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  # if something fails the request will be denied\n  failurePolicy: Fail\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n  - expression: &gt;\n      variables.allowed\n        ? envoy.Allowed().Response()\n        : envoy.Denied(403).Response()\n</code></pre>"},{"location":"policies/failure-policy/#ignore","title":"Ignore","text":"<pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  # if something fails the failure will be ignored and the request will be allowed\n  failurePolicy: Ignore\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n  - expression: &gt;\n      variables.allowed\n        ? envoy.Allowed().Response()\n        : envoy.Denied(403).Response()\n</code></pre>"},{"location":"policies/variables/","title":"Variables","text":"<p>A Kyverno <code>AuthorizationPolicy</code> can define <code>variables</code> that will be made available to all authorization rules.</p> <p>Variables can be used in composition of other expressions. Each variable is defined as a named CEL expression. The will be available under <code>variables</code> in other expressions of the policy.</p> <p>The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, variables must be sorted by the order of first appearance and acyclic.</p> <p>Info</p> <p>The incoming <code>CheckRequest</code> from Envoy is made available to the policy under the <code>object</code> identifier.</p>"},{"location":"policies/variables/#variables_1","title":"Variables","text":"<pre><code>apiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n    # `force_authorized` references the 'x-force-authorized' header\n    # from the envoy check request (or '' if not present)\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n    # `allowed` will be `true` if `variables.force_authorized` has the\n    # value 'enabled' or 'true'\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n    # make an authorisation decision based on the value of `variables.allowed`\n  - expression: &gt;\n      variables.allowed\n        ? envoy.Allowed().Response()\n        : envoy.Denied(403).Response()\n</code></pre>"},{"location":"quick-start/","title":"Quick start","text":"<p>The Kyverno Envoy Plugin is a powerful tool that integrates with the Envoy proxy.</p> <p>It allows you to enforce Kyverno policies on incoming and outgoing traffic in a service mesh environment, providing an additional layer of security and control over your applications.</p>"},{"location":"quick-start/#overview","title":"Overview","text":"<p>Envoy is a Layer 7 proxy and communication bus tailored for large-scale, modern service-oriented architectures. Starting from version 1.7.0, Envoy includes an External Authorization filter that interfaces with an authorization service to determine the legitimacy of incoming requests.</p> <p>This functionality allows authorization decisions to be offloaded to an external service, which can access the request context. The request context includes details such as the origin and destination of the network activity, as well as specifics of the network request (e.g., HTTP request). This information enables the external service to make a well-informed decision regarding the authorization of the incoming request processed by Envoy.</p>"},{"location":"quick-start/#what-is-the-kyverno-envoy-plugin","title":"What is the Kyverno Envoy Plugin?","text":"<p>The Kyverno Envoy Plugin is gRPC server that implements Envoy External Authorization API.</p> <p>This allows you to enforce Kyverno policies on incoming and outgoing traffic in a service mesh environment, providing an additional layer of security and control over your applications. You can use this version of Kyverno to enforce fine-grained, context-aware access control policies with Envoy without modifying your microservice.</p>"},{"location":"quick-start/#how-does-this-work","title":"How does this work?","text":"<p>In addition to the Envoy sidecar, your application pods will include a Kyverno Authz Server component, either as a sidecar or as a separate pod. When Envoy receives an API request intended for your microservice, it consults the Kyverno Authz Server to determine whether the request should be permitted or not.</p> <p>Performing policy evaluations locally with Envoy is advantageous, as it eliminates the need for an additional network hop for authorization checks, thus enhancing both performance and availability.</p> <p>Info</p> <p>The Kyverno Envoy Plugin is frequently deployed in Kubernetes environments as a sidecar container or as a separate pod. Additionally, it can be used in other environments as a standalone process running alongside Envoy.</p>"},{"location":"quick-start/#additional-resources","title":"Additional Resources","text":"<p>See the following pages on envoyproxy.io for more information on external authorization:</p> <ul> <li>External Authorization to learn about the External Authorization filter.</li> <li>Network and HTTP for details on configuring the External Authorization filter.</li> </ul>"},{"location":"quick-start/authz-server/","title":"Authz server","text":""},{"location":"quick-start/authz-server/#setup","title":"Setup","text":"<p>In this quick start guide we will deploy the Kyverno Authz Server inside a cluster.</p> <p>Then you will interface Istio, an open source service mesh with the Kyverno Authz Server to delegate the request authorisation based on policies installed in the cluster.</p>"},{"location":"quick-start/authz-server/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster with Istio installed</li> <li>Helm to install the Kyverno Authz Server</li> <li>istioctl to configure the mesh</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"quick-start/authz-server/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind and istall Istio with Helm.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n\n# install istio\nhelm install istio-base --namespace istio-system --create-namespace --wait --repo https://istio-release.storage.googleapis.com/charts base\nhelm install istiod --namespace istio-system --create-namespace --wait --repo https://istio-release.storage.googleapis.com/charts istiod\n</code></pre>"},{"location":"quick-start/authz-server/#deploy-the-kyverno-authz-server","title":"Deploy the Kyverno Authz Server","text":"<p>The first step is to deploy the Kyverno Authz Server.</p> <pre><code># create the kyverno namespace\nkubectl create ns kyverno\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace kyverno istio-injection=enabled\n\n# deploy the kyverno authz server\nhelm install kyverno-authz-server --namespace kyverno --wait --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server\n</code></pre>"},{"location":"quick-start/authz-server/#configure-the-mesh","title":"Configure the mesh","text":"<p>We need to register the Kyverno Authz Server with Istio.</p> <pre><code># configure the mesh\nistioctl install -y -f - &lt;&lt;EOF\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n  meshConfig:\n    accessLogFile: /dev/stdout\n    extensionProviders:\n    - name: kyverno-authz-server.local\n      envoyExtAuthzGrpc:\n        service: kyverno-authz-server.kyverno.svc.cluster.local\n        port: '9081'\nEOF\n</code></pre> <p>Notice that in the configuration, we define an <code>extensionProviders</code> section that points to the Kyverno Authz Server installation:</p> <pre><code>[...]\n    extensionProviders:\n    - name: kyverno-authz-server.local\n      envoyExtAuthzGrpc:\n        service: kyverno-authz-server.kyverno.svc.cluster.local\n        port: '9081'\n[...]\n</code></pre>"},{"location":"quick-start/authz-server/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace demo istio-injection=enabled\n\n# deploy the httpbin application\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml -n demo\n</code></pre>"},{"location":"quick-start/authz-server/#deploy-an-istio-authorizationpolicy","title":"Deploy an Istio AuthorizationPolicy","text":"<p>An <code>AuthorizationPolicy</code> is the custom Istio resource that defines the services that will be protected by the Kyverno Authz Server.</p> <pre><code># deploy istio authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: kyverno-authz-server\n  namespace: demo\nspec:\n  action: CUSTOM\n  provider:\n    name: kyverno-authz-server.local\n  rules:\n  - {} # empty rules, it will apply to all requests\nEOF\n</code></pre> <p>Notice that in this resource, we define the Kyverno Authz Server <code>extensionProvider</code> you set in the Istio configuration:</p> <pre><code>[...]\n  provider:\n    name: kyverno-authz-server.local\n[...]\n</code></pre>"},{"location":"quick-start/authz-server/#deploy-a-kyverno-authorizationpolicy","title":"Deploy a Kyverno AuthorizationPolicy","text":"<p>A Kyverno <code>AuthorizationPolicy</code> defines the rules used by the Kyverno authz server to make a decision based on a given Envoy CheckRequest.</p> <p>It uses the CEL language to analyse the incoming <code>CheckRequest</code> and is expected to produce a CheckResponse in return.</p> <pre><code># deploy kyverno authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\")\n  - name: allowed\n    expression: variables.force_authorized in [\"enabled\", \"true\"]\n  authorizations:\n  - expression: &gt;\n      variables.allowed\n        ? envoy.Allowed().Response()\n        : envoy.Denied(403).Response()\nEOF\n</code></pre> <p>This simple policy will allow requests if they contain the header <code>x-force-authorized</code> with the value <code>enabled</code> or <code>true</code>. If the header is not present or has a different value, the request will be denied.</p>"},{"location":"quick-start/authz-server/#testing","title":"Testing","text":"<p>At this we have deployed and configured Istio, the Kyverno Authz Server, a sample application, and the authorization policies.</p>"},{"location":"quick-start/authz-server/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"quick-start/authz-server/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"quick-start/authz-server/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send request to the sample application and verify the result.</p> <p>The following request will return <code>403</code> (denied by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get\n</code></pre> <p>The following request will return <code>200</code> (allowed by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"x-force-authorized: true\"\n</code></pre>"},{"location":"quick-start/authz-server/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the quick start guide!</p> <p>This tutorial demonstrated how to configure Istio\u2019s EnvoyFilter to utilize the Kyverno Authz Server as an external authorization service.</p>"},{"location":"quick-start/next-steps/","title":"Next steps","text":"<p>We covered the main components of the Kyverno Envoy Plugin.</p> <p>Tip</p> <p>If there's anything you would like to be improved, please reach out, we will be happy to discuss and improve as much as we can.</p> <p>To continue exploring and learn more about the Kyverno Envoy Plugin:</p> <ul> <li>Start writing your own policies</li> <li>Browse the tutorials section</li> <li>Consult the Reference documentation</li> <li>Engage with our Community and start contributing</li> </ul>"},{"location":"quick-start/sidecar-injector/","title":"Sidecar injector","text":"<p>This is not ready yet, hopefully it will be available soon!</p>"},{"location":"reference/","title":"Reference documentation","text":"<p>Info</p> <p>Select an item in the navigation menu to browse a specific page.</p>"},{"location":"reference/json-schemas/","title":"JSON schemas","text":"<p>JSON schemas for the Kyverno Envoy Plugin are available:</p> <ul> <li>AuthorizationPolicy (v1alpha1)</li> </ul> <p>They can be used to enable validation and autocompletion in your IDE.</p>"},{"location":"reference/json-schemas/#vs-code","title":"VS code","text":"<p>In VS code, simply add a comment on top of your YAML resources.</p>"},{"location":"reference/json-schemas/#authorizationpolicy","title":"AuthorizationPolicy","text":"<pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/kyverno-envoy-plugin/main/.schemas/json/authorizationpolicy-envoy-v1alpha1.json\napiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo-policy.example.com\nspec:\n  variables:\n  - name: force_authorized\n    expression: object.attributes.request.http.headers[?\"x-force-authorized\"].orValue(\"\") in [\"enabled\", \"true\"]\n  - name: force_unauthenticated\n    expression: object.attributes.request.http.headers[?\"x-force-unauthenticated\"].orValue(\"\") in [\"enabled\", \"true\"]\n  authorizations:\n  - expression: &gt;\n      variables.force_authorized &amp;&amp; !variables.force_unauthenticated\n      ? envoy\n          .Allowed()\n          .WithHeader(\"x-validated-by\", \"my-security-checkpoint\")\n          .WithoutHeader(\"x-force-authorized\")\n          .WithResponseHeader(\"x-add-custom-response-header\", \"added\")\n          .Response()\n          .WithMetadata({\"my-new-metadata\": \"my-new-value\"})\n      : envoy\n          .Denied(variables.force_unauthenticated ? 401 : 403)\n          .WithBody(variables.force_unauthenticated ? \"Authentication Failed\" : \"Unauthorized Request\")\n          .Response()\n</code></pre>"},{"location":"reference/apis/policy.v1alpha1/","title":"policy (v1alpha1)","text":""},{"location":"reference/apis/policy.v1alpha1/#resource-types","title":"Resource Types","text":"<ul> <li>AuthorizationPolicy</li> </ul>"},{"location":"reference/apis/policy.v1alpha1/#envoy-kyverno-io-v1alpha1-AuthorizationPolicy","title":"AuthorizationPolicy","text":"<p>AuthorizationPolicy defines an authorization policy resource</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>envoy.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>AuthorizationPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>AuthorizationPolicySpec</code> No description provided."},{"location":"reference/apis/policy.v1alpha1/#envoy-kyverno-io-v1alpha1-Authorization","title":"Authorization","text":"<p>Appears in:</p> <ul> <li>AuthorizationPolicySpec</li> </ul> <p>Authorization defines an authorization policy rule</p> Field Type Required Inline Description <code>expression</code> <code>string</code> <p>Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to CEL variables as well as some other useful variables: - 'object' - The object from the incoming request. (https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/external_auth.proto#service-auth-v3-checkrequest) CEL expressions are expected to return an envoy CheckResponse (https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/external_auth.proto#service-auth-v3-checkresponse).</p>"},{"location":"reference/apis/policy.v1alpha1/#envoy-kyverno-io-v1alpha1-AuthorizationPolicySpec","title":"AuthorizationPolicySpec","text":"<p>Appears in:</p> <ul> <li>AuthorizationPolicy</li> </ul> <p>AuthorizationPolicySpec defines the spec of an authorization policy</p> Field Type Required Inline Description <code>failurePolicy</code> <code>admissionregistration/v1.FailurePolicyType</code> <p>FailurePolicy defines how to handle failures for the policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions. FailurePolicy does not define how validations that evaluate to false are handled. Allowed values are Ignore or Fail. Defaults to Fail.</p> <code>variables</code> <code>[]admissionregistration/v1.Variable</code> <p>Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy. The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.</p> <code>authorizations</code> <code>[]Authorization</code> <p>Authorizations contain CEL expressions which is used to apply the authorization.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>If you didn't read the Quick start section yet, we really recommend giving it a try to discover and familiarise with the Kyverno Envoy Plugin components first.</p> <ul> <li>Authz server quick start</li> <li>Sidecar injector quick start</li> </ul>"},{"location":"tutorials/mtls-istio/","title":"Istio mTLS","text":"<p>Istio is an open source service mesh for managing the different microservices that make up a cloud-native application. Istio provides a mechanism to use a service as an external authorizer with the AuthorizationPolicy API. </p> <p>The kyverno-envoy-plugin is a custom Envoy filter that is used to intercept the incoming request to the service and validate the request using the kyverno engine. </p> <p>In this tutorial we will create a two simple microservices which are going to make external authorization to a single kyverno-envoy-plugin service as a separate pod in the mesh. With this tutorial we are going to understand how to use multiple microservices to make authorization decisions to a single ext-authz server. </p> <p></p> <p>To handle multiple different requests effectively, we leverage the <code>match/exclude</code> declarations to route the specific authz-request to the appropriate validating policy within the Kyverno engine. This approach allows us to execute the right validating policy for each request, enabling efficient and targeted request processing.</p>"},{"location":"tutorials/mtls-istio/#example-policy","title":"Example Policy","text":"<p>The following policies will be executed by the kyverno-envoy-plugin to validate incoming requests made specifically to the <code>testapp-1</code> service. By leveraging the match declarations, we ensure that these policies are executed only when the incoming request is destined for the <code>testapp-1</code> service. This targeted approach allows us to apply the appropriate validation rules and policies based on the specific service being accessed.</p> <p><pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test-policy\nspec:\n  rules:\n    - name: deny-external-calls-testapp-1\n      match:\n        any:\n        - request:\n            http:\n                host: 'testapp-1.demo.svc.cluster.local:8080'\n      assert:\n        all:\n        - message: \"The GET method is restricted to the /book path.\"\n          check:\n            request:\n                http:\n                    method: 'GET'\n                    path: '/book'\n</code></pre> To execute the policy when the incoming request is made to <code>testapp-2</code> service we need to use the <code>match</code> declarations.</p> <p><pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n  name: test-policy\nspec:\n  rules:\n    - name: deny-external-calls-testapp-2\n      match:\n        any:\n        - request:\n            http:\n                host: 'testapp-2.demo.svc.cluster.local:8080'\n      assert:\n        all:\n        - message: \"The GET method is restricted to the /movies path.\"\n          check:\n            request:\n                http:\n                    method: 'GET'\n                    path: '/movie'   \n</code></pre> The example json request for above payload will be like below.</p> <pre><code>{\n  \"source\": {\n    \"address\": {\n      \"socketAddress\": {\n        \"address\": \"10.244.0.71\",\n        \"portValue\": 33880\n      }\n    }\n  },\n  \"destination\": {\n    \"address\": {\n      \"socketAddress\": {\n        \"address\": \"10.244.0.65\",\n        \"portValue\": 8080\n      }\n    }\n  },\n  \"request\": {\n    \"time\": \"2024-05-20T07:52:01.566887Z\",\n    \"http\": {\n      \"id\": \"5415544797791892902\",\n      \"method\": \"GET\",\n      \"headers\": {\n        \":authority\": \"testapp-2.demo.svc.cluster.local:8080\",\n        \":method\": \"GET\",\n        \":path\": \"/movie\",\n        \":scheme\": \"http\",\n        \"user-agent\": \"Wget\",\n        \"x-forwarded-proto\": \"http\",\n        \"x-request-id\": \"a3ad9f03-c9cd-4eab-97d1-83e90e0cee1b\"\n      },\n      \"path\": \"/movie\",\n      \"host\": \"testapp-2.demo.svc.cluster.local:8080\",\n      \"scheme\": \"http\",\n      \"protocol\": \"HTTP/1.1\"\n    }\n  },\n  \"metadataContext\": {},\n  \"routeMetadataContext\": {}\n}\n</code></pre> <p>To enhance security, we can implement Mutual TLS (mTLS) for peer authentication between test services and kyverno-envoy-plugin. Since we are currently using JSON request data to validate incoming requests, there is a potential risk of this data being tampered with during transit. Implementing mTLS would ensure that communication between services is encrypted and authenticated, mitigating the risk of unauthorized data modification.</p> <pre><code>apiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-demo\n  namespace: demo\nspec:\n  mtls:\n    mode: STRICT\n---\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-testapp-1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: testapp-1\n  mtls:\n    mode: STRICT\n  portLevelMtls:\n    8080:\n      mode: PERMISSIVE\n---\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-testapp-2\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: testapp-2\n  mtls:\n    mode: STRICT\n  portLevelMtls:\n    8080:\n      mode: PERMISSIVE\n</code></pre>"},{"location":"tutorials/mtls-istio/#demo-instructions","title":"Demo instructions","text":""},{"location":"tutorials/mtls-istio/#required-tools","title":"Required tools","text":"<ol> <li><code>kind</code></li> <li><code>kubectl</code></li> <li><code>helm</code></li> </ol>"},{"location":"tutorials/mtls-istio/#create-a-local-cluster-and-install-istio","title":"Create a local cluster and install Istio","text":"<p>The tutorial also requries istio v1.19.0 or later. To install istio, follow the instructions here or run the below script it will create a kind cluster and install istio</p> <pre><code>#!/bin/bash\n\nKIND_IMAGE=kindest/node:v1.29.2\nISTIO_REPO=https://istio-release.storage.googleapis.com/charts\nISTIO_NS=istio-system\n\n# Create Kind cluster\nkind create cluster --image $KIND_IMAGE --wait 1m --config - &lt;&lt;EOF\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n  - role: control-plane\n    kubeadmConfigPatches:\n      - |-\n        kind: InitConfiguration\n        nodeRegistration:\n          kubeletExtraArgs:\n            node-labels: \"ingress-ready=true\"\n    extraPortMappings:\n      - containerPort: 80\n        hostPort: 80\n        protocol: TCP\n      - containerPort: 443\n        hostPort: 443\n        protocol: TCP\n  - role: worker\nEOF\n\n# Install Istio components\nhelm upgrade --install istio-base       --namespace $ISTIO_NS           --create-namespace --wait --repo $ISTIO_REPO base\nhelm upgrade --install istiod           --namespace $ISTIO_NS           --create-namespace --wait --repo $ISTIO_REPO istiod\n</code></pre>"},{"location":"tutorials/mtls-istio/#sample-applications","title":"Sample applications","text":"<p>Manifests for the sample applications are available in test-application-1.yaml and test-application-2.yaml. The sample app <code>testapp-1</code> provides information about books in a collection and exposes APIs to get, create and delete Book resources. The sample app <code>testapp-2</code> provides information about movies in a collection and exposes APIs to get, create and delete Movie resources.</p> <pre><code>$ kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: demo\n  labels:\n    istio-injection: enabled\nEOF\n</code></pre> <pre><code># test-application-1.yaml\n# Deploy sample application testapp-1 \n$ kubectl apply -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: testapp-1\n  namespace: demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: testapp-1\n  template:\n    metadata:\n      labels:\n        app: testapp-1\n    spec:\n      containers:\n      - name: testapp-1\n        image: sanskardevops/test-application:0.0.1\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: testapp-1\n  namespace: demo\nspec:\n  type: NodePort\n  selector:\n    app: testapp-1\n  ports:\n  - port: 8080\n    targetPort: 8080\nEOF\n</code></pre> <pre><code># test-application-2.yaml\n# Deploy sample application testapp-2\n$ kubectl apply -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: testapp-2\n  namespace: demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: testapp-2\n  template:\n    metadata:\n      labels:\n        app: testapp-2\n    spec:\n      containers:\n      - name: testapp-2\n        image: sanskardevops/test-application-1:0.0.3\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: testapp-2\n  namespace: demo\nspec:\n  type: ClusterIP\n  selector:\n    app: testapp-2\n  ports:\n  - port: 8080\n    targetPort: 8080\nEOF\n</code></pre>"},{"location":"tutorials/mtls-istio/#calling-the-sample-applications","title":"Calling the sample applications","text":"<p>We are going to call the sample applications using a pod in the cluster.</p> <pre><code>$ kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --output-document - testapp-1.demo.svc.cluster.local:8080/book\n</code></pre> <pre><code>[{\"id\":\"1\",\"bookname\":\"Harry Potter\",\"author\":\"J.K. Rowling\"},{\"id\":\"2\",\"bookname\":\"Animal Farm\",\"author\":\"George Orwell\"}]\npod \"test\" deleted\n</code></pre> <pre><code>$ kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --output-document - testapp-2.demo.svc.cluster.local:8080/movie\n</code></pre> <pre><code>[{\"id\":\"1\",\"Moviename\":\"Inception\",\"Actor\":\"Leonardo DiCaprio\"},{\"id\":\"2\",\"Moviename\":\"Batman\",\"Actor\":\"Jack Nicholson\"}]\npod \"test\" deleted\n</code></pre>"},{"location":"tutorials/mtls-istio/#register-authorization-provider","title":"Register authorization provider","text":"<p>Edit the mesh configmap to register authorization provider with the following command:</p> <p><pre><code>$ kubectl edit configmap istio -n istio-system\n</code></pre> In the editor, add the extension provider definitions to the mesh configmap.</p> <pre><code>  data:\n    mesh: |-   \n      extensionProviders:\n      - name: \"kyverno-ext-authz-grpc\"\n        envoyExtAuthzGrpc:\n          service: \"ext-authz.demo.svc.cluster.local\"\n          port: \"9000\"\n</code></pre>"},{"location":"tutorials/mtls-istio/#authorization-policy","title":"Authorization policy","text":"<p>Now we can deploy an istio <code>AuthorizationPolicy</code>: AuthorizationPolicy to tell Istio to use kyverno-envoy-plugin as the Authz Server</p> <pre><code>$ kubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: kyverno-ext-authz-grpc\n  namespace: demo\nspec:\n  action: CUSTOM\n  provider:\n    # The provider name must match the extension provider defined in the mesh config.\n    name: kyverno-ext-authz-grpc\n  rules:\n  # The rules specify when to trigger the external authorizer.\n  - to:\n    - operation:\n        paths: [\"/book\",\"/movie\"]\nEOF        \n</code></pre> <p>This policy configures an external service for authorization. Note that the service is not specified directly in the policy but using a provider.name field. The rules specify that requests to paths <code>/book</code> and <code>/movies</code>.</p>"},{"location":"tutorials/mtls-istio/#authorization-service-deployment","title":"Authorization service deployment","text":"<p>The deployment manifest of the authorization service is available in ext-auth-server.yaml. This deployment require policy through configmap .</p> <p>Apply the policy configmap with the following command.</p> <pre><code>$ kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: policy-files\n  namespace: demo\ndata:\n  policy1.yaml: |\n    apiVersion: json.kyverno.io/v1alpha1\n    kind: ValidatingPolicy\n    metadata:\n      name: test-policy\n    spec:\n      rules:\n        - name: deny-external-calls-testapp-1\n          match:\n            any:\n            - request:\n                http:\n                    host: 'testapp-1.demo.svc.cluster.local:8080'\n          assert:\n            all:\n            - message: \"The GET method is restricted to the /book path.\"\n              check:\n                request:\n                    http:\n                        method: 'GET'\n                        path: '/book'\n  policy2.yaml: |\n    apiVersion: json.kyverno.io/v1alpha1\n    kind: ValidatingPolicy\n    metadata:\n      name: test-policy\n    spec:\n      rules:\n        - name: deny-external-calls-testapp-2\n          match:\n            any:\n            - request:\n                http:\n                    host: 'testapp-2.demo.svc.cluster.local:8080'\n          assert:\n            all:\n            - message: \"The GET method is restricted to the /movies path.\"\n              check:\n                request:\n                    http:\n                        method: 'GET'\n                        path: '/movie'                \nEOF                        \n</code></pre> <pre><code># ext-auth-server.yaml\n# Deploy the kyverno external authorizer server\n$ kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: ext-authz\n  labels:\n    app: ext-authz\n  namespace: demo  \nspec:\n  ports:\n  - name: http\n    port: 8000\n    targetPort: 8000\n  - name: grpc\n    port: 9000\n    targetPort: 9000\n  selector:\n    app: ext-authz\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ext-authz\n  namespace: demo \nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ext-authz \n  template:\n    metadata:\n      labels:\n        app: ext-authz\n    spec:\n      containers:\n      - image: sanskardevops/plugin:0.0.29\n        imagePullPolicy: IfNotPresent\n        name: ext-authz\n        ports:\n        - containerPort: 8000\n        - containerPort: 9000\n        args:\n        - \"serve\"\n        - \"--policy=/policies/policy1.yaml\"\n        - \"--policy=/policies/policy2.yaml\"\n        volumeMounts:\n        - name: policy-files\n          mountPath: /policies\n      volumes:\n      - name: policy-files\n        configMap:\n          name: policy-files\nEOF\n</code></pre> <p>Verify the sample external authorizer is up and running: <pre><code>$ kubectl logs \"$(kubectl get pod -l app=ext-authz -n demo -o jsonpath={.items..metadata.name})\" -n demo -c ext-authz -f\n</code></pre></p> <pre><code>Starting GRPC server on Port 9000\nStarting HTTP server on Port 8000\n</code></pre>"},{"location":"tutorials/mtls-istio/#apply-peerauthentication-policy","title":"Apply PeerAuthentication Policy","text":"<p>Apply the PeerAuthentication policy to enable mTLS for the sample applications and external authorizer.</p> <pre><code>$ kubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-demo\n  namespace: demo\nspec:\n  mtls:\n    mode: STRICT\n---\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-testapp-1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: testapp-1\n  mtls:\n    mode: STRICT\n  portLevelMtls:\n    8080:\n      mode: PERMISSIVE\n---\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-testapp-2\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: testapp-2\n  mtls:\n    mode: STRICT\n  portLevelMtls:\n    8080:\n      mode: PERMISSIVE\nEOF\n</code></pre>"},{"location":"tutorials/mtls-istio/#test-the-sample-applications","title":"Test the sample applications","text":"<p>Check on the logs of the sample applications to see that the requests are accepted and rejected</p> <p>Check on <code>GET</code> request on <code>testapp-1</code> which is allowed according to policy <code>deny-external-calls-testapp-1</code></p> <pre><code>$ kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --output-document - testapp-1.demo.svc.cluster.local:8080/book\n</code></pre> <pre><code>[{\"id\":\"1\",\"bookname\":\"Harry Potter\",\"author\":\"J.K. Rowling\"},{\"id\":\"2\",\"bookname\":\"Animal Farm\",\"author\":\"George Orwell\"}]\npod \"test\" deleted\n</code></pre> <p>Check on <code>GET</code> request on <code>testapp-2</code> which is allowed according to policy <code>deny-external-calls-testapp-2</code></p> <pre><code>$ kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --output-document - testapp-2.demo.svc.cluster.local:8080/movie\n</code></pre> <pre><code>[{\"id\":\"1\",\"Moviename\":\"Inception\",\"Actor\":\"Leonardo DiCaprio\"},{\"id\":\"2\",\"Moviename\":\"Batman\",\"Actor\":\"Jack Nicholson\"}]\npod \"test\" deleted\n</code></pre> <p>Check logs of external authorizer to see that the requests are which policy was executed for a perticular request .</p> <pre><code>$ kubectl logs \"$(kubectl get pod -l app=ext-authz -n demo -o jsonpath={.items..metadata.name})\" -n demo -c ext-authz -f\n</code></pre> <p><pre><code>Starting GRPC server on Port 9000\nStarting HTTP server on Port 8000\n2024/05/21 07:41:33 Request is initialized in kyvernojson engine .\n2024/05/21 07:41:33 Request passed the deny-external-calls-testapp-1 policy rule.\n2024/05/21 07:42:22 Request is initialized in kyvernojson engine .\n2024/05/21 07:42:22 Request passed the deny-external-calls-testapp-2 policy rule.\n</code></pre> First request was directed to testapp-1 which was allowed by the policy <code>deny-external-calls-testapp-1</code> and the second request was directed to testapp-2 which was allowed by the policy <code>deny-external-calls-testapp-2</code>.</p>"},{"location":"tutorials/mtls-istio/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure Istio's AuthorizationPolicy to utilize the kyverno-envoy-plugin as an separate pod external authorization service. By leveraging the power of Kyverno's policy engine, you can enforce fine-grained authorization rules across your microservices within the Istio service mesh.</p> <p>Additionally, the tutorial showcased the use of mTLS (Mutual TLS) to secure communication between services and the kyverno-envoy-plugin, ensuring end-to-end encryption and authentication.</p> <p>The combination of Istio's AuthorizationPolicy and the kyverno-envoy-plugin provides a flexible and powerful solution for implementing custom authorization logic in your cloud-native applications. By following this tutorial, you've gained hands-on experience in configuring and deploying this solution, setting the stage for further exploration and customization to meet your specific requirements.</p> <p>We hope this tutorial has been informative and has provided you with a solid foundation for integrating the kyverno-envoy-plugin into your Istio service mesh environment. Feel free to explore the project's documentation and community resources for further assistance and to stay updated with the latest developments.</p>"},{"location":"tutorials/standalone-envoy/","title":"Standalone Envoy","text":"<p>The tutorial shows how Envoy's External Authorization filter can be used with Kyverno as an authorization service to enforce security policies over API requests received by Envoy.</p>"},{"location":"tutorials/standalone-envoy/#overview","title":"Overview","text":"<p>In this tutorial we'll see how to use Kyverno-envoy-plugin as an External Authorization service for the Envoy proxy. The goal of the demo to show user how kyverno-envoy-plugin will work with standalone envoy and how it can be used to enforce policies to the traffic between services. The Kyverno-envoy-plugin allows configuring these Envoy proxies to query Kyverno-json for policy decisions on incoming requests. The kyverno-envoy-plugin is cofigured as a static binary and can be run as a sidecar container in the same pod as the application.</p> <p>We'll do this by:</p> <ul> <li>Running a local Kubernetes cluster</li> <li>Creating a simple authorization policy in ValidatingPolicy </li> <li>Deploying a sample application with Envoy and kyverno-envoy-plugin sidecars</li> <li>Run some sample requests to see the policy in action</li> </ul> <p>Note that other than the HTTP client and bundle server, all components are co-located in the same pod.</p>"},{"location":"tutorials/standalone-envoy/#demo-instructions","title":"Demo instructions","text":""},{"location":"tutorials/standalone-envoy/#required-tools","title":"Required tools","text":"<ol> <li><code>kind</code></li> <li><code>kubectl</code></li> </ol> <p>{{&lt; info &gt;}} If you haven't used <code>kind</code> before, you can find installation instructions in the project documentation. {{&lt;/ info &gt;}}</p>"},{"location":"tutorials/standalone-envoy/#running-a-local-kubernetes-cluster","title":"Running a local Kubernetes cluster","text":"<p>To start a local kubernetes cluster to run our demo, we'll be using kind. In order to use the kind command, you\u2019ll need to have Docker installed on your machine. </p> <p>Create a cluster with the following command:</p> <pre><code>$ kind create cluster --name kyverno-tutorial --image kindest/node:v1.29.2\nCreating cluster \"kyverno-tutorial\" ...\n \u2713 Ensuring node image (kindest/node:v1.29.2) \ud83d\uddbc\n \u2713 Preparing nodes \ud83d\udce6  \n \u2713 Writing configuration \ud83d\udcdc \n \u2713 Starting control-plane \ud83d\udd79\ufe0f \n \u2713 Installing CNI \ud83d\udd0c \n \u2713 Installing StorageClass \ud83d\udcbe \nSet kubectl context to \"kind-kyverno-tutorial\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-kyverno-tutorial\n\nThanks for using kind! \ud83d\ude0a\n</code></pre> <p>Listing the cluster nodes, should show something like this:</p> <pre><code>$ kubectl get nodes\nNAME                             STATUS   ROLES           AGE   VERSION\nkyverno-tutorial-control-plane   Ready    control-plane   79s   v1.29.2\n</code></pre>"},{"location":"tutorials/standalone-envoy/#creating-a-simple-authorization-policy","title":"Creating a simple authorization policy","text":"<p>This tutorial assumes you have some basic knowledge of validatingPolicy and assertion trees. In summary the policy below does the following:</p> <ul> <li>Checks that the JWT token is valid</li> <li>Checks that the action is allowed based on the token payload <code>role</code> and the request path</li> <li>Guests have read-only access to the <code>/book</code> endpoint, admins can create users too as long as the name is not the same as the admin's name.</li> </ul> <pre><code>apiVersion: json.kyverno.io/v1alpha1\nkind: ValidatingPolicy\nmetadata:\n    name: checkrequest\nspec:\n    rules:\n    - name: deny-guest-request-at-post\n        assert:\n        any:\n        - message: \"POST method calls at path /book are not allowed to guests users\"\n            check:\n            request:\n                http:\n                    method: POST\n                    headers:\n                        authorization:\n                            (split(@, ' ')[1]):\n                                (jwt_decode(@ , 'secret').payload.role): admin\n                    path: /book                             \n        - message: \"GET method call is allowed to both guest and admin users\"\n            check:\n            request:\n                http:\n                    method: GET\n                    headers:\n                        authorization:\n                            (split(@, ' ')[1]):\n                                (jwt_decode(@ , 'secret').payload.role): admin\n                    path: /book \n        - message: \"GET method call is allowed to both guest and admin users\"\n            check:\n            request:\n                http:\n                    method: GET\n                    headers:\n                        authorization:\n                            (split(@, ' ')[1]):\n                                (jwt_decode(@ , 'secret').payload.role): guest\n                    path: /book \n</code></pre> <p>Create a file called policy.yaml with the above content and store it in a configMap:</p> <pre><code>$ kubectl create configmap policy --from-file=policy.yaml\n</code></pre>"},{"location":"tutorials/standalone-envoy/#deploying-an-application-with-envoy-and-kyverno-envoy-plugin-sidecars","title":"Deploying an application with Envoy and Kyverno-Envoy-Plugin sidecars","text":"<p>In this tutorial, we are manually configuring the Envoy proxy sidecar to intermediate HTTP traffic from clients and our application. Envoy will consult Kyverno-Envoy-Plugin to make authorization decisions for each request by sending <code>CheckRequest</code> gRPC messages over a gRPC connection.</p> <p>We will use the following Envoy configuration to achieve this. In summary, this configures Envoy to:</p> <ul> <li>Listen on Port <code>7000</code> for HTTP traffic</li> <li>Consult Kyverno-Envoy-Plugin at <code>127.0.0.1:9000</code> for authorization decisions and deny failing requests</li> <li>Forward request to the application at <code>127.0.0.1:8080</code> if ok.</li> </ul> <pre><code>    static_resources:\n      listeners:\n      - address:\n          socket_address:\n            address: 0.0.0.0\n            port_value: 7000\n        filter_chains:\n        - filters:\n          - name: envoy.filters.network.http_connection_manager\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n              codec_type: auto\n              stat_prefix: ingress_http\n              route_config:\n                name: local_route\n                virtual_hosts:\n                - name: backend\n                  domains:\n                  - \"*\"\n                  routes:\n                  - match:\n                      prefix: \"/\"\n                    route:\n                      cluster: service\n              http_filters:\n              - name: envoy.ext_authz\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\n                  transport_api_version: V3\n                  with_request_body:\n                    max_request_bytes: 8192\n                    allow_partial_message: true\n                  failure_mode_allow: false\n                  grpc_service:\n                    google_grpc:\n                      target_uri: 127.0.0.1:9000\n                      stat_prefix: ext_authz\n                    timeout: 0.5s\n              - name: envoy.filters.http.router\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n      clusters:\n      - name: service\n        connect_timeout: 0.25s\n        type: strict_dns\n        lb_policy: round_robin\n        load_assignment:\n          cluster_name: service\n          endpoints:\n          - lb_endpoints:\n            - endpoint:\n                address:\n                  socket_address:\n                    address: 127.0.0.1\n                    port_value: 8080\n    admin:\n      access_log_path: \"/dev/null\"\n      address:\n        socket_address:\n          address: 0.0.0.0\n          port_value: 8001\n    layered_runtime:\n      layers:\n        - name: static_layer_0\n          static_layer:\n            envoy:\n              resource_limits:\n                listener:\n                  example_listener_name:\n                    connection_limit: 10000\n            overload:\n              global_downstream_max_connections: 50000\n</code></pre> <p>Create a <code>ConfigMap</code> containing the above configuration by running:</p> <p><pre><code>$ kubectl create configmap proxy-config --from-file envoy.yaml \n</code></pre> Our application will be configured using a <code>Deployment</code> and <code>Service</code>. There are few things to note:</p> <ul> <li>The pods have an <code>initContainer</code> that configures the <code>iptables</code> rules to redirect traffic to the Envoy Proxy sidecar.</li> <li>The <code>test-application</code> container is simple go application stores book information in-memory state.</li> <li>The <code>envoy</code> container is configured to use <code>proxy-config</code> <code>ConfigMap</code> as the Envoy configuration we created earlier</li> <li>The <code>kyverno-envoy-plugin</code> container is configured to use <code>policy</code> <code>ConfigMap</code> as the Kyverno policy we created earlier</li> </ul> <pre><code># test-application.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: testapp\n  namespace: demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: testapp\n  template:\n    metadata:\n      labels:\n        app: testapp\n    spec:\n      initContainers:\n        - name: proxy-init\n          image: sanskardevops/proxyinit:latest\n          # Configure the iptables bootstrap script to redirect traffic to the\n          # Envoy proxy on port 8000, specify that Envoy will be running as user\n          # 1111, and that we want to exclude port 8181 from the proxy for the Kyverno health checks.\n          # These values must match up with the configuration\n          # defined below for the \"envoy\" and \"kyverno-envoy-plugin\" containers.\n          args: [\"-p\", \"7000\", \"-u\", \"1111\", -w, \"8181\"]\n          securityContext:\n            capabilities:\n              add:\n                - NET_ADMIN\n            runAsNonRoot: false\n            runAsUser: 0\n      containers:\n        - name: test-application\n          image: sanskardevops/test-application:0.0.1\n          ports:\n            - containerPort: 8080\n        - name: envoy\n          image: envoyproxy/envoy:v1.30-latest\n          securityContext:\n            runAsUser: 1111\n          imagePullPolicy: IfNotPresent\n          volumeMounts:\n            - readOnly: true\n              mountPath: /config\n              name: proxy-config\n          args:\n            - \"envoy\"\n            - \"--config-path\"\n            - \"/config/envoy.yaml\"\n        - name: kyverno-envoy-plugin\n          image: sanskardevops/plugin:0.0.34\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 8181\n            - containerPort: 9000\n          volumeMounts:\n            - readOnly: true\n              mountPath: /policies\n              name: policy-files\n          args:\n            - \"serve\"\n            - \"--policy=/policies/policy.yaml\"\n            - \"--address=:9000\"\n            - \"--healthaddress=:8181\"\n          livenessProbe:\n            httpGet:\n              path: /health\n              scheme: HTTP\n              port: 8181\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          readinessProbe:\n            httpGet:\n              path: /health\n              scheme: HTTP\n              port: 8181\n            initialDelaySeconds: 5\n            periodSeconds: 5  \n      volumes:\n        - name: proxy-config\n          configMap:\n            name: proxy-config\n        - name: policy-files\n          configMap:\n            name: policy-files\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: testapp\n  namespace: demo\nspec:\n  type: ClusterIP\n  selector:\n    app: testapp\n  ports:\n  - port: 8080\n    targetPort: 8080      \n</code></pre> <p>Deploy the application and Kubernetes Service to the cluster with:</p> <p><pre><code>$ kubectl apply -f test-application.yaml\n</code></pre> Check that everything is working by listing the pod and make sure all three pods are running ok.</p> <pre><code>$ kubectl get pods\nNAME                         READY   STATUS    RESTARTS   AGE\ntestapp-74b4bc88-5d4wh       3/3     Running   0          1m\n</code></pre>"},{"location":"tutorials/standalone-envoy/#policy-in-action","title":"Policy in action","text":"<p>For convenience, we\u2019ll want to store Alice\u2019s and Bob\u2019s tokens in environment variables. Here bob is assigned the admin role and alice is assigned the guest role.</p> <pre><code>export ALICE_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk\"\nexport BOB_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6ImFkbWluIiwic3ViIjoiWVd4cFkyVT0ifQ.veMeVDYlulTdieeX-jxFZ_tCmqQ_K8rwx2OktUHv5Z0\"\n</code></pre> <p>Check for <code>Alice</code> which can get book but cannot create book.</p> <p><pre><code>kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --header=\"authorization: Bearer \"$ALICE_TOKEN\"\" --output-document - testapp.demo.svc.cluster.local:8080/book\n</code></pre> <pre><code>kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --header=\"authorization: Bearer \"$ALICE_TOKEN\"\" --post-data='{\"bookname\":\"Harry Potter\", \"author\":\"J.K. Rowling\"}' --output-document - testapp.demo.svc.cluster.local:8080/book\n</code></pre> Check the <code>Bob</code> which can get book also create the book </p> <pre><code>kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --header=\"authorization: Bearer \"$BOB_TOKEN\"\" --output-document - testapp.demo.svc.cluster.local:8080/book\n</code></pre> <pre><code>kubectl run test -it --rm --restart=Never --image=busybox -- wget -q --header=\"authorization: Bearer \"$BOB_TOKEN\"\" --post-data='{\"bookname\":\"Harry Potter\", \"author\":\"J.K. Rowling\"}' --output-document - testapp.demo.svc.cluster.local:8080/book\n</code></pre> <p>Check on logs  <pre><code>kubectl logs \"$(kubectl get pod -l app=testapp -n demo -o jsonpath={.items..metadata.name})\" -n demo -c kyverno-envoy-plugin -f\n</code></pre> First , third and last request is passed but second request is failed.</p> <pre><code>sanskar@sanskar-HP-Laptop-15s-du1xxx:~$ kubectl logs \"$(kubectl get pod -l app=testapp -n demo -o jsonpath={.items..metadata.name})\" -n demo -c kyverno-envoy-plugin -f\nStarting HTTP server on Port 8000\nStarting GRPC server on Port 9000\nRequest is initialized in kyvernojson engine .\n2024/04/26 17:11:42 Request passed the deny-guest-request-at-post policy rule.\nRequest is initialized in kyvernojson engine .\n2024/04/26 17:22:11 Request violation: -&gt; POST method calls at path /book are not allowed to guests users\n -&gt; any[0].check.request.http.headers.authorization.(split(@, ' ')[1]).(jwt_decode(@ , 'secret').payload.role): Invalid value: \"guest\": Expected value: \"admin\"\n-&gt; GET method call is allowed to both guest and admin users\n -&gt; any[1].check.request.http.headers.authorization.(split(@, ' ')[1]).(jwt_decode(@ , 'secret').payload.role): Invalid value: \"guest\": Expected value: \"admin\"\n -&gt; any[1].check.request.http.method: Invalid value: \"POST\": Expected value: \"GET\"\n-&gt; GET method call is allowed to both guest and admin users\n -&gt; any[2].check.request.http.method: Invalid value: \"POST\": Expected value: \"GET\"\nRequest is initialized in kyvernojson engine .\n2024/04/26 17:23:13 Request passed the deny-guest-request-at-post policy rule.\nRequest is initialized in kyvernojson engine .\n2024/04/26 17:23:55 Request passed the deny-guest-request-at-post policy rule.\n</code></pre>"},{"location":"tutorials/standalone-envoy/#cleanup","title":"Cleanup","text":"<p>Delete the cluster by running: <pre><code>$ kind delete cluster --name kyverno-tutorial\n</code></pre></p>"},{"location":"tutorials/standalone-envoy/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>In this tutorial, you learned how to utilize the kyverno-envoy-plugin as an external authorization service to enforce custom policies through Envoy\u2019s external authorization filter.</p> <p>The tutorial also included an example policy using kyverno-envoy-plugin that returns a boolean decision indicating whether a request should be permitted.</p> <p>Moreover, Envoy\u2019s external authorization filter supports the inclusion of optional response headers and body content that can be sent to either the downstream client or upstream server. An example of a rule that not only determines request authorization but also provides optional response headers, body content, and HTTP status is available here.</p>"},{"location":"tutorials/istio/","title":"Istio","text":"<p>Istio is an open source service mesh for managing the different microservices that make up a cloud-native application. Istio provides a mechanism to use a service as an external authorizer with the AuthorizationPolicy API.</p> <p>This tutorial shows how Istio\u2019s AuthorizationPolicy can be configured to delegate authorization decisions to the Kyverno Authz Server.</p>"},{"location":"tutorials/istio/#setup","title":"Setup","text":""},{"location":"tutorials/istio/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster with Istio installed</li> <li>Helm to install the Kyverno Authz Server</li> <li>istioctl to configure the mesh</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"tutorials/istio/#setup-a-cluster-optional","title":"Setup a cluster (optional)","text":"<p>If you don't have a cluster at hand, you can create a local one with kind and istall Istio with Helm.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n\n# install istio\nhelm install istio-base --namespace istio-system --create-namespace --wait --repo https://istio-release.storage.googleapis.com/charts base\nhelm install istiod --namespace istio-system --create-namespace --wait --repo https://istio-release.storage.googleapis.com/charts istiod\n</code></pre>"},{"location":"tutorials/istio/#deploy-the-kyverno-authz-server","title":"Deploy the Kyverno Authz Server","text":"<p>The first step is to deploy the Kyverno Authz Server.</p> <pre><code># create the kyverno namespace\nkubectl create ns kyverno\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace kyverno istio-injection=enabled\n\n# deploy the kyverno authz server\nhelm install kyverno-authz-server --namespace kyverno --wait --repo https://kyverno.github.io/kyverno-envoy-plugin kyverno-authz-server\n</code></pre>"},{"location":"tutorials/istio/#configure-the-mesh","title":"Configure the mesh","text":"<p>We need to register the Kyverno Authz Server with Istio.</p> <pre><code># configure the mesh\nistioctl install -y -f - &lt;&lt;EOF\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n  meshConfig:\n    accessLogFile: /dev/stdout\n    extensionProviders:\n    - name: kyverno-authz-server.local\n      envoyExtAuthzGrpc:\n        service: kyverno-authz-server.kyverno.svc.cluster.local\n        port: '9081'\nEOF\n</code></pre> <p>Notice that in the configuration, we define an <code>extensionProviders</code> section that points to the Kyverno Authz Server installation:</p> <pre><code>[...]\n    extensionProviders:\n    - name: kyverno-authz-server.local\n      envoyExtAuthzGrpc:\n        service: kyverno-authz-server.kyverno.svc.cluster.local\n        port: '9081'\n[...]\n</code></pre>"},{"location":"tutorials/istio/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>Httpbin is a well-known application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# label the namespace to inject the envoy proxy\nkubectl label namespace demo istio-injection=enabled\n\n# deploy the httpbin application\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml -n demo\n</code></pre>"},{"location":"tutorials/istio/#deploy-an-istio-authorizationpolicy","title":"Deploy an Istio AuthorizationPolicy","text":"<p>An <code>AuthorizationPolicy</code> is the custom Istio resource that defines the services that will be protected by the Kyverno Authz Server.</p> <pre><code># deploy istio authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: kyverno-authz-server\n  namespace: demo\nspec:\n  action: CUSTOM\n  provider:\n    name: kyverno-authz-server.local\n  rules:\n  - {} # empty rules, it will apply to all requests\nEOF\n</code></pre> <p>Notice that in this resource, we define the Kyverno Authz Server <code>extensionProvider</code> you set in the Istio configuration:</p> <pre><code>[...]\n  provider:\n    name: kyverno-authz-server.local\n[...]\n</code></pre>"},{"location":"tutorials/istio/#creating-a-kyverno-authorizationpolicy","title":"Creating a Kyverno AuthorizationPolicy","text":"<p>In summary the policy below does the following:</p> <ul> <li>Checks that the JWT token is valid</li> <li>Checks that the action is allowed based on the token payload <code>role</code> and the request path</li> </ul> <pre><code># deploy kyverno authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: envoy.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo\nspec:\n  failurePolicy: Fail\n  variables:\n  - name: authorization\n    expression: object.attributes.request.http.headers[?\"authorization\"].orValue(\"\").split(\" \")\n  - name: token\n    expression: &gt;\n      size(variables.authorization) == 2 &amp;&amp; variables.authorization[0].lowerAscii() == \"bearer\"\n        ? jwt.Decode(variables.authorization[1], \"secret\")\n        : null\n  authorizations:\n    # request not authenticated -&gt; 401\n  - expression: &gt;\n      variables.token == null || !variables.token.Valid\n        ? envoy.Denied(401).Response()\n        : null\n    # request authenticated but not admin role -&gt; 403\n  - expression: &gt;\n      variables.token.Claims.?role.orValue(\"\") != \"admin\"\n        ? envoy.Denied(403).Response()\n        : null\n    # request authenticated and admin role -&gt; 200\n  - expression: &gt;\n      envoy.Allowed().Response()\nEOF\n</code></pre>"},{"location":"tutorials/istio/#testing","title":"Testing","text":"<p>At this we have deployed and configured Istio, the Kyverno Authz Server, a sample application, and the authorization policies.</p>"},{"location":"tutorials/istio/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"tutorials/istio/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"tutorials/istio/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send request to the sample application and verify the result.</p> <p>For convenience, we will store Alice\u2019s and Bob\u2019s tokens in environment variables.</p> <p>Here Bob is assigned the admin role and Alice is assigned the guest role.</p> <pre><code>export ALICE_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6Imd1ZXN0Iiwic3ViIjoiWVd4cFkyVT0ifQ.ja1bgvIt47393ba_WbSBm35NrUhdxM4mOVQN8iXz8lk\"\nexport BOB_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjIyNDEwODE1MzksIm5iZiI6MTUxNDg1MTEzOSwicm9sZSI6ImFkbWluIiwic3ViIjoiWVd4cFkyVT0ifQ.veMeVDYlulTdieeX-jxFZ_tCmqQ_K8rwx2OktUHv5Z0\"\n</code></pre> <p>Calling without a JWT token will return <code>401</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get\n</code></pre> <p>Calling with Alice\u2019s JWT token will return <code>403</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"authorization: Bearer $ALICE_TOKEN\"\n</code></pre> <p>Calling with Bob\u2019s JWT token will return <code>200</code>:</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" httpbin:8000/get -H \"authorization: Bearer $BOB_TOKEN\"\n</code></pre>"},{"location":"tutorials/istio/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure Istio\u2019s EnvoyFilter to utilize the Kyverno Authz Server as an external authorization service.</p> <p>Additionally, the tutorial provided an example policy to decode a JWT token and make a decision based on it.</p>"}]}