// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: validatingpolicy.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ValidatingPolicyService_PolicyDiscoveryStream_FullMethodName = "/kyverno.http.v1alpha1.ValidatingPolicyService/PolicyDiscoveryStream"
	ValidatingPolicyService_HealthCheck_FullMethodName           = "/kyverno.http.v1alpha1.ValidatingPolicyService/HealthCheck"
)

// ValidatingPolicyServiceClient is the client API for ValidatingPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ValidatingPolicyService provides bidirectional communication for validating policies
type ValidatingPolicyServiceClient interface {
	PolicyDiscoveryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PolicyDiscoveryRequest, ValidatingPolicy], error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type validatingPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidatingPolicyServiceClient(cc grpc.ClientConnInterface) ValidatingPolicyServiceClient {
	return &validatingPolicyServiceClient{cc}
}

func (c *validatingPolicyServiceClient) PolicyDiscoveryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PolicyDiscoveryRequest, ValidatingPolicy], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ValidatingPolicyService_ServiceDesc.Streams[0], ValidatingPolicyService_PolicyDiscoveryStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PolicyDiscoveryRequest, ValidatingPolicy]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatingPolicyService_PolicyDiscoveryStreamClient = grpc.BidiStreamingClient[PolicyDiscoveryRequest, ValidatingPolicy]

func (c *validatingPolicyServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ValidatingPolicyService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidatingPolicyServiceServer is the server API for ValidatingPolicyService service.
// All implementations must embed UnimplementedValidatingPolicyServiceServer
// for forward compatibility.
//
// ValidatingPolicyService provides bidirectional communication for validating policies
type ValidatingPolicyServiceServer interface {
	PolicyDiscoveryStream(grpc.BidiStreamingServer[PolicyDiscoveryRequest, ValidatingPolicy]) error
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedValidatingPolicyServiceServer()
}

// UnimplementedValidatingPolicyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValidatingPolicyServiceServer struct{}

func (UnimplementedValidatingPolicyServiceServer) PolicyDiscoveryStream(grpc.BidiStreamingServer[PolicyDiscoveryRequest, ValidatingPolicy]) error {
	return status.Errorf(codes.Unimplemented, "method PolicyDiscoveryStream not implemented")
}
func (UnimplementedValidatingPolicyServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedValidatingPolicyServiceServer) mustEmbedUnimplementedValidatingPolicyServiceServer() {
}
func (UnimplementedValidatingPolicyServiceServer) testEmbeddedByValue() {}

// UnsafeValidatingPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidatingPolicyServiceServer will
// result in compilation errors.
type UnsafeValidatingPolicyServiceServer interface {
	mustEmbedUnimplementedValidatingPolicyServiceServer()
}

func RegisterValidatingPolicyServiceServer(s grpc.ServiceRegistrar, srv ValidatingPolicyServiceServer) {
	// If the following call pancis, it indicates UnimplementedValidatingPolicyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValidatingPolicyService_ServiceDesc, srv)
}

func _ValidatingPolicyService_PolicyDiscoveryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidatingPolicyServiceServer).PolicyDiscoveryStream(&grpc.GenericServerStream[PolicyDiscoveryRequest, ValidatingPolicy]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatingPolicyService_PolicyDiscoveryStreamServer = grpc.BidiStreamingServer[PolicyDiscoveryRequest, ValidatingPolicy]

func _ValidatingPolicyService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatingPolicyServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatingPolicyService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatingPolicyServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidatingPolicyService_ServiceDesc is the grpc.ServiceDesc for ValidatingPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidatingPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyverno.http.v1alpha1.ValidatingPolicyService",
	HandlerType: (*ValidatingPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ValidatingPolicyService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PolicyDiscoveryStream",
			Handler:       _ValidatingPolicyService_PolicyDiscoveryStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "validatingpolicy.proto",
}
